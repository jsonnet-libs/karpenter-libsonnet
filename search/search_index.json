{"config":{"lang":["en"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"karpenter Jsonnet library","text":"<p>This library is generated with <code>k8s</code>.</p> <ul> <li>0.27/aws</li> <li>0.31/aws</li> <li>0.32/aws</li> <li>0.33/aws</li> <li>0.34/aws</li> <li>0.35/aws</li> <li>0.27/sh</li> <li>0.31/sh</li> <li>0.32/sh</li> <li>0.33/sh</li> <li>0.34/sh</li> <li>0.35/sh</li> </ul>"},{"location":"0.27/aws/","title":"karpenter","text":"<pre><code>local karpenter = import \"github.com/jsonnet-libs/karpenter-libsonnet/0.27/aws/main.libsonnet\"\n</code></pre> <ul> <li>karpenter</li> </ul>"},{"location":"0.27/aws/karpenter/","title":"karpenter","text":"<ul> <li>v1alpha1</li> </ul>"},{"location":"0.27/aws/karpenter/v1alpha1/","title":"karpenter.v1alpha1","text":"<ul> <li>awsNodeTemplate</li> </ul>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/","title":"karpenter.v1alpha1.awsNodeTemplate","text":"<p>\"AWSNodeTemplate is the Schema for the AWSNodeTemplate API\"</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withAmiFamily(amiFamily)</code></li> <li><code>fn withAmiSelector(amiSelector)</code></li> <li><code>fn withAmiSelectorMixin(amiSelector)</code></li> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withBlockDeviceMappings(blockDeviceMappings)</code></li> <li><code>fn withBlockDeviceMappingsMixin(blockDeviceMappings)</code></li> <li><code>fn withContext(context)</code></li> <li><code>fn withDetailedMonitoring(detailedMonitoring)</code></li> <li><code>fn withInstanceProfile(instanceProfile)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withLaunchTemplate(launchTemplate)</code></li> <li><code>fn withSecurityGroupSelector(securityGroupSelector)</code></li> <li><code>fn withSecurityGroupSelectorMixin(securityGroupSelector)</code></li> <li><code>fn withSubnetSelector(subnetSelector)</code></li> <li><code>fn withSubnetSelectorMixin(subnetSelector)</code></li> <li><code>fn withTags(tags)</code></li> <li><code>fn withTagsMixin(tags)</code></li> <li><code>fn withUserData(userData)</code></li> <li><code>obj spec.blockDeviceMappings</code><ul> <li><code>fn withDeviceName(deviceName)</code></li> <li><code>obj spec.blockDeviceMappings.ebs</code><ul> <li><code>fn withDeleteOnTermination(deleteOnTermination)</code></li> <li><code>fn withEncrypted(encrypted)</code></li> <li><code>fn withIops(iops)</code></li> <li><code>fn withKmsKeyID(kmsKeyID)</code></li> <li><code>fn withSnapshotID(snapshotID)</code></li> <li><code>fn withThroughput(throughput)</code></li> <li><code>fn withVolumeSize(volumeSize)</code></li> <li><code>fn withVolumeType(volumeType)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.metadataOptions</code><ul> <li><code>fn withHttpEndpoint(httpEndpoint)</code></li> <li><code>fn withHttpProtocolIPv6(httpProtocolIPv6)</code></li> <li><code>fn withHttpPutResponseHopLimit(httpPutResponseHopLimit)</code></li> <li><code>fn withHttpTokens(httpTokens)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fields","title":"Fields","text":""},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of AWSNodeTemplate</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#obj-spec","title":"obj spec","text":"<p>\"AWSNodeTemplateSpec is the top level specification for the AWS Karpenter Provider. This will contain configuration necessary to launch instances in AWS.\"</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithamifamily","title":"fn spec.withAmiFamily","text":"<pre><code>withAmiFamily(amiFamily)\n</code></pre> <p>\"AMIFamily is the AMI family that instances use.\"</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithamiselector","title":"fn spec.withAmiSelector","text":"<pre><code>withAmiSelector(amiSelector)\n</code></pre> <p>\"AMISelector discovers AMIs to be used by Amazon EC2 tags.\"</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithamiselectormixin","title":"fn spec.withAmiSelectorMixin","text":"<pre><code>withAmiSelectorMixin(amiSelector)\n</code></pre> <p>\"AMISelector discovers AMIs to be used by Amazon EC2 tags.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithapiversion","title":"fn spec.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\"</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithblockdevicemappings","title":"fn spec.withBlockDeviceMappings","text":"<pre><code>withBlockDeviceMappings(blockDeviceMappings)\n</code></pre> <p>\"BlockDeviceMappings to be applied to provisioned nodes.\"</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithblockdevicemappingsmixin","title":"fn spec.withBlockDeviceMappingsMixin","text":"<pre><code>withBlockDeviceMappingsMixin(blockDeviceMappings)\n</code></pre> <p>\"BlockDeviceMappings to be applied to provisioned nodes.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithcontext","title":"fn spec.withContext","text":"<pre><code>withContext(context)\n</code></pre> <p>\"Context is a Reserved field in EC2 APIs https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet.html\"</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithdetailedmonitoring","title":"fn spec.withDetailedMonitoring","text":"<pre><code>withDetailedMonitoring(detailedMonitoring)\n</code></pre> <p>\"DetailedMonitoring controls if detailed monitoring is enabled for instances that are launched\"</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithinstanceprofile","title":"fn spec.withInstanceProfile","text":"<pre><code>withInstanceProfile(instanceProfile)\n</code></pre> <p>\"InstanceProfile is the AWS identity that instances use.\"</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithkind","title":"fn spec.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\"</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithlaunchtemplate","title":"fn spec.withLaunchTemplate","text":"<pre><code>withLaunchTemplate(launchTemplate)\n</code></pre> <p>\"LaunchTemplateName for the node. If not specified, a launch template will be generated. NOTE: This field is for specifying a custom launch template and is exposed in the Spec as <code>launchTemplate</code> for backwards compatibility.\"</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithsecuritygroupselector","title":"fn spec.withSecurityGroupSelector","text":"<pre><code>withSecurityGroupSelector(securityGroupSelector)\n</code></pre> <p>\"SecurityGroups specify the names of the security groups.\"</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithsecuritygroupselectormixin","title":"fn spec.withSecurityGroupSelectorMixin","text":"<pre><code>withSecurityGroupSelectorMixin(securityGroupSelector)\n</code></pre> <p>\"SecurityGroups specify the names of the security groups.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithsubnetselector","title":"fn spec.withSubnetSelector","text":"<pre><code>withSubnetSelector(subnetSelector)\n</code></pre> <p>\"SubnetSelector discovers subnets by tags. A value of \\\"\\\" is a wildcard.\"</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithsubnetselectormixin","title":"fn spec.withSubnetSelectorMixin","text":"<pre><code>withSubnetSelectorMixin(subnetSelector)\n</code></pre> <p>\"SubnetSelector discovers subnets by tags. A value of \\\"\\\" is a wildcard.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithtags","title":"fn spec.withTags","text":"<pre><code>withTags(tags)\n</code></pre> <p>\"Tags to be applied on ec2 resources like instances and launch templates.\"</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithtagsmixin","title":"fn spec.withTagsMixin","text":"<pre><code>withTagsMixin(tags)\n</code></pre> <p>\"Tags to be applied on ec2 resources like instances and launch templates.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithuserdata","title":"fn spec.withUserData","text":"<pre><code>withUserData(userData)\n</code></pre> <p>\"UserData to be applied to the provisioned nodes. It must be in the appropriate format based on the AMIFamily in use. Karpenter will merge certain fields into this UserData to ensure nodes are being provisioned with the correct configuration.\"</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#obj-specblockdevicemappings","title":"obj spec.blockDeviceMappings","text":"<p>\"BlockDeviceMappings to be applied to provisioned nodes.\"</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specblockdevicemappingswithdevicename","title":"fn spec.blockDeviceMappings.withDeviceName","text":"<pre><code>withDeviceName(deviceName)\n</code></pre> <p>\"The device name (for example, /dev/sdh or xvdh).\"</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#obj-specblockdevicemappingsebs","title":"obj spec.blockDeviceMappings.ebs","text":"<p>\"EBS contains parameters used to automatically set up EBS volumes when an instance is launched.\"</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specblockdevicemappingsebswithdeleteontermination","title":"fn spec.blockDeviceMappings.ebs.withDeleteOnTermination","text":"<pre><code>withDeleteOnTermination(deleteOnTermination)\n</code></pre> <p>\"DeleteOnTermination indicates whether the EBS volume is deleted on instance termination.\"</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specblockdevicemappingsebswithencrypted","title":"fn spec.blockDeviceMappings.ebs.withEncrypted","text":"<pre><code>withEncrypted(encrypted)\n</code></pre> <p>\"Encrypted indicates whether the EBS volume is encrypted. Encrypted volumes can only be attached to instances that support Amazon EBS encryption. If you are creating a volume from a snapshot, you can't specify an encryption value.\"</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specblockdevicemappingsebswithiops","title":"fn spec.blockDeviceMappings.ebs.withIops","text":"<pre><code>withIops(iops)\n</code></pre> <p>\"IOPS is the number of I/O operations per second (IOPS). For gp3, io1, and io2 volumes, this represents the number of IOPS that are provisioned for the volume. For gp2 volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. \\n The following are the supported values for each volume type: \\n * gp3: 3,000-16,000 IOPS \\n * io1: 100-64,000 IOPS \\n * io2: 100-64,000 IOPS \\n For io1 and io2 volumes, we guarantee 64,000 IOPS only for Instances built on the Nitro System (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances). Other instance families guarantee performance up to 32,000 IOPS. \\n This parameter is supported for io1, io2, and gp3 volumes only. This parameter is not supported for gp2, st1, sc1, or standard volumes.\"</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specblockdevicemappingsebswithkmskeyid","title":"fn spec.blockDeviceMappings.ebs.withKmsKeyID","text":"<pre><code>withKmsKeyID(kmsKeyID)\n</code></pre> <p>\"KMSKeyID (ARN) of the symmetric Key Management Service (KMS) CMK used for encryption.\"</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specblockdevicemappingsebswithsnapshotid","title":"fn spec.blockDeviceMappings.ebs.withSnapshotID","text":"<pre><code>withSnapshotID(snapshotID)\n</code></pre> <p>\"SnapshotID is the ID of an EBS snapshot\"</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specblockdevicemappingsebswiththroughput","title":"fn spec.blockDeviceMappings.ebs.withThroughput","text":"<pre><code>withThroughput(throughput)\n</code></pre> <p>\"Throughput to provision for a gp3 volume, with a maximum of 1,000 MiB/s. Valid Range: Minimum value of 125. Maximum value of 1000.\"</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specblockdevicemappingsebswithvolumesize","title":"fn spec.blockDeviceMappings.ebs.withVolumeSize","text":"<pre><code>withVolumeSize(volumeSize)\n</code></pre> <p>\"VolumeSize in GiBs. You must specify either a snapshot ID or a volume size. The following are the supported volumes sizes for each volume type: \\n * gp2 and gp3: 1-16,384 \\n * io1 and io2: 4-16,384 \\n * st1 and sc1: 125-16,384 \\n * standard: 1-1,024\"</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specblockdevicemappingsebswithvolumetype","title":"fn spec.blockDeviceMappings.ebs.withVolumeType","text":"<pre><code>withVolumeType(volumeType)\n</code></pre> <p>\"VolumeType of the block device. For more information, see Amazon EBS volume types (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html) in the Amazon Elastic Compute Cloud User Guide.\"</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#obj-specmetadataoptions","title":"obj spec.metadataOptions","text":"<p>\"MetadataOptions for the generated launch template of provisioned nodes. \\n This specifies the exposure of the Instance Metadata Service to provisioned EC2 nodes. For more information, see Instance Metadata and User Data (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html) in the Amazon Elastic Compute Cloud User Guide. \\n Refer to recommended, security best practices (https://aws.github.io/aws-eks-best-practices/security/docs/iam/#restrict-access-to-the-instance-profile-assigned-to-the-worker-node) for limiting exposure of Instance Metadata and User Data to pods. If omitted, defaults to httpEndpoint enabled, with httpProtocolIPv6 disabled, with httpPutResponseLimit of 2, and with httpTokens required.\"</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specmetadataoptionswithhttpendpoint","title":"fn spec.metadataOptions.withHttpEndpoint","text":"<pre><code>withHttpEndpoint(httpEndpoint)\n</code></pre> <p>\"HTTPEndpoint enables or disables the HTTP metadata endpoint on provisioned nodes. If metadata options is non-nil, but this parameter is not specified, the default state is \\\"enabled\\\". \\n If you specify a value of \\\"disabled\\\", instance metadata will not be accessible on the node.\"</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specmetadataoptionswithhttpprotocolipv6","title":"fn spec.metadataOptions.withHttpProtocolIPv6","text":"<pre><code>withHttpProtocolIPv6(httpProtocolIPv6)\n</code></pre> <p>\"HTTPProtocolIPv6 enables or disables the IPv6 endpoint for the instance metadata service on provisioned nodes. If metadata options is non-nil, but this parameter is not specified, the default state is \\\"disabled\\\".\"</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specmetadataoptionswithhttpputresponsehoplimit","title":"fn spec.metadataOptions.withHttpPutResponseHopLimit","text":"<pre><code>withHttpPutResponseHopLimit(httpPutResponseHopLimit)\n</code></pre> <p>\"HTTPPutResponseHopLimit is the desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. Possible values are integers from 1 to 64. If metadata options is non-nil, but this parameter is not specified, the default value is 1.\"</p>"},{"location":"0.27/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specmetadataoptionswithhttptokens","title":"fn spec.metadataOptions.withHttpTokens","text":"<pre><code>withHttpTokens(httpTokens)\n</code></pre> <p>\"HTTPTokens determines the state of token usage for instance metadata requests. If metadata options is non-nil, but this parameter is not specified, the default state is \\\"optional\\\". \\n If the state is optional, one can choose to retrieve instance metadata with or without a signed token header on the request. If one retrieves the IAM role credentials without a token, the version 1.0 role credentials are returned. If one retrieves the IAM role credentials using a valid signed token, the version 2.0 role credentials are returned. \\n If the state is \\\"required\\\", one must send a signed token header with any instance metadata retrieval requests. In this state, retrieving the IAM role credentials always returns the version 2.0 credentials; the version 1.0 credentials are not available.\"</p>"},{"location":"0.27/sh/","title":"karpenter","text":"<pre><code>local karpenter = import \"github.com/jsonnet-libs/karpenter-libsonnet/0.27/sh/main.libsonnet\"\n</code></pre> <ul> <li>karpenter</li> </ul>"},{"location":"0.27/sh/karpenter/","title":"karpenter","text":"<ul> <li>v1alpha5</li> </ul>"},{"location":"0.27/sh/karpenter/v1alpha5/","title":"karpenter.v1alpha5","text":"<ul> <li>provisioner</li> </ul>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/","title":"karpenter.v1alpha5.provisioner","text":"<p>\"Provisioner is the Schema for the Provisioners API\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withProvider(provider)</code></li> <li><code>fn withProviderMixin(provider)</code></li> <li><code>fn withRequirements(requirements)</code></li> <li><code>fn withRequirementsMixin(requirements)</code></li> <li><code>fn withStartupTaints(startupTaints)</code></li> <li><code>fn withStartupTaintsMixin(startupTaints)</code></li> <li><code>fn withTaints(taints)</code></li> <li><code>fn withTaintsMixin(taints)</code></li> <li><code>fn withTtlSecondsAfterEmpty(ttlSecondsAfterEmpty)</code></li> <li><code>fn withTtlSecondsUntilExpired(ttlSecondsUntilExpired)</code></li> <li><code>fn withWeight(weight)</code></li> <li><code>obj spec.consolidation</code><ul> <li><code>fn withEnabled(enabled)</code></li> </ul> </li> <li><code>obj spec.kubeletConfiguration</code><ul> <li><code>fn withClusterDNS(clusterDNS)</code></li> <li><code>fn withClusterDNSMixin(clusterDNS)</code></li> <li><code>fn withContainerRuntime(containerRuntime)</code></li> <li><code>fn withCpuCFSQuota(cpuCFSQuota)</code></li> <li><code>fn withEvictionHard(evictionHard)</code></li> <li><code>fn withEvictionHardMixin(evictionHard)</code></li> <li><code>fn withEvictionMaxPodGracePeriod(evictionMaxPodGracePeriod)</code></li> <li><code>fn withEvictionSoft(evictionSoft)</code></li> <li><code>fn withEvictionSoftGracePeriod(evictionSoftGracePeriod)</code></li> <li><code>fn withEvictionSoftGracePeriodMixin(evictionSoftGracePeriod)</code></li> <li><code>fn withEvictionSoftMixin(evictionSoft)</code></li> <li><code>fn withImageGCHighThresholdPercent(imageGCHighThresholdPercent)</code></li> <li><code>fn withImageGCLowThresholdPercent(imageGCLowThresholdPercent)</code></li> <li><code>fn withKubeReserved(kubeReserved)</code></li> <li><code>fn withKubeReservedMixin(kubeReserved)</code></li> <li><code>fn withMaxPods(maxPods)</code></li> <li><code>fn withPodsPerCore(podsPerCore)</code></li> <li><code>fn withSystemReserved(systemReserved)</code></li> <li><code>fn withSystemReservedMixin(systemReserved)</code></li> </ul> </li> <li><code>obj spec.limits</code><ul> <li><code>fn withResources(resources)</code></li> <li><code>fn withResourcesMixin(resources)</code></li> </ul> </li> <li><code>obj spec.providerRef</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.requirements</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> <li><code>obj spec.startupTaints</code><ul> <li><code>fn withEffect(effect)</code></li> <li><code>fn withKey(key)</code></li> <li><code>fn withTimeAdded(timeAdded)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.taints</code><ul> <li><code>fn withEffect(effect)</code></li> <li><code>fn withKey(key)</code></li> <li><code>fn withTimeAdded(timeAdded)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fields","title":"Fields","text":""},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of Provisioner</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#obj-spec","title":"obj spec","text":"<p>\"ProvisionerSpec is the top level provisioner specification. Provisioners launch nodes in response to pods that are unschedulable. A single provisioner is capable of managing a diverse set of nodes. Node properties are determined from a combination of provisioner and pod scheduling constraints.\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-specwithannotations","title":"fn spec.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations are applied to every node.\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-specwithannotationsmixin","title":"fn spec.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations are applied to every node.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-specwithlabels","title":"fn spec.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Labels are layered with Requirements and applied to every node.\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-specwithlabelsmixin","title":"fn spec.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Labels are layered with Requirements and applied to every node.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-specwithprovider","title":"fn spec.withProvider","text":"<pre><code>withProvider(provider)\n</code></pre> <p>\"Provider contains fields specific to your cloudprovider.\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-specwithprovidermixin","title":"fn spec.withProviderMixin","text":"<pre><code>withProviderMixin(provider)\n</code></pre> <p>\"Provider contains fields specific to your cloudprovider.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-specwithrequirements","title":"fn spec.withRequirements","text":"<pre><code>withRequirements(requirements)\n</code></pre> <p>\"Requirements are layered with Labels and applied to every node.\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-specwithrequirementsmixin","title":"fn spec.withRequirementsMixin","text":"<pre><code>withRequirementsMixin(requirements)\n</code></pre> <p>\"Requirements are layered with Labels and applied to every node.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-specwithstartuptaints","title":"fn spec.withStartupTaints","text":"<pre><code>withStartupTaints(startupTaints)\n</code></pre> <p>\"StartupTaints are taints that are applied to nodes upon startup which are expected to be removed automatically within a short period of time, typically by a DaemonSet that tolerates the taint. These are commonly used by daemonsets to allow initialization and enforce startup ordering.  StartupTaints are ignored for provisioning purposes in that pods are not required to tolerate a StartupTaint in order to have nodes provisioned for them.\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-specwithstartuptaintsmixin","title":"fn spec.withStartupTaintsMixin","text":"<pre><code>withStartupTaintsMixin(startupTaints)\n</code></pre> <p>\"StartupTaints are taints that are applied to nodes upon startup which are expected to be removed automatically within a short period of time, typically by a DaemonSet that tolerates the taint. These are commonly used by daemonsets to allow initialization and enforce startup ordering.  StartupTaints are ignored for provisioning purposes in that pods are not required to tolerate a StartupTaint in order to have nodes provisioned for them.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-specwithtaints","title":"fn spec.withTaints","text":"<pre><code>withTaints(taints)\n</code></pre> <p>\"Taints will be applied to every node launched by the Provisioner. If specified, the provisioner will not provision nodes for pods that do not have matching tolerations. Additional taints will be created that match pod tolerations on a per-node basis.\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-specwithtaintsmixin","title":"fn spec.withTaintsMixin","text":"<pre><code>withTaintsMixin(taints)\n</code></pre> <p>\"Taints will be applied to every node launched by the Provisioner. If specified, the provisioner will not provision nodes for pods that do not have matching tolerations. Additional taints will be created that match pod tolerations on a per-node basis.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-specwithttlsecondsafterempty","title":"fn spec.withTtlSecondsAfterEmpty","text":"<pre><code>withTtlSecondsAfterEmpty(ttlSecondsAfterEmpty)\n</code></pre> <p>\"TTLSecondsAfterEmpty is the number of seconds the controller will wait before attempting to delete a node, measured from when the node is detected to be empty. A Node is considered to be empty when it does not have pods scheduled to it, excluding daemonsets. \\n Termination due to no utilization is disabled if this field is not set.\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-specwithttlsecondsuntilexpired","title":"fn spec.withTtlSecondsUntilExpired","text":"<pre><code>withTtlSecondsUntilExpired(ttlSecondsUntilExpired)\n</code></pre> <p>\"TTLSecondsUntilExpired is the number of seconds the controller will wait before terminating a node, measured from when the node is created. This is useful to implement features like eventually consistent node upgrade, memory leak protection, and disruption testing. \\n Termination due to expiration is disabled if this field is not set.\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-specwithweight","title":"fn spec.withWeight","text":"<pre><code>withWeight(weight)\n</code></pre> <p>\"Weight is the priority given to the provisioner during scheduling. A higher numerical weight indicates that this provisioner will be ordered ahead of other provisioners with lower weights. A provisioner with no weight will be treated as if it is a provisioner with a weight of 0.\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#obj-specconsolidation","title":"obj spec.consolidation","text":"<p>\"Consolidation are the consolidation parameters\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-specconsolidationwithenabled","title":"fn spec.consolidation.withEnabled","text":"<pre><code>withEnabled(enabled)\n</code></pre> <p>\"Enabled enables consolidation if it has been set\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#obj-speckubeletconfiguration","title":"obj spec.kubeletConfiguration","text":"<p>\"KubeletConfiguration are options passed to the kubelet when provisioning nodes\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithclusterdns","title":"fn spec.kubeletConfiguration.withClusterDNS","text":"<pre><code>withClusterDNS(clusterDNS)\n</code></pre> <p>\"clusterDNS is a list of IP addresses for the cluster DNS server. Note that not all providers may use all addresses.\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithclusterdnsmixin","title":"fn spec.kubeletConfiguration.withClusterDNSMixin","text":"<pre><code>withClusterDNSMixin(clusterDNS)\n</code></pre> <p>\"clusterDNS is a list of IP addresses for the cluster DNS server. Note that not all providers may use all addresses.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithcontainerruntime","title":"fn spec.kubeletConfiguration.withContainerRuntime","text":"<pre><code>withContainerRuntime(containerRuntime)\n</code></pre> <p>\"ContainerRuntime is the container runtime to be used with your worker nodes.\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithcpucfsquota","title":"fn spec.kubeletConfiguration.withCpuCFSQuota","text":"<pre><code>withCpuCFSQuota(cpuCFSQuota)\n</code></pre> <p>\"CPUCFSQuota enables CPU CFS quota enforcement for containers that specify CPU limits.\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithevictionhard","title":"fn spec.kubeletConfiguration.withEvictionHard","text":"<pre><code>withEvictionHard(evictionHard)\n</code></pre> <p>\"EvictionHard is the map of signal names to quantities that define hard eviction thresholds\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithevictionhardmixin","title":"fn spec.kubeletConfiguration.withEvictionHardMixin","text":"<pre><code>withEvictionHardMixin(evictionHard)\n</code></pre> <p>\"EvictionHard is the map of signal names to quantities that define hard eviction thresholds\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithevictionmaxpodgraceperiod","title":"fn spec.kubeletConfiguration.withEvictionMaxPodGracePeriod","text":"<pre><code>withEvictionMaxPodGracePeriod(evictionMaxPodGracePeriod)\n</code></pre> <p>\"EvictionMaxPodGracePeriod is the maximum allowed grace period (in seconds) to use when terminating pods in response to soft eviction thresholds being met.\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithevictionsoft","title":"fn spec.kubeletConfiguration.withEvictionSoft","text":"<pre><code>withEvictionSoft(evictionSoft)\n</code></pre> <p>\"EvictionSoft is the map of signal names to quantities that define soft eviction thresholds\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithevictionsoftgraceperiod","title":"fn spec.kubeletConfiguration.withEvictionSoftGracePeriod","text":"<pre><code>withEvictionSoftGracePeriod(evictionSoftGracePeriod)\n</code></pre> <p>\"EvictionSoftGracePeriod is the map of signal names to quantities that define grace periods for each eviction signal\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithevictionsoftgraceperiodmixin","title":"fn spec.kubeletConfiguration.withEvictionSoftGracePeriodMixin","text":"<pre><code>withEvictionSoftGracePeriodMixin(evictionSoftGracePeriod)\n</code></pre> <p>\"EvictionSoftGracePeriod is the map of signal names to quantities that define grace periods for each eviction signal\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithevictionsoftmixin","title":"fn spec.kubeletConfiguration.withEvictionSoftMixin","text":"<pre><code>withEvictionSoftMixin(evictionSoft)\n</code></pre> <p>\"EvictionSoft is the map of signal names to quantities that define soft eviction thresholds\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithimagegchighthresholdpercent","title":"fn spec.kubeletConfiguration.withImageGCHighThresholdPercent","text":"<pre><code>withImageGCHighThresholdPercent(imageGCHighThresholdPercent)\n</code></pre> <p>\"ImageGCHighThresholdPercent is the percent of disk usage after which image garbage collection is always run. The percent is calculated by dividing this field value by 100, so this field must be between 0 and 100, inclusive. When specified, the value must be greater than ImageGCLowThresholdPercent.\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithimagegclowthresholdpercent","title":"fn spec.kubeletConfiguration.withImageGCLowThresholdPercent","text":"<pre><code>withImageGCLowThresholdPercent(imageGCLowThresholdPercent)\n</code></pre> <p>\"ImageGCLowThresholdPercent is the percent of disk usage before which image garbage collection is never run. Lowest disk usage to garbage collect to. The percent is calculated by dividing this field value by 100, so the field value must be between 0 and 100, inclusive. When specified, the value must be less than imageGCHighThresholdPercent\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithkubereserved","title":"fn spec.kubeletConfiguration.withKubeReserved","text":"<pre><code>withKubeReserved(kubeReserved)\n</code></pre> <p>\"KubeReserved contains resources reserved for Kubernetes system components.\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithkubereservedmixin","title":"fn spec.kubeletConfiguration.withKubeReservedMixin","text":"<pre><code>withKubeReservedMixin(kubeReserved)\n</code></pre> <p>\"KubeReserved contains resources reserved for Kubernetes system components.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithmaxpods","title":"fn spec.kubeletConfiguration.withMaxPods","text":"<pre><code>withMaxPods(maxPods)\n</code></pre> <p>\"MaxPods is an override for the maximum number of pods that can run on a worker node instance.\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithpodspercore","title":"fn spec.kubeletConfiguration.withPodsPerCore","text":"<pre><code>withPodsPerCore(podsPerCore)\n</code></pre> <p>\"PodsPerCore is an override for the number of pods that can run on a worker node instance based on the number of cpu cores. This value cannot exceed MaxPods, so, if MaxPods is a lower value, that value will be used.\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithsystemreserved","title":"fn spec.kubeletConfiguration.withSystemReserved","text":"<pre><code>withSystemReserved(systemReserved)\n</code></pre> <p>\"SystemReserved contains resources reserved for OS system daemons and kernel memory.\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithsystemreservedmixin","title":"fn spec.kubeletConfiguration.withSystemReservedMixin","text":"<pre><code>withSystemReservedMixin(systemReserved)\n</code></pre> <p>\"SystemReserved contains resources reserved for OS system daemons and kernel memory.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#obj-speclimits","title":"obj spec.limits","text":"<p>\"Limits define a set of bounds for provisioning capacity.\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-speclimitswithresources","title":"fn spec.limits.withResources","text":"<pre><code>withResources(resources)\n</code></pre> <p>\"Resources contains all the allocatable resources that Karpenter supports for limiting.\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-speclimitswithresourcesmixin","title":"fn spec.limits.withResourcesMixin","text":"<pre><code>withResourcesMixin(resources)\n</code></pre> <p>\"Resources contains all the allocatable resources that Karpenter supports for limiting.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#obj-specproviderref","title":"obj spec.providerRef","text":"<p>\"ProviderRef is a reference to a dedicated CRD for the chosen provider, that holds additional configuration options\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-specproviderrefwithapiversion","title":"fn spec.providerRef.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"API version of the referent\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-specproviderrefwithkind","title":"fn spec.providerRef.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\\</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-specproviderrefwithname","title":"fn spec.providerRef.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#obj-specrequirements","title":"obj spec.requirements","text":"<p>\"Requirements are layered with Labels and applied to every node.\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-specrequirementswithkey","title":"fn spec.requirements.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"The label key that the selector applies to.\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-specrequirementswithoperator","title":"fn spec.requirements.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-specrequirementswithvalues","title":"fn spec.requirements.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-specrequirementswithvaluesmixin","title":"fn spec.requirements.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#obj-specstartuptaints","title":"obj spec.startupTaints","text":"<p>\"StartupTaints are taints that are applied to nodes upon startup which are expected to be removed automatically within a short period of time, typically by a DaemonSet that tolerates the taint. These are commonly used by daemonsets to allow initialization and enforce startup ordering.  StartupTaints are ignored for provisioning purposes in that pods are not required to tolerate a StartupTaint in order to have nodes provisioned for them.\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-specstartuptaintswitheffect","title":"fn spec.startupTaints.withEffect","text":"<pre><code>withEffect(effect)\n</code></pre> <p>\"Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-specstartuptaintswithkey","title":"fn spec.startupTaints.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Required. The taint key to be applied to a node.\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-specstartuptaintswithtimeadded","title":"fn spec.startupTaints.withTimeAdded","text":"<pre><code>withTimeAdded(timeAdded)\n</code></pre> <p>\"TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-specstartuptaintswithvalue","title":"fn spec.startupTaints.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"The taint value corresponding to the taint key.\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#obj-spectaints","title":"obj spec.taints","text":"<p>\"Taints will be applied to every node launched by the Provisioner. If specified, the provisioner will not provision nodes for pods that do not have matching tolerations. Additional taints will be created that match pod tolerations on a per-node basis.\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-spectaintswitheffect","title":"fn spec.taints.withEffect","text":"<pre><code>withEffect(effect)\n</code></pre> <p>\"Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-spectaintswithkey","title":"fn spec.taints.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Required. The taint key to be applied to a node.\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-spectaintswithtimeadded","title":"fn spec.taints.withTimeAdded","text":"<pre><code>withTimeAdded(timeAdded)\n</code></pre> <p>\"TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.\"</p>"},{"location":"0.27/sh/karpenter/v1alpha5/provisioner/#fn-spectaintswithvalue","title":"fn spec.taints.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"The taint value corresponding to the taint key.\"</p>"},{"location":"0.31/aws/","title":"karpenter","text":"<pre><code>local karpenter = import \"github.com/jsonnet-libs/karpenter-libsonnet/0.31/aws/main.libsonnet\"\n</code></pre> <ul> <li>karpenter</li> </ul>"},{"location":"0.31/aws/karpenter/","title":"karpenter","text":"<ul> <li>v1alpha1</li> <li>v1beta1</li> </ul>"},{"location":"0.31/aws/karpenter/v1alpha1/","title":"karpenter.v1alpha1","text":"<ul> <li>awsNodeTemplate</li> </ul>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/","title":"karpenter.v1alpha1.awsNodeTemplate","text":"<p>\"AWSNodeTemplate is the Schema for the AWSNodeTemplate API\"</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withAmiFamily(amiFamily)</code></li> <li><code>fn withAmiSelector(amiSelector)</code></li> <li><code>fn withAmiSelectorMixin(amiSelector)</code></li> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withBlockDeviceMappings(blockDeviceMappings)</code></li> <li><code>fn withBlockDeviceMappingsMixin(blockDeviceMappings)</code></li> <li><code>fn withContext(context)</code></li> <li><code>fn withDetailedMonitoring(detailedMonitoring)</code></li> <li><code>fn withInstanceProfile(instanceProfile)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withLaunchTemplate(launchTemplate)</code></li> <li><code>fn withSecurityGroupSelector(securityGroupSelector)</code></li> <li><code>fn withSecurityGroupSelectorMixin(securityGroupSelector)</code></li> <li><code>fn withSubnetSelector(subnetSelector)</code></li> <li><code>fn withSubnetSelectorMixin(subnetSelector)</code></li> <li><code>fn withTags(tags)</code></li> <li><code>fn withTagsMixin(tags)</code></li> <li><code>fn withUserData(userData)</code></li> <li><code>obj spec.blockDeviceMappings</code><ul> <li><code>fn withDeviceName(deviceName)</code></li> <li><code>obj spec.blockDeviceMappings.ebs</code><ul> <li><code>fn withDeleteOnTermination(deleteOnTermination)</code></li> <li><code>fn withEncrypted(encrypted)</code></li> <li><code>fn withIops(iops)</code></li> <li><code>fn withKmsKeyID(kmsKeyID)</code></li> <li><code>fn withSnapshotID(snapshotID)</code></li> <li><code>fn withThroughput(throughput)</code></li> <li><code>fn withVolumeSize(volumeSize)</code></li> <li><code>fn withVolumeType(volumeType)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.metadataOptions</code><ul> <li><code>fn withHttpEndpoint(httpEndpoint)</code></li> <li><code>fn withHttpProtocolIPv6(httpProtocolIPv6)</code></li> <li><code>fn withHttpPutResponseHopLimit(httpPutResponseHopLimit)</code></li> <li><code>fn withHttpTokens(httpTokens)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fields","title":"Fields","text":""},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of AWSNodeTemplate</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#obj-spec","title":"obj spec","text":"<p>\"AWSNodeTemplateSpec is the top level specification for the AWS Karpenter Provider. This will contain configuration necessary to launch instances in AWS.\"</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithamifamily","title":"fn spec.withAmiFamily","text":"<pre><code>withAmiFamily(amiFamily)\n</code></pre> <p>\"AMIFamily is the AMI family that instances use.\"</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithamiselector","title":"fn spec.withAmiSelector","text":"<pre><code>withAmiSelector(amiSelector)\n</code></pre> <p>\"AMISelector discovers AMIs to be used by Amazon EC2 tags.\"</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithamiselectormixin","title":"fn spec.withAmiSelectorMixin","text":"<pre><code>withAmiSelectorMixin(amiSelector)\n</code></pre> <p>\"AMISelector discovers AMIs to be used by Amazon EC2 tags.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithapiversion","title":"fn spec.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\"</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithblockdevicemappings","title":"fn spec.withBlockDeviceMappings","text":"<pre><code>withBlockDeviceMappings(blockDeviceMappings)\n</code></pre> <p>\"BlockDeviceMappings to be applied to provisioned nodes.\"</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithblockdevicemappingsmixin","title":"fn spec.withBlockDeviceMappingsMixin","text":"<pre><code>withBlockDeviceMappingsMixin(blockDeviceMappings)\n</code></pre> <p>\"BlockDeviceMappings to be applied to provisioned nodes.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithcontext","title":"fn spec.withContext","text":"<pre><code>withContext(context)\n</code></pre> <p>\"Context is a Reserved field in EC2 APIs https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet.html\"</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithdetailedmonitoring","title":"fn spec.withDetailedMonitoring","text":"<pre><code>withDetailedMonitoring(detailedMonitoring)\n</code></pre> <p>\"DetailedMonitoring controls if detailed monitoring is enabled for instances that are launched\"</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithinstanceprofile","title":"fn spec.withInstanceProfile","text":"<pre><code>withInstanceProfile(instanceProfile)\n</code></pre> <p>\"InstanceProfile is the AWS identity that instances use.\"</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithkind","title":"fn spec.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\"</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithlaunchtemplate","title":"fn spec.withLaunchTemplate","text":"<pre><code>withLaunchTemplate(launchTemplate)\n</code></pre> <p>\"LaunchTemplateName for the node. If not specified, a launch template will be generated. NOTE: This field is for specifying a custom launch template and is exposed in the Spec as <code>launchTemplate</code> for backwards compatibility.\"</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithsecuritygroupselector","title":"fn spec.withSecurityGroupSelector","text":"<pre><code>withSecurityGroupSelector(securityGroupSelector)\n</code></pre> <p>\"SecurityGroups specify the names of the security groups.\"</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithsecuritygroupselectormixin","title":"fn spec.withSecurityGroupSelectorMixin","text":"<pre><code>withSecurityGroupSelectorMixin(securityGroupSelector)\n</code></pre> <p>\"SecurityGroups specify the names of the security groups.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithsubnetselector","title":"fn spec.withSubnetSelector","text":"<pre><code>withSubnetSelector(subnetSelector)\n</code></pre> <p>\"SubnetSelector discovers subnets by tags. A value of \\\"\\\" is a wildcard.\"</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithsubnetselectormixin","title":"fn spec.withSubnetSelectorMixin","text":"<pre><code>withSubnetSelectorMixin(subnetSelector)\n</code></pre> <p>\"SubnetSelector discovers subnets by tags. A value of \\\"\\\" is a wildcard.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithtags","title":"fn spec.withTags","text":"<pre><code>withTags(tags)\n</code></pre> <p>\"Tags to be applied on ec2 resources like instances and launch templates.\"</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithtagsmixin","title":"fn spec.withTagsMixin","text":"<pre><code>withTagsMixin(tags)\n</code></pre> <p>\"Tags to be applied on ec2 resources like instances and launch templates.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithuserdata","title":"fn spec.withUserData","text":"<pre><code>withUserData(userData)\n</code></pre> <p>\"UserData to be applied to the provisioned nodes. It must be in the appropriate format based on the AMIFamily in use. Karpenter will merge certain fields into this UserData to ensure nodes are being provisioned with the correct configuration.\"</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#obj-specblockdevicemappings","title":"obj spec.blockDeviceMappings","text":"<p>\"BlockDeviceMappings to be applied to provisioned nodes.\"</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specblockdevicemappingswithdevicename","title":"fn spec.blockDeviceMappings.withDeviceName","text":"<pre><code>withDeviceName(deviceName)\n</code></pre> <p>\"The device name (for example, /dev/sdh or xvdh).\"</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#obj-specblockdevicemappingsebs","title":"obj spec.blockDeviceMappings.ebs","text":"<p>\"EBS contains parameters used to automatically set up EBS volumes when an instance is launched.\"</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specblockdevicemappingsebswithdeleteontermination","title":"fn spec.blockDeviceMappings.ebs.withDeleteOnTermination","text":"<pre><code>withDeleteOnTermination(deleteOnTermination)\n</code></pre> <p>\"DeleteOnTermination indicates whether the EBS volume is deleted on instance termination.\"</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specblockdevicemappingsebswithencrypted","title":"fn spec.blockDeviceMappings.ebs.withEncrypted","text":"<pre><code>withEncrypted(encrypted)\n</code></pre> <p>\"Encrypted indicates whether the EBS volume is encrypted. Encrypted volumes can only be attached to instances that support Amazon EBS encryption. If you are creating a volume from a snapshot, you can't specify an encryption value.\"</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specblockdevicemappingsebswithiops","title":"fn spec.blockDeviceMappings.ebs.withIops","text":"<pre><code>withIops(iops)\n</code></pre> <p>\"IOPS is the number of I/O operations per second (IOPS). For gp3, io1, and io2 volumes, this represents the number of IOPS that are provisioned for the volume. For gp2 volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. \\n The following are the supported values for each volume type: \\n * gp3: 3,000-16,000 IOPS \\n * io1: 100-64,000 IOPS \\n * io2: 100-64,000 IOPS \\n For io1 and io2 volumes, we guarantee 64,000 IOPS only for Instances built on the Nitro System (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances). Other instance families guarantee performance up to 32,000 IOPS. \\n This parameter is supported for io1, io2, and gp3 volumes only. This parameter is not supported for gp2, st1, sc1, or standard volumes.\"</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specblockdevicemappingsebswithkmskeyid","title":"fn spec.blockDeviceMappings.ebs.withKmsKeyID","text":"<pre><code>withKmsKeyID(kmsKeyID)\n</code></pre> <p>\"KMSKeyID (ARN) of the symmetric Key Management Service (KMS) CMK used for encryption.\"</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specblockdevicemappingsebswithsnapshotid","title":"fn spec.blockDeviceMappings.ebs.withSnapshotID","text":"<pre><code>withSnapshotID(snapshotID)\n</code></pre> <p>\"SnapshotID is the ID of an EBS snapshot\"</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specblockdevicemappingsebswiththroughput","title":"fn spec.blockDeviceMappings.ebs.withThroughput","text":"<pre><code>withThroughput(throughput)\n</code></pre> <p>\"Throughput to provision for a gp3 volume, with a maximum of 1,000 MiB/s. Valid Range: Minimum value of 125. Maximum value of 1000.\"</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specblockdevicemappingsebswithvolumesize","title":"fn spec.blockDeviceMappings.ebs.withVolumeSize","text":"<pre><code>withVolumeSize(volumeSize)\n</code></pre> <p>\"VolumeSize in GiBs. You must specify either a snapshot ID or a volume size. The following are the supported volumes sizes for each volume type: \\n * gp2 and gp3: 1-16,384 \\n * io1 and io2: 4-16,384 \\n * st1 and sc1: 125-16,384 \\n * standard: 1-1,024\"</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specblockdevicemappingsebswithvolumetype","title":"fn spec.blockDeviceMappings.ebs.withVolumeType","text":"<pre><code>withVolumeType(volumeType)\n</code></pre> <p>\"VolumeType of the block device. For more information, see Amazon EBS volume types (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html) in the Amazon Elastic Compute Cloud User Guide.\"</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#obj-specmetadataoptions","title":"obj spec.metadataOptions","text":"<p>\"MetadataOptions for the generated launch template of provisioned nodes. \\n This specifies the exposure of the Instance Metadata Service to provisioned EC2 nodes. For more information, see Instance Metadata and User Data (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html) in the Amazon Elastic Compute Cloud User Guide. \\n Refer to recommended, security best practices (https://aws.github.io/aws-eks-best-practices/security/docs/iam/#restrict-access-to-the-instance-profile-assigned-to-the-worker-node) for limiting exposure of Instance Metadata and User Data to pods. If omitted, defaults to httpEndpoint enabled, with httpProtocolIPv6 disabled, with httpPutResponseLimit of 2, and with httpTokens required.\"</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specmetadataoptionswithhttpendpoint","title":"fn spec.metadataOptions.withHttpEndpoint","text":"<pre><code>withHttpEndpoint(httpEndpoint)\n</code></pre> <p>\"HTTPEndpoint enables or disables the HTTP metadata endpoint on provisioned nodes. If metadata options is non-nil, but this parameter is not specified, the default state is \\\"enabled\\\". \\n If you specify a value of \\\"disabled\\\", instance metadata will not be accessible on the node.\"</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specmetadataoptionswithhttpprotocolipv6","title":"fn spec.metadataOptions.withHttpProtocolIPv6","text":"<pre><code>withHttpProtocolIPv6(httpProtocolIPv6)\n</code></pre> <p>\"HTTPProtocolIPv6 enables or disables the IPv6 endpoint for the instance metadata service on provisioned nodes. If metadata options is non-nil, but this parameter is not specified, the default state is \\\"disabled\\\".\"</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specmetadataoptionswithhttpputresponsehoplimit","title":"fn spec.metadataOptions.withHttpPutResponseHopLimit","text":"<pre><code>withHttpPutResponseHopLimit(httpPutResponseHopLimit)\n</code></pre> <p>\"HTTPPutResponseHopLimit is the desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. Possible values are integers from 1 to 64. If metadata options is non-nil, but this parameter is not specified, the default value is 1.\"</p>"},{"location":"0.31/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specmetadataoptionswithhttptokens","title":"fn spec.metadataOptions.withHttpTokens","text":"<pre><code>withHttpTokens(httpTokens)\n</code></pre> <p>\"HTTPTokens determines the state of token usage for instance metadata requests. If metadata options is non-nil, but this parameter is not specified, the default state is \\\"optional\\\". \\n If the state is optional, one can choose to retrieve instance metadata with or without a signed token header on the request. If one retrieves the IAM role credentials without a token, the version 1.0 role credentials are returned. If one retrieves the IAM role credentials using a valid signed token, the version 2.0 role credentials are returned. \\n If the state is \\\"required\\\", one must send a signed token header with any instance metadata retrieval requests. In this state, retrieving the IAM role credentials always returns the version 2.0 credentials; the version 1.0 credentials are not available.\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/","title":"karpenter.v1beta1","text":"<ul> <li>ec2NodeClass</li> </ul>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/","title":"karpenter.v1beta1.ec2NodeClass","text":"<p>\"EC2NodeClass is the Schema for the EC2NodeClass API\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withAmiFamily(amiFamily)</code></li> <li><code>fn withAmiSelectorTerms(amiSelectorTerms)</code></li> <li><code>fn withAmiSelectorTermsMixin(amiSelectorTerms)</code></li> <li><code>fn withBlockDeviceMappings(blockDeviceMappings)</code></li> <li><code>fn withBlockDeviceMappingsMixin(blockDeviceMappings)</code></li> <li><code>fn withContext(context)</code></li> <li><code>fn withDetailedMonitoring(detailedMonitoring)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withSecurityGroupSelectorTerms(securityGroupSelectorTerms)</code></li> <li><code>fn withSecurityGroupSelectorTermsMixin(securityGroupSelectorTerms)</code></li> <li><code>fn withSubnetSelectorTerms(subnetSelectorTerms)</code></li> <li><code>fn withSubnetSelectorTermsMixin(subnetSelectorTerms)</code></li> <li><code>fn withTags(tags)</code></li> <li><code>fn withTagsMixin(tags)</code></li> <li><code>fn withUserData(userData)</code></li> <li><code>obj spec.amiSelectorTerms</code><ul> <li><code>fn withId(id)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withOwner(owner)</code></li> <li><code>fn withTags(tags)</code></li> <li><code>fn withTagsMixin(tags)</code></li> </ul> </li> <li><code>obj spec.blockDeviceMappings</code><ul> <li><code>fn withDeviceName(deviceName)</code></li> <li><code>fn withRootVolume(rootVolume)</code></li> <li><code>obj spec.blockDeviceMappings.ebs</code><ul> <li><code>fn withDeleteOnTermination(deleteOnTermination)</code></li> <li><code>fn withEncrypted(encrypted)</code></li> <li><code>fn withIops(iops)</code></li> <li><code>fn withKmsKeyID(kmsKeyID)</code></li> <li><code>fn withSnapshotID(snapshotID)</code></li> <li><code>fn withThroughput(throughput)</code></li> <li><code>fn withVolumeSize(volumeSize)</code></li> <li><code>fn withVolumeType(volumeType)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.metadataOptions</code><ul> <li><code>fn withHttpEndpoint(httpEndpoint)</code></li> <li><code>fn withHttpProtocolIPv6(httpProtocolIPv6)</code></li> <li><code>fn withHttpPutResponseHopLimit(httpPutResponseHopLimit)</code></li> <li><code>fn withHttpTokens(httpTokens)</code></li> </ul> </li> <li><code>obj spec.securityGroupSelectorTerms</code><ul> <li><code>fn withId(id)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withTags(tags)</code></li> <li><code>fn withTagsMixin(tags)</code></li> </ul> </li> <li><code>obj spec.subnetSelectorTerms</code><ul> <li><code>fn withId(id)</code></li> <li><code>fn withTags(tags)</code></li> <li><code>fn withTagsMixin(tags)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fields","title":"Fields","text":""},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of EC2NodeClass</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#obj-spec","title":"obj spec","text":"<p>\"EC2NodeClassSpec is the top level specification for the AWS Karpenter Provider. This will contain configuration necessary to launch instances in AWS.\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithamifamily","title":"fn spec.withAmiFamily","text":"<pre><code>withAmiFamily(amiFamily)\n</code></pre> <p>\"AMIFamily is the AMI family that instances use.\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithamiselectorterms","title":"fn spec.withAmiSelectorTerms","text":"<pre><code>withAmiSelectorTerms(amiSelectorTerms)\n</code></pre> <p>\"AMISelectorTerms is a list of or ami selector terms. The terms are ORed.\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithamiselectortermsmixin","title":"fn spec.withAmiSelectorTermsMixin","text":"<pre><code>withAmiSelectorTermsMixin(amiSelectorTerms)\n</code></pre> <p>\"AMISelectorTerms is a list of or ami selector terms. The terms are ORed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithblockdevicemappings","title":"fn spec.withBlockDeviceMappings","text":"<pre><code>withBlockDeviceMappings(blockDeviceMappings)\n</code></pre> <p>\"BlockDeviceMappings to be applied to provisioned nodes.\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithblockdevicemappingsmixin","title":"fn spec.withBlockDeviceMappingsMixin","text":"<pre><code>withBlockDeviceMappingsMixin(blockDeviceMappings)\n</code></pre> <p>\"BlockDeviceMappings to be applied to provisioned nodes.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithcontext","title":"fn spec.withContext","text":"<pre><code>withContext(context)\n</code></pre> <p>\"Context is a Reserved field in EC2 APIs https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet.html\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithdetailedmonitoring","title":"fn spec.withDetailedMonitoring","text":"<pre><code>withDetailedMonitoring(detailedMonitoring)\n</code></pre> <p>\"DetailedMonitoring controls if detailed monitoring is enabled for instances that are launched\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithrole","title":"fn spec.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role is the AWS identity that nodes use. This field is immutable. Marking this field as immutable avoids concerns around terminating managed instance profiles from running instances. This field may be made mutable in the future, assuming the correct garbage collection and drift handling is implemented for the old instance profiles on an update.\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithsecuritygroupselectorterms","title":"fn spec.withSecurityGroupSelectorTerms","text":"<pre><code>withSecurityGroupSelectorTerms(securityGroupSelectorTerms)\n</code></pre> <p>\"SecurityGroupSelectorTerms is a list of or security group selector terms. The terms are ORed.\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithsecuritygroupselectortermsmixin","title":"fn spec.withSecurityGroupSelectorTermsMixin","text":"<pre><code>withSecurityGroupSelectorTermsMixin(securityGroupSelectorTerms)\n</code></pre> <p>\"SecurityGroupSelectorTerms is a list of or security group selector terms. The terms are ORed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithsubnetselectorterms","title":"fn spec.withSubnetSelectorTerms","text":"<pre><code>withSubnetSelectorTerms(subnetSelectorTerms)\n</code></pre> <p>\"SubnetSelectorTerms is a list of or subnet selector terms. The terms are ORed.\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithsubnetselectortermsmixin","title":"fn spec.withSubnetSelectorTermsMixin","text":"<pre><code>withSubnetSelectorTermsMixin(subnetSelectorTerms)\n</code></pre> <p>\"SubnetSelectorTerms is a list of or subnet selector terms. The terms are ORed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithtags","title":"fn spec.withTags","text":"<pre><code>withTags(tags)\n</code></pre> <p>\"Tags to be applied on ec2 resources like instances and launch templates.\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithtagsmixin","title":"fn spec.withTagsMixin","text":"<pre><code>withTagsMixin(tags)\n</code></pre> <p>\"Tags to be applied on ec2 resources like instances and launch templates.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithuserdata","title":"fn spec.withUserData","text":"<pre><code>withUserData(userData)\n</code></pre> <p>\"UserData to be applied to the provisioned nodes. It must be in the appropriate format based on the AMIFamily in use. Karpenter will merge certain fields into this UserData to ensure nodes are being provisioned with the correct configuration.\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#obj-specamiselectorterms","title":"obj spec.amiSelectorTerms","text":"<p>\"AMISelectorTerms is a list of or ami selector terms. The terms are ORed.\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-specamiselectortermswithid","title":"fn spec.amiSelectorTerms.withId","text":"<pre><code>withId(id)\n</code></pre> <p>\"ID is the ami id in EC2\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-specamiselectortermswithname","title":"fn spec.amiSelectorTerms.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the ami name in EC2. This value is the name field, which is different from the name tag.\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-specamiselectortermswithowner","title":"fn spec.amiSelectorTerms.withOwner","text":"<pre><code>withOwner(owner)\n</code></pre> <p>\"Owner is the owner for the ami. You can specify a combination of AWS account IDs, \\\"self\\\", \\\"amazon\\\", and \\\"aws-marketplace\\</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-specamiselectortermswithtags","title":"fn spec.amiSelectorTerms.withTags","text":"<pre><code>withTags(tags)\n</code></pre> <p>\"Tags is a map of key/value tags used to select subnets Specifying '*' for a value selects all values for a given tag key.\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-specamiselectortermswithtagsmixin","title":"fn spec.amiSelectorTerms.withTagsMixin","text":"<pre><code>withTagsMixin(tags)\n</code></pre> <p>\"Tags is a map of key/value tags used to select subnets Specifying '*' for a value selects all values for a given tag key.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#obj-specblockdevicemappings","title":"obj spec.blockDeviceMappings","text":"<p>\"BlockDeviceMappings to be applied to provisioned nodes.\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingswithdevicename","title":"fn spec.blockDeviceMappings.withDeviceName","text":"<pre><code>withDeviceName(deviceName)\n</code></pre> <p>\"The device name (for example, /dev/sdh or xvdh).\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingswithrootvolume","title":"fn spec.blockDeviceMappings.withRootVolume","text":"<pre><code>withRootVolume(rootVolume)\n</code></pre> <p>\"RootVolume is a flag indicating if this device is mounted as kubelet root dir. You can configure at most one root volume in BlockDeviceMappings.\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#obj-specblockdevicemappingsebs","title":"obj spec.blockDeviceMappings.ebs","text":"<p>\"EBS contains parameters used to automatically set up EBS volumes when an instance is launched.\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingsebswithdeleteontermination","title":"fn spec.blockDeviceMappings.ebs.withDeleteOnTermination","text":"<pre><code>withDeleteOnTermination(deleteOnTermination)\n</code></pre> <p>\"DeleteOnTermination indicates whether the EBS volume is deleted on instance termination.\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingsebswithencrypted","title":"fn spec.blockDeviceMappings.ebs.withEncrypted","text":"<pre><code>withEncrypted(encrypted)\n</code></pre> <p>\"Encrypted indicates whether the EBS volume is encrypted. Encrypted volumes can only be attached to instances that support Amazon EBS encryption. If you are creating a volume from a snapshot, you can't specify an encryption value.\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingsebswithiops","title":"fn spec.blockDeviceMappings.ebs.withIops","text":"<pre><code>withIops(iops)\n</code></pre> <p>\"IOPS is the number of I/O operations per second (IOPS). For gp3, io1, and io2 volumes, this represents the number of IOPS that are provisioned for the volume. For gp2 volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. \\n The following are the supported values for each volume type: \\n * gp3: 3,000-16,000 IOPS \\n * io1: 100-64,000 IOPS \\n * io2: 100-64,000 IOPS \\n For io1 and io2 volumes, we guarantee 64,000 IOPS only for Instances built on the Nitro System (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances). Other instance families guarantee performance up to 32,000 IOPS. \\n This parameter is supported for io1, io2, and gp3 volumes only. This parameter is not supported for gp2, st1, sc1, or standard volumes.\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingsebswithkmskeyid","title":"fn spec.blockDeviceMappings.ebs.withKmsKeyID","text":"<pre><code>withKmsKeyID(kmsKeyID)\n</code></pre> <p>\"KMSKeyID (ARN) of the symmetric Key Management Service (KMS) CMK used for encryption.\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingsebswithsnapshotid","title":"fn spec.blockDeviceMappings.ebs.withSnapshotID","text":"<pre><code>withSnapshotID(snapshotID)\n</code></pre> <p>\"SnapshotID is the ID of an EBS snapshot\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingsebswiththroughput","title":"fn spec.blockDeviceMappings.ebs.withThroughput","text":"<pre><code>withThroughput(throughput)\n</code></pre> <p>\"Throughput to provision for a gp3 volume, with a maximum of 1,000 MiB/s. Valid Range: Minimum value of 125. Maximum value of 1000.\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingsebswithvolumesize","title":"fn spec.blockDeviceMappings.ebs.withVolumeSize","text":"<pre><code>withVolumeSize(volumeSize)\n</code></pre> <p>\"VolumeSize in GiBs. You must specify either a snapshot ID or a volume size. The following are the supported volumes sizes for each volume type: \\n * gp2 and gp3: 1-16,384 \\n * io1 and io2: 4-16,384 \\n * st1 and sc1: 125-16,384 \\n * standard: 1-1,024\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingsebswithvolumetype","title":"fn spec.blockDeviceMappings.ebs.withVolumeType","text":"<pre><code>withVolumeType(volumeType)\n</code></pre> <p>\"VolumeType of the block device. For more information, see Amazon EBS volume types (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html) in the Amazon Elastic Compute Cloud User Guide.\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#obj-specmetadataoptions","title":"obj spec.metadataOptions","text":"<p>\"MetadataOptions for the generated launch template of provisioned nodes. \\n This specifies the exposure of the Instance Metadata Service to provisioned EC2 nodes. For more information, see Instance Metadata and User Data (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html) in the Amazon Elastic Compute Cloud User Guide. \\n Refer to recommended, security best practices (https://aws.github.io/aws-eks-best-practices/security/docs/iam/#restrict-access-to-the-instance-profile-assigned-to-the-worker-node) for limiting exposure of Instance Metadata and User Data to pods. If omitted, defaults to httpEndpoint enabled, with httpProtocolIPv6 disabled, with httpPutResponseLimit of 2, and with httpTokens required.\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-specmetadataoptionswithhttpendpoint","title":"fn spec.metadataOptions.withHttpEndpoint","text":"<pre><code>withHttpEndpoint(httpEndpoint)\n</code></pre> <p>\"HTTPEndpoint enables or disables the HTTP metadata endpoint on provisioned nodes. If metadata options is non-nil, but this parameter is not specified, the default state is \\\"enabled\\\". \\n If you specify a value of \\\"disabled\\\", instance metadata will not be accessible on the node.\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-specmetadataoptionswithhttpprotocolipv6","title":"fn spec.metadataOptions.withHttpProtocolIPv6","text":"<pre><code>withHttpProtocolIPv6(httpProtocolIPv6)\n</code></pre> <p>\"HTTPProtocolIPv6 enables or disables the IPv6 endpoint for the instance metadata service on provisioned nodes. If metadata options is non-nil, but this parameter is not specified, the default state is \\\"disabled\\\".\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-specmetadataoptionswithhttpputresponsehoplimit","title":"fn spec.metadataOptions.withHttpPutResponseHopLimit","text":"<pre><code>withHttpPutResponseHopLimit(httpPutResponseHopLimit)\n</code></pre> <p>\"HTTPPutResponseHopLimit is the desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. Possible values are integers from 1 to 64. If metadata options is non-nil, but this parameter is not specified, the default value is 2.\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-specmetadataoptionswithhttptokens","title":"fn spec.metadataOptions.withHttpTokens","text":"<pre><code>withHttpTokens(httpTokens)\n</code></pre> <p>\"HTTPTokens determines the state of token usage for instance metadata requests. If metadata options is non-nil, but this parameter is not specified, the default state is \\\"required\\\". \\n If the state is optional, one can choose to retrieve instance metadata with or without a signed token header on the request. If one retrieves the IAM role credentials without a token, the version 1.0 role credentials are returned. If one retrieves the IAM role credentials using a valid signed token, the version 2.0 role credentials are returned. \\n If the state is \\\"required\\\", one must send a signed token header with any instance metadata retrieval requests. In this state, retrieving the IAM role credentials always returns the version 2.0 credentials; the version 1.0 credentials are not available.\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#obj-specsecuritygroupselectorterms","title":"obj spec.securityGroupSelectorTerms","text":"<p>\"SecurityGroupSelectorTerms is a list of or security group selector terms. The terms are ORed.\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-specsecuritygroupselectortermswithid","title":"fn spec.securityGroupSelectorTerms.withId","text":"<pre><code>withId(id)\n</code></pre> <p>\"ID is the security group id in EC2\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-specsecuritygroupselectortermswithname","title":"fn spec.securityGroupSelectorTerms.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the security group name in EC2. This value is the name field, which is different from the name tag.\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-specsecuritygroupselectortermswithtags","title":"fn spec.securityGroupSelectorTerms.withTags","text":"<pre><code>withTags(tags)\n</code></pre> <p>\"Tags is a map of key/value tags used to select subnets Specifying '*' for a value selects all values for a given tag key.\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-specsecuritygroupselectortermswithtagsmixin","title":"fn spec.securityGroupSelectorTerms.withTagsMixin","text":"<pre><code>withTagsMixin(tags)\n</code></pre> <p>\"Tags is a map of key/value tags used to select subnets Specifying '*' for a value selects all values for a given tag key.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#obj-specsubnetselectorterms","title":"obj spec.subnetSelectorTerms","text":"<p>\"SubnetSelectorTerms is a list of or subnet selector terms. The terms are ORed.\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-specsubnetselectortermswithid","title":"fn spec.subnetSelectorTerms.withId","text":"<pre><code>withId(id)\n</code></pre> <p>\"ID is the subnet id in EC2\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-specsubnetselectortermswithtags","title":"fn spec.subnetSelectorTerms.withTags","text":"<pre><code>withTags(tags)\n</code></pre> <p>\"Tags is a map of key/value tags used to select subnets Specifying '*' for a value selects all values for a given tag key.\"</p>"},{"location":"0.31/aws/karpenter/v1beta1/ec2NodeClass/#fn-specsubnetselectortermswithtagsmixin","title":"fn spec.subnetSelectorTerms.withTagsMixin","text":"<pre><code>withTagsMixin(tags)\n</code></pre> <p>\"Tags is a map of key/value tags used to select subnets Specifying '*' for a value selects all values for a given tag key.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/","title":"karpenter","text":"<pre><code>local karpenter = import \"github.com/jsonnet-libs/karpenter-libsonnet/0.31/sh/main.libsonnet\"\n</code></pre> <ul> <li>karpenter</li> </ul>"},{"location":"0.31/sh/karpenter/","title":"karpenter","text":"<ul> <li>v1alpha5</li> <li>v1beta1</li> </ul>"},{"location":"0.31/sh/karpenter/v1alpha5/","title":"karpenter.v1alpha5","text":"<ul> <li>provisioner</li> </ul>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/","title":"karpenter.v1alpha5.provisioner","text":"<p>\"Provisioner is the Schema for the Provisioners API\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withProvider(provider)</code></li> <li><code>fn withProviderMixin(provider)</code></li> <li><code>fn withRequirements(requirements)</code></li> <li><code>fn withRequirementsMixin(requirements)</code></li> <li><code>fn withStartupTaints(startupTaints)</code></li> <li><code>fn withStartupTaintsMixin(startupTaints)</code></li> <li><code>fn withTaints(taints)</code></li> <li><code>fn withTaintsMixin(taints)</code></li> <li><code>fn withTtlSecondsAfterEmpty(ttlSecondsAfterEmpty)</code></li> <li><code>fn withTtlSecondsUntilExpired(ttlSecondsUntilExpired)</code></li> <li><code>fn withWeight(weight)</code></li> <li><code>obj spec.consolidation</code><ul> <li><code>fn withEnabled(enabled)</code></li> </ul> </li> <li><code>obj spec.kubeletConfiguration</code><ul> <li><code>fn withClusterDNS(clusterDNS)</code></li> <li><code>fn withClusterDNSMixin(clusterDNS)</code></li> <li><code>fn withContainerRuntime(containerRuntime)</code></li> <li><code>fn withCpuCFSQuota(cpuCFSQuota)</code></li> <li><code>fn withEvictionHard(evictionHard)</code></li> <li><code>fn withEvictionHardMixin(evictionHard)</code></li> <li><code>fn withEvictionMaxPodGracePeriod(evictionMaxPodGracePeriod)</code></li> <li><code>fn withEvictionSoft(evictionSoft)</code></li> <li><code>fn withEvictionSoftGracePeriod(evictionSoftGracePeriod)</code></li> <li><code>fn withEvictionSoftGracePeriodMixin(evictionSoftGracePeriod)</code></li> <li><code>fn withEvictionSoftMixin(evictionSoft)</code></li> <li><code>fn withImageGCHighThresholdPercent(imageGCHighThresholdPercent)</code></li> <li><code>fn withImageGCLowThresholdPercent(imageGCLowThresholdPercent)</code></li> <li><code>fn withKubeReserved(kubeReserved)</code></li> <li><code>fn withKubeReservedMixin(kubeReserved)</code></li> <li><code>fn withMaxPods(maxPods)</code></li> <li><code>fn withPodsPerCore(podsPerCore)</code></li> <li><code>fn withSystemReserved(systemReserved)</code></li> <li><code>fn withSystemReservedMixin(systemReserved)</code></li> </ul> </li> <li><code>obj spec.limits</code><ul> <li><code>fn withResources(resources)</code></li> <li><code>fn withResourcesMixin(resources)</code></li> </ul> </li> <li><code>obj spec.providerRef</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.requirements</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> <li><code>obj spec.startupTaints</code><ul> <li><code>fn withEffect(effect)</code></li> <li><code>fn withKey(key)</code></li> <li><code>fn withTimeAdded(timeAdded)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.taints</code><ul> <li><code>fn withEffect(effect)</code></li> <li><code>fn withKey(key)</code></li> <li><code>fn withTimeAdded(timeAdded)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fields","title":"Fields","text":""},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of Provisioner</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#obj-spec","title":"obj spec","text":"<p>\"ProvisionerSpec is the top level provisioner specification. Provisioners launch nodes in response to pods that are unschedulable. A single provisioner is capable of managing a diverse set of nodes. Node properties are determined from a combination of provisioner and pod scheduling constraints.\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-specwithannotations","title":"fn spec.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations are applied to every node.\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-specwithannotationsmixin","title":"fn spec.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations are applied to every node.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-specwithlabels","title":"fn spec.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Labels are layered with Requirements and applied to every node.\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-specwithlabelsmixin","title":"fn spec.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Labels are layered with Requirements and applied to every node.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-specwithprovider","title":"fn spec.withProvider","text":"<pre><code>withProvider(provider)\n</code></pre> <p>\"Provider contains fields specific to your cloudprovider.\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-specwithprovidermixin","title":"fn spec.withProviderMixin","text":"<pre><code>withProviderMixin(provider)\n</code></pre> <p>\"Provider contains fields specific to your cloudprovider.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-specwithrequirements","title":"fn spec.withRequirements","text":"<pre><code>withRequirements(requirements)\n</code></pre> <p>\"Requirements are layered with Labels and applied to every node.\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-specwithrequirementsmixin","title":"fn spec.withRequirementsMixin","text":"<pre><code>withRequirementsMixin(requirements)\n</code></pre> <p>\"Requirements are layered with Labels and applied to every node.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-specwithstartuptaints","title":"fn spec.withStartupTaints","text":"<pre><code>withStartupTaints(startupTaints)\n</code></pre> <p>\"StartupTaints are taints that are applied to nodes upon startup which are expected to be removed automatically within a short period of time, typically by a DaemonSet that tolerates the taint. These are commonly used by daemonsets to allow initialization and enforce startup ordering.  StartupTaints are ignored for provisioning purposes in that pods are not required to tolerate a StartupTaint in order to have nodes provisioned for them.\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-specwithstartuptaintsmixin","title":"fn spec.withStartupTaintsMixin","text":"<pre><code>withStartupTaintsMixin(startupTaints)\n</code></pre> <p>\"StartupTaints are taints that are applied to nodes upon startup which are expected to be removed automatically within a short period of time, typically by a DaemonSet that tolerates the taint. These are commonly used by daemonsets to allow initialization and enforce startup ordering.  StartupTaints are ignored for provisioning purposes in that pods are not required to tolerate a StartupTaint in order to have nodes provisioned for them.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-specwithtaints","title":"fn spec.withTaints","text":"<pre><code>withTaints(taints)\n</code></pre> <p>\"Taints will be applied to every node launched by the Provisioner. If specified, the provisioner will not provision nodes for pods that do not have matching tolerations. Additional taints will be created that match pod tolerations on a per-node basis.\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-specwithtaintsmixin","title":"fn spec.withTaintsMixin","text":"<pre><code>withTaintsMixin(taints)\n</code></pre> <p>\"Taints will be applied to every node launched by the Provisioner. If specified, the provisioner will not provision nodes for pods that do not have matching tolerations. Additional taints will be created that match pod tolerations on a per-node basis.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-specwithttlsecondsafterempty","title":"fn spec.withTtlSecondsAfterEmpty","text":"<pre><code>withTtlSecondsAfterEmpty(ttlSecondsAfterEmpty)\n</code></pre> <p>\"TTLSecondsAfterEmpty is the number of seconds the controller will wait before attempting to delete a node, measured from when the node is detected to be empty. A Node is considered to be empty when it does not have pods scheduled to it, excluding daemonsets. \\n Termination due to no utilization is disabled if this field is not set.\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-specwithttlsecondsuntilexpired","title":"fn spec.withTtlSecondsUntilExpired","text":"<pre><code>withTtlSecondsUntilExpired(ttlSecondsUntilExpired)\n</code></pre> <p>\"TTLSecondsUntilExpired is the number of seconds the controller will wait before terminating a node, measured from when the node is created. This is useful to implement features like eventually consistent node upgrade, memory leak protection, and disruption testing. \\n Termination due to expiration is disabled if this field is not set.\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-specwithweight","title":"fn spec.withWeight","text":"<pre><code>withWeight(weight)\n</code></pre> <p>\"Weight is the priority given to the provisioner during scheduling. A higher numerical weight indicates that this provisioner will be ordered ahead of other provisioners with lower weights. A provisioner with no weight will be treated as if it is a provisioner with a weight of 0.\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#obj-specconsolidation","title":"obj spec.consolidation","text":"<p>\"Consolidation are the consolidation parameters\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-specconsolidationwithenabled","title":"fn spec.consolidation.withEnabled","text":"<pre><code>withEnabled(enabled)\n</code></pre> <p>\"Enabled enables consolidation if it has been set\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#obj-speckubeletconfiguration","title":"obj spec.kubeletConfiguration","text":"<p>\"KubeletConfiguration are options passed to the kubelet when provisioning nodes\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithclusterdns","title":"fn spec.kubeletConfiguration.withClusterDNS","text":"<pre><code>withClusterDNS(clusterDNS)\n</code></pre> <p>\"clusterDNS is a list of IP addresses for the cluster DNS server. Note that not all providers may use all addresses.\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithclusterdnsmixin","title":"fn spec.kubeletConfiguration.withClusterDNSMixin","text":"<pre><code>withClusterDNSMixin(clusterDNS)\n</code></pre> <p>\"clusterDNS is a list of IP addresses for the cluster DNS server. Note that not all providers may use all addresses.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithcontainerruntime","title":"fn spec.kubeletConfiguration.withContainerRuntime","text":"<pre><code>withContainerRuntime(containerRuntime)\n</code></pre> <p>\"ContainerRuntime is the container runtime to be used with your worker nodes.\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithcpucfsquota","title":"fn spec.kubeletConfiguration.withCpuCFSQuota","text":"<pre><code>withCpuCFSQuota(cpuCFSQuota)\n</code></pre> <p>\"CPUCFSQuota enables CPU CFS quota enforcement for containers that specify CPU limits.\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithevictionhard","title":"fn spec.kubeletConfiguration.withEvictionHard","text":"<pre><code>withEvictionHard(evictionHard)\n</code></pre> <p>\"EvictionHard is the map of signal names to quantities that define hard eviction thresholds\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithevictionhardmixin","title":"fn spec.kubeletConfiguration.withEvictionHardMixin","text":"<pre><code>withEvictionHardMixin(evictionHard)\n</code></pre> <p>\"EvictionHard is the map of signal names to quantities that define hard eviction thresholds\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithevictionmaxpodgraceperiod","title":"fn spec.kubeletConfiguration.withEvictionMaxPodGracePeriod","text":"<pre><code>withEvictionMaxPodGracePeriod(evictionMaxPodGracePeriod)\n</code></pre> <p>\"EvictionMaxPodGracePeriod is the maximum allowed grace period (in seconds) to use when terminating pods in response to soft eviction thresholds being met.\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithevictionsoft","title":"fn spec.kubeletConfiguration.withEvictionSoft","text":"<pre><code>withEvictionSoft(evictionSoft)\n</code></pre> <p>\"EvictionSoft is the map of signal names to quantities that define soft eviction thresholds\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithevictionsoftgraceperiod","title":"fn spec.kubeletConfiguration.withEvictionSoftGracePeriod","text":"<pre><code>withEvictionSoftGracePeriod(evictionSoftGracePeriod)\n</code></pre> <p>\"EvictionSoftGracePeriod is the map of signal names to quantities that define grace periods for each eviction signal\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithevictionsoftgraceperiodmixin","title":"fn spec.kubeletConfiguration.withEvictionSoftGracePeriodMixin","text":"<pre><code>withEvictionSoftGracePeriodMixin(evictionSoftGracePeriod)\n</code></pre> <p>\"EvictionSoftGracePeriod is the map of signal names to quantities that define grace periods for each eviction signal\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithevictionsoftmixin","title":"fn spec.kubeletConfiguration.withEvictionSoftMixin","text":"<pre><code>withEvictionSoftMixin(evictionSoft)\n</code></pre> <p>\"EvictionSoft is the map of signal names to quantities that define soft eviction thresholds\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithimagegchighthresholdpercent","title":"fn spec.kubeletConfiguration.withImageGCHighThresholdPercent","text":"<pre><code>withImageGCHighThresholdPercent(imageGCHighThresholdPercent)\n</code></pre> <p>\"ImageGCHighThresholdPercent is the percent of disk usage after which image garbage collection is always run. The percent is calculated by dividing this field value by 100, so this field must be between 0 and 100, inclusive. When specified, the value must be greater than ImageGCLowThresholdPercent.\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithimagegclowthresholdpercent","title":"fn spec.kubeletConfiguration.withImageGCLowThresholdPercent","text":"<pre><code>withImageGCLowThresholdPercent(imageGCLowThresholdPercent)\n</code></pre> <p>\"ImageGCLowThresholdPercent is the percent of disk usage before which image garbage collection is never run. Lowest disk usage to garbage collect to. The percent is calculated by dividing this field value by 100, so the field value must be between 0 and 100, inclusive. When specified, the value must be less than imageGCHighThresholdPercent\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithkubereserved","title":"fn spec.kubeletConfiguration.withKubeReserved","text":"<pre><code>withKubeReserved(kubeReserved)\n</code></pre> <p>\"KubeReserved contains resources reserved for Kubernetes system components.\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithkubereservedmixin","title":"fn spec.kubeletConfiguration.withKubeReservedMixin","text":"<pre><code>withKubeReservedMixin(kubeReserved)\n</code></pre> <p>\"KubeReserved contains resources reserved for Kubernetes system components.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithmaxpods","title":"fn spec.kubeletConfiguration.withMaxPods","text":"<pre><code>withMaxPods(maxPods)\n</code></pre> <p>\"MaxPods is an override for the maximum number of pods that can run on a worker node instance.\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithpodspercore","title":"fn spec.kubeletConfiguration.withPodsPerCore","text":"<pre><code>withPodsPerCore(podsPerCore)\n</code></pre> <p>\"PodsPerCore is an override for the number of pods that can run on a worker node instance based on the number of cpu cores. This value cannot exceed MaxPods, so, if MaxPods is a lower value, that value will be used.\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithsystemreserved","title":"fn spec.kubeletConfiguration.withSystemReserved","text":"<pre><code>withSystemReserved(systemReserved)\n</code></pre> <p>\"SystemReserved contains resources reserved for OS system daemons and kernel memory.\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithsystemreservedmixin","title":"fn spec.kubeletConfiguration.withSystemReservedMixin","text":"<pre><code>withSystemReservedMixin(systemReserved)\n</code></pre> <p>\"SystemReserved contains resources reserved for OS system daemons and kernel memory.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#obj-speclimits","title":"obj spec.limits","text":"<p>\"Limits define a set of bounds for provisioning capacity.\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-speclimitswithresources","title":"fn spec.limits.withResources","text":"<pre><code>withResources(resources)\n</code></pre> <p>\"Resources contains all the allocatable resources that Karpenter supports for limiting.\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-speclimitswithresourcesmixin","title":"fn spec.limits.withResourcesMixin","text":"<pre><code>withResourcesMixin(resources)\n</code></pre> <p>\"Resources contains all the allocatable resources that Karpenter supports for limiting.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#obj-specproviderref","title":"obj spec.providerRef","text":"<p>\"ProviderRef is a reference to a dedicated CRD for the chosen provider, that holds additional configuration options\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-specproviderrefwithapiversion","title":"fn spec.providerRef.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"API version of the referent\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-specproviderrefwithkind","title":"fn spec.providerRef.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\\</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-specproviderrefwithname","title":"fn spec.providerRef.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#obj-specrequirements","title":"obj spec.requirements","text":"<p>\"Requirements are layered with Labels and applied to every node.\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-specrequirementswithkey","title":"fn spec.requirements.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"The label key that the selector applies to.\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-specrequirementswithoperator","title":"fn spec.requirements.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-specrequirementswithvalues","title":"fn spec.requirements.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-specrequirementswithvaluesmixin","title":"fn spec.requirements.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#obj-specstartuptaints","title":"obj spec.startupTaints","text":"<p>\"StartupTaints are taints that are applied to nodes upon startup which are expected to be removed automatically within a short period of time, typically by a DaemonSet that tolerates the taint. These are commonly used by daemonsets to allow initialization and enforce startup ordering.  StartupTaints are ignored for provisioning purposes in that pods are not required to tolerate a StartupTaint in order to have nodes provisioned for them.\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-specstartuptaintswitheffect","title":"fn spec.startupTaints.withEffect","text":"<pre><code>withEffect(effect)\n</code></pre> <p>\"Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-specstartuptaintswithkey","title":"fn spec.startupTaints.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Required. The taint key to be applied to a node.\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-specstartuptaintswithtimeadded","title":"fn spec.startupTaints.withTimeAdded","text":"<pre><code>withTimeAdded(timeAdded)\n</code></pre> <p>\"TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-specstartuptaintswithvalue","title":"fn spec.startupTaints.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"The taint value corresponding to the taint key.\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#obj-spectaints","title":"obj spec.taints","text":"<p>\"Taints will be applied to every node launched by the Provisioner. If specified, the provisioner will not provision nodes for pods that do not have matching tolerations. Additional taints will be created that match pod tolerations on a per-node basis.\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-spectaintswitheffect","title":"fn spec.taints.withEffect","text":"<pre><code>withEffect(effect)\n</code></pre> <p>\"Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-spectaintswithkey","title":"fn spec.taints.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Required. The taint key to be applied to a node.\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-spectaintswithtimeadded","title":"fn spec.taints.withTimeAdded","text":"<pre><code>withTimeAdded(timeAdded)\n</code></pre> <p>\"TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.\"</p>"},{"location":"0.31/sh/karpenter/v1alpha5/provisioner/#fn-spectaintswithvalue","title":"fn spec.taints.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"The taint value corresponding to the taint key.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/","title":"karpenter.v1beta1","text":"<ul> <li>nodeClaim</li> <li>nodePool</li> </ul>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/","title":"karpenter.v1beta1.nodeClaim","text":"<p>\"NodeClaim is the Schema for the NodeClaims API\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withRequirements(requirements)</code></li> <li><code>fn withRequirementsMixin(requirements)</code></li> <li><code>fn withStartupTaints(startupTaints)</code></li> <li><code>fn withStartupTaintsMixin(startupTaints)</code></li> <li><code>fn withTaints(taints)</code></li> <li><code>fn withTaintsMixin(taints)</code></li> <li><code>obj spec.kubelet</code><ul> <li><code>fn withClusterDNS(clusterDNS)</code></li> <li><code>fn withClusterDNSMixin(clusterDNS)</code></li> <li><code>fn withCpuCFSQuota(cpuCFSQuota)</code></li> <li><code>fn withEvictionHard(evictionHard)</code></li> <li><code>fn withEvictionHardMixin(evictionHard)</code></li> <li><code>fn withEvictionMaxPodGracePeriod(evictionMaxPodGracePeriod)</code></li> <li><code>fn withEvictionSoft(evictionSoft)</code></li> <li><code>fn withEvictionSoftGracePeriod(evictionSoftGracePeriod)</code></li> <li><code>fn withEvictionSoftGracePeriodMixin(evictionSoftGracePeriod)</code></li> <li><code>fn withEvictionSoftMixin(evictionSoft)</code></li> <li><code>fn withImageGCHighThresholdPercent(imageGCHighThresholdPercent)</code></li> <li><code>fn withImageGCLowThresholdPercent(imageGCLowThresholdPercent)</code></li> <li><code>fn withKubeReserved(kubeReserved)</code></li> <li><code>fn withKubeReservedMixin(kubeReserved)</code></li> <li><code>fn withMaxPods(maxPods)</code></li> <li><code>fn withPodsPerCore(podsPerCore)</code></li> <li><code>fn withSystemReserved(systemReserved)</code></li> <li><code>fn withSystemReservedMixin(systemReserved)</code></li> </ul> </li> <li><code>obj spec.nodeClass</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.requirements</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> <li><code>obj spec.resources</code><ul> <li><code>fn withRequests(requests)</code></li> <li><code>fn withRequestsMixin(requests)</code></li> </ul> </li> <li><code>obj spec.startupTaints</code><ul> <li><code>fn withEffect(effect)</code></li> <li><code>fn withKey(key)</code></li> <li><code>fn withTimeAdded(timeAdded)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.taints</code><ul> <li><code>fn withEffect(effect)</code></li> <li><code>fn withKey(key)</code></li> <li><code>fn withTimeAdded(timeAdded)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fields","title":"Fields","text":""},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of NodeClaim</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#obj-spec","title":"obj spec","text":"<p>\"NodeClaimSpec describes the desired state of the NodeClaim\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-specwithrequirements","title":"fn spec.withRequirements","text":"<pre><code>withRequirements(requirements)\n</code></pre> <p>\"Requirements are layered with GetLabels and applied to every node.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-specwithrequirementsmixin","title":"fn spec.withRequirementsMixin","text":"<pre><code>withRequirementsMixin(requirements)\n</code></pre> <p>\"Requirements are layered with GetLabels and applied to every node.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-specwithstartuptaints","title":"fn spec.withStartupTaints","text":"<pre><code>withStartupTaints(startupTaints)\n</code></pre> <p>\"StartupTaints are taints that are applied to nodes upon startup which are expected to be removed automatically within a short period of time, typically by a DaemonSet that tolerates the taint. These are commonly used by daemonsets to allow initialization and enforce startup ordering.  StartupTaints are ignored for provisioning purposes in that pods are not required to tolerate a StartupTaint in order to have nodes provisioned for them.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-specwithstartuptaintsmixin","title":"fn spec.withStartupTaintsMixin","text":"<pre><code>withStartupTaintsMixin(startupTaints)\n</code></pre> <p>\"StartupTaints are taints that are applied to nodes upon startup which are expected to be removed automatically within a short period of time, typically by a DaemonSet that tolerates the taint. These are commonly used by daemonsets to allow initialization and enforce startup ordering.  StartupTaints are ignored for provisioning purposes in that pods are not required to tolerate a StartupTaint in order to have nodes provisioned for them.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-specwithtaints","title":"fn spec.withTaints","text":"<pre><code>withTaints(taints)\n</code></pre> <p>\"Taints will be applied to the NodeClaim's node.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-specwithtaintsmixin","title":"fn spec.withTaintsMixin","text":"<pre><code>withTaintsMixin(taints)\n</code></pre> <p>\"Taints will be applied to the NodeClaim's node.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#obj-speckubelet","title":"obj spec.kubelet","text":"<p>\"Kubelet defines args to be used when configuring kubelet on provisioned nodes. They are a subset of the upstream types, recognizing not all options may be supported. Wherever possible, the types and names should reflect the upstream kubelet types.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithclusterdns","title":"fn spec.kubelet.withClusterDNS","text":"<pre><code>withClusterDNS(clusterDNS)\n</code></pre> <p>\"clusterDNS is a list of IP addresses for the cluster DNS server. Note that not all providers may use all addresses.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithclusterdnsmixin","title":"fn spec.kubelet.withClusterDNSMixin","text":"<pre><code>withClusterDNSMixin(clusterDNS)\n</code></pre> <p>\"clusterDNS is a list of IP addresses for the cluster DNS server. Note that not all providers may use all addresses.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithcpucfsquota","title":"fn spec.kubelet.withCpuCFSQuota","text":"<pre><code>withCpuCFSQuota(cpuCFSQuota)\n</code></pre> <p>\"CPUCFSQuota enables CPU CFS quota enforcement for containers that specify CPU limits.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithevictionhard","title":"fn spec.kubelet.withEvictionHard","text":"<pre><code>withEvictionHard(evictionHard)\n</code></pre> <p>\"EvictionHard is the map of signal names to quantities that define hard eviction thresholds\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithevictionhardmixin","title":"fn spec.kubelet.withEvictionHardMixin","text":"<pre><code>withEvictionHardMixin(evictionHard)\n</code></pre> <p>\"EvictionHard is the map of signal names to quantities that define hard eviction thresholds\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithevictionmaxpodgraceperiod","title":"fn spec.kubelet.withEvictionMaxPodGracePeriod","text":"<pre><code>withEvictionMaxPodGracePeriod(evictionMaxPodGracePeriod)\n</code></pre> <p>\"EvictionMaxPodGracePeriod is the maximum allowed grace period (in seconds) to use when terminating pods in response to soft eviction thresholds being met.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithevictionsoft","title":"fn spec.kubelet.withEvictionSoft","text":"<pre><code>withEvictionSoft(evictionSoft)\n</code></pre> <p>\"EvictionSoft is the map of signal names to quantities that define soft eviction thresholds\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithevictionsoftgraceperiod","title":"fn spec.kubelet.withEvictionSoftGracePeriod","text":"<pre><code>withEvictionSoftGracePeriod(evictionSoftGracePeriod)\n</code></pre> <p>\"EvictionSoftGracePeriod is the map of signal names to quantities that define grace periods for each eviction signal\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithevictionsoftgraceperiodmixin","title":"fn spec.kubelet.withEvictionSoftGracePeriodMixin","text":"<pre><code>withEvictionSoftGracePeriodMixin(evictionSoftGracePeriod)\n</code></pre> <p>\"EvictionSoftGracePeriod is the map of signal names to quantities that define grace periods for each eviction signal\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithevictionsoftmixin","title":"fn spec.kubelet.withEvictionSoftMixin","text":"<pre><code>withEvictionSoftMixin(evictionSoft)\n</code></pre> <p>\"EvictionSoft is the map of signal names to quantities that define soft eviction thresholds\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithimagegchighthresholdpercent","title":"fn spec.kubelet.withImageGCHighThresholdPercent","text":"<pre><code>withImageGCHighThresholdPercent(imageGCHighThresholdPercent)\n</code></pre> <p>\"ImageGCHighThresholdPercent is the percent of disk usage after which image garbage collection is always run. The percent is calculated by dividing this field value by 100, so this field must be between 0 and 100, inclusive. When specified, the value must be greater than ImageGCLowThresholdPercent.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithimagegclowthresholdpercent","title":"fn spec.kubelet.withImageGCLowThresholdPercent","text":"<pre><code>withImageGCLowThresholdPercent(imageGCLowThresholdPercent)\n</code></pre> <p>\"ImageGCLowThresholdPercent is the percent of disk usage before which image garbage collection is never run. Lowest disk usage to garbage collect to. The percent is calculated by dividing this field value by 100, so the field value must be between 0 and 100, inclusive. When specified, the value must be less than imageGCHighThresholdPercent\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithkubereserved","title":"fn spec.kubelet.withKubeReserved","text":"<pre><code>withKubeReserved(kubeReserved)\n</code></pre> <p>\"KubeReserved contains resources reserved for Kubernetes system components.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithkubereservedmixin","title":"fn spec.kubelet.withKubeReservedMixin","text":"<pre><code>withKubeReservedMixin(kubeReserved)\n</code></pre> <p>\"KubeReserved contains resources reserved for Kubernetes system components.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithmaxpods","title":"fn spec.kubelet.withMaxPods","text":"<pre><code>withMaxPods(maxPods)\n</code></pre> <p>\"MaxPods is an override for the maximum number of pods that can run on a worker node instance.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithpodspercore","title":"fn spec.kubelet.withPodsPerCore","text":"<pre><code>withPodsPerCore(podsPerCore)\n</code></pre> <p>\"PodsPerCore is an override for the number of pods that can run on a worker node instance based on the number of cpu cores. This value cannot exceed MaxPods, so, if MaxPods is a lower value, that value will be used.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithsystemreserved","title":"fn spec.kubelet.withSystemReserved","text":"<pre><code>withSystemReserved(systemReserved)\n</code></pre> <p>\"SystemReserved contains resources reserved for OS system daemons and kernel memory.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithsystemreservedmixin","title":"fn spec.kubelet.withSystemReservedMixin","text":"<pre><code>withSystemReservedMixin(systemReserved)\n</code></pre> <p>\"SystemReserved contains resources reserved for OS system daemons and kernel memory.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#obj-specnodeclass","title":"obj spec.nodeClass","text":"<p>\"NodeClass is a reference to an object that defines provider specific configuration\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-specnodeclasswithapiversion","title":"fn spec.nodeClass.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"API version of the referent\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-specnodeclasswithkind","title":"fn spec.nodeClass.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\\</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-specnodeclasswithname","title":"fn spec.nodeClass.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#obj-specrequirements","title":"obj spec.requirements","text":"<p>\"Requirements are layered with GetLabels and applied to every node.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-specrequirementswithkey","title":"fn spec.requirements.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"The label key that the selector applies to.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-specrequirementswithoperator","title":"fn spec.requirements.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-specrequirementswithvalues","title":"fn spec.requirements.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-specrequirementswithvaluesmixin","title":"fn spec.requirements.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#obj-specresources","title":"obj spec.resources","text":"<p>\"Resources models the resource requirements for the NodeClaim to launch\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-specresourceswithrequests","title":"fn spec.resources.withRequests","text":"<pre><code>withRequests(requests)\n</code></pre> <p>\"Requests describes the minimum required resources for the NodeClaim to launch\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-specresourceswithrequestsmixin","title":"fn spec.resources.withRequestsMixin","text":"<pre><code>withRequestsMixin(requests)\n</code></pre> <p>\"Requests describes the minimum required resources for the NodeClaim to launch\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#obj-specstartuptaints","title":"obj spec.startupTaints","text":"<p>\"StartupTaints are taints that are applied to nodes upon startup which are expected to be removed automatically within a short period of time, typically by a DaemonSet that tolerates the taint. These are commonly used by daemonsets to allow initialization and enforce startup ordering.  StartupTaints are ignored for provisioning purposes in that pods are not required to tolerate a StartupTaint in order to have nodes provisioned for them.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-specstartuptaintswitheffect","title":"fn spec.startupTaints.withEffect","text":"<pre><code>withEffect(effect)\n</code></pre> <p>\"Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-specstartuptaintswithkey","title":"fn spec.startupTaints.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Required. The taint key to be applied to a node.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-specstartuptaintswithtimeadded","title":"fn spec.startupTaints.withTimeAdded","text":"<pre><code>withTimeAdded(timeAdded)\n</code></pre> <p>\"TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-specstartuptaintswithvalue","title":"fn spec.startupTaints.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"The taint value corresponding to the taint key.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#obj-spectaints","title":"obj spec.taints","text":"<p>\"Taints will be applied to the NodeClaim's node.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-spectaintswitheffect","title":"fn spec.taints.withEffect","text":"<pre><code>withEffect(effect)\n</code></pre> <p>\"Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-spectaintswithkey","title":"fn spec.taints.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Required. The taint key to be applied to a node.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-spectaintswithtimeadded","title":"fn spec.taints.withTimeAdded","text":"<pre><code>withTimeAdded(timeAdded)\n</code></pre> <p>\"TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodeClaim/#fn-spectaintswithvalue","title":"fn spec.taints.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"The taint value corresponding to the taint key.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/","title":"karpenter.v1beta1.nodePool","text":"<p>\"NodePool is the Schema for the NodePools API\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withLimits(limits)</code></li> <li><code>fn withLimitsMixin(limits)</code></li> <li><code>fn withWeight(weight)</code></li> <li><code>obj spec.disruption</code><ul> <li><code>fn withConsolidateAfter(consolidateAfter)</code></li> <li><code>fn withConsolidationPolicy(consolidationPolicy)</code></li> <li><code>fn withExpireAfter(expireAfter)</code></li> </ul> </li> <li><code>obj spec.template</code><ul> <li><code>obj spec.template.metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.template.spec</code><ul> <li><code>fn withRequirements(requirements)</code></li> <li><code>fn withRequirementsMixin(requirements)</code></li> <li><code>fn withStartupTaints(startupTaints)</code></li> <li><code>fn withStartupTaintsMixin(startupTaints)</code></li> <li><code>fn withTaints(taints)</code></li> <li><code>fn withTaintsMixin(taints)</code></li> <li><code>obj spec.template.spec.kubelet</code><ul> <li><code>fn withClusterDNS(clusterDNS)</code></li> <li><code>fn withClusterDNSMixin(clusterDNS)</code></li> <li><code>fn withCpuCFSQuota(cpuCFSQuota)</code></li> <li><code>fn withEvictionHard(evictionHard)</code></li> <li><code>fn withEvictionHardMixin(evictionHard)</code></li> <li><code>fn withEvictionMaxPodGracePeriod(evictionMaxPodGracePeriod)</code></li> <li><code>fn withEvictionSoft(evictionSoft)</code></li> <li><code>fn withEvictionSoftGracePeriod(evictionSoftGracePeriod)</code></li> <li><code>fn withEvictionSoftGracePeriodMixin(evictionSoftGracePeriod)</code></li> <li><code>fn withEvictionSoftMixin(evictionSoft)</code></li> <li><code>fn withImageGCHighThresholdPercent(imageGCHighThresholdPercent)</code></li> <li><code>fn withImageGCLowThresholdPercent(imageGCLowThresholdPercent)</code></li> <li><code>fn withKubeReserved(kubeReserved)</code></li> <li><code>fn withKubeReservedMixin(kubeReserved)</code></li> <li><code>fn withMaxPods(maxPods)</code></li> <li><code>fn withPodsPerCore(podsPerCore)</code></li> <li><code>fn withSystemReserved(systemReserved)</code></li> <li><code>fn withSystemReservedMixin(systemReserved)</code></li> </ul> </li> <li><code>obj spec.template.spec.nodeClass</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.template.spec.requirements</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> <li><code>obj spec.template.spec.resources</code><ul> <li><code>fn withRequests(requests)</code></li> <li><code>fn withRequestsMixin(requests)</code></li> </ul> </li> <li><code>obj spec.template.spec.startupTaints</code><ul> <li><code>fn withEffect(effect)</code></li> <li><code>fn withKey(key)</code></li> <li><code>fn withTimeAdded(timeAdded)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.template.spec.taints</code><ul> <li><code>fn withEffect(effect)</code></li> <li><code>fn withKey(key)</code></li> <li><code>fn withTimeAdded(timeAdded)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fields","title":"Fields","text":""},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of NodePool</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#obj-spec","title":"obj spec","text":"<p>\"NodePoolSpec is the top level provisioner specification. Provisioners launch nodes in response to pods that are unschedulable. A single provisioner is capable of managing a diverse set of nodes. Node properties are determined from a combination of provisioner and pod scheduling constraints.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-specwithlimits","title":"fn spec.withLimits","text":"<pre><code>withLimits(limits)\n</code></pre> <p>\"Limits define a set of bounds for provisioning capacity.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-specwithlimitsmixin","title":"fn spec.withLimitsMixin","text":"<pre><code>withLimitsMixin(limits)\n</code></pre> <p>\"Limits define a set of bounds for provisioning capacity.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-specwithweight","title":"fn spec.withWeight","text":"<pre><code>withWeight(weight)\n</code></pre> <p>\"Weight is the priority given to the provisioner during scheduling. A higher numerical weight indicates that this provisioner will be ordered ahead of other provisioners with lower weights. A provisioner with no weight will be treated as if it is a provisioner with a weight of 0.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#obj-specdisruption","title":"obj spec.disruption","text":"<p>\"Disruption contains the parameters that relate to Karpenter's disruption logic\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-specdisruptionwithconsolidateafter","title":"fn spec.disruption.withConsolidateAfter","text":"<pre><code>withConsolidateAfter(consolidateAfter)\n</code></pre> <p>\"ConsolidateAfter is the duration the controller will wait before attempting to terminate nodes that are underutilized. Refer to ConsolidationPolicy for how underutilization is considered.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-specdisruptionwithconsolidationpolicy","title":"fn spec.disruption.withConsolidationPolicy","text":"<pre><code>withConsolidationPolicy(consolidationPolicy)\n</code></pre> <p>\"ConsolidationPolicy describes which nodes Karpenter can disrupt through its consolidation algorithm. This policy defaults to \\\"WhenUnderutilized\\\" if not specified\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-specdisruptionwithexpireafter","title":"fn spec.disruption.withExpireAfter","text":"<pre><code>withExpireAfter(expireAfter)\n</code></pre> <p>\"ExpireAfter is the duration the controller will wait before terminating a node, measured from when the node is created. This is useful to implement features like eventually consistent node upgrade, memory leak protection, and disruption testing.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#obj-spectemplate","title":"obj spec.template","text":"<p>\"Template contains the template of possibilities for the provisioning logic to launch a NodeClaim with. NodeClaims launched from this NodePool will often be further constrained than the template specifies.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#obj-spectemplatemetadata","title":"obj spec.template.metadata","text":""},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatemetadatawithannotations","title":"fn spec.template.metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatemetadatawithannotationsmixin","title":"fn spec.template.metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatemetadatawithfinalizers","title":"fn spec.template.metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatemetadatawithfinalizersmixin","title":"fn spec.template.metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatemetadatawithlabels","title":"fn spec.template.metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatemetadatawithlabelsmixin","title":"fn spec.template.metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatemetadatawithname","title":"fn spec.template.metadata.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatemetadatawithnamespace","title":"fn spec.template.metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#obj-spectemplatespec","title":"obj spec.template.spec","text":"<p>\"NodeClaimSpec describes the desired state of the NodeClaim\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecwithrequirements","title":"fn spec.template.spec.withRequirements","text":"<pre><code>withRequirements(requirements)\n</code></pre> <p>\"Requirements are layered with GetLabels and applied to every node.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecwithrequirementsmixin","title":"fn spec.template.spec.withRequirementsMixin","text":"<pre><code>withRequirementsMixin(requirements)\n</code></pre> <p>\"Requirements are layered with GetLabels and applied to every node.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecwithstartuptaints","title":"fn spec.template.spec.withStartupTaints","text":"<pre><code>withStartupTaints(startupTaints)\n</code></pre> <p>\"StartupTaints are taints that are applied to nodes upon startup which are expected to be removed automatically within a short period of time, typically by a DaemonSet that tolerates the taint. These are commonly used by daemonsets to allow initialization and enforce startup ordering.  StartupTaints are ignored for provisioning purposes in that pods are not required to tolerate a StartupTaint in order to have nodes provisioned for them.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecwithstartuptaintsmixin","title":"fn spec.template.spec.withStartupTaintsMixin","text":"<pre><code>withStartupTaintsMixin(startupTaints)\n</code></pre> <p>\"StartupTaints are taints that are applied to nodes upon startup which are expected to be removed automatically within a short period of time, typically by a DaemonSet that tolerates the taint. These are commonly used by daemonsets to allow initialization and enforce startup ordering.  StartupTaints are ignored for provisioning purposes in that pods are not required to tolerate a StartupTaint in order to have nodes provisioned for them.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecwithtaints","title":"fn spec.template.spec.withTaints","text":"<pre><code>withTaints(taints)\n</code></pre> <p>\"Taints will be applied to the NodeClaim's node.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecwithtaintsmixin","title":"fn spec.template.spec.withTaintsMixin","text":"<pre><code>withTaintsMixin(taints)\n</code></pre> <p>\"Taints will be applied to the NodeClaim's node.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#obj-spectemplatespeckubelet","title":"obj spec.template.spec.kubelet","text":"<p>\"Kubelet defines args to be used when configuring kubelet on provisioned nodes. They are a subset of the upstream types, recognizing not all options may be supported. Wherever possible, the types and names should reflect the upstream kubelet types.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithclusterdns","title":"fn spec.template.spec.kubelet.withClusterDNS","text":"<pre><code>withClusterDNS(clusterDNS)\n</code></pre> <p>\"clusterDNS is a list of IP addresses for the cluster DNS server. Note that not all providers may use all addresses.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithclusterdnsmixin","title":"fn spec.template.spec.kubelet.withClusterDNSMixin","text":"<pre><code>withClusterDNSMixin(clusterDNS)\n</code></pre> <p>\"clusterDNS is a list of IP addresses for the cluster DNS server. Note that not all providers may use all addresses.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithcpucfsquota","title":"fn spec.template.spec.kubelet.withCpuCFSQuota","text":"<pre><code>withCpuCFSQuota(cpuCFSQuota)\n</code></pre> <p>\"CPUCFSQuota enables CPU CFS quota enforcement for containers that specify CPU limits.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithevictionhard","title":"fn spec.template.spec.kubelet.withEvictionHard","text":"<pre><code>withEvictionHard(evictionHard)\n</code></pre> <p>\"EvictionHard is the map of signal names to quantities that define hard eviction thresholds\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithevictionhardmixin","title":"fn spec.template.spec.kubelet.withEvictionHardMixin","text":"<pre><code>withEvictionHardMixin(evictionHard)\n</code></pre> <p>\"EvictionHard is the map of signal names to quantities that define hard eviction thresholds\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithevictionmaxpodgraceperiod","title":"fn spec.template.spec.kubelet.withEvictionMaxPodGracePeriod","text":"<pre><code>withEvictionMaxPodGracePeriod(evictionMaxPodGracePeriod)\n</code></pre> <p>\"EvictionMaxPodGracePeriod is the maximum allowed grace period (in seconds) to use when terminating pods in response to soft eviction thresholds being met.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithevictionsoft","title":"fn spec.template.spec.kubelet.withEvictionSoft","text":"<pre><code>withEvictionSoft(evictionSoft)\n</code></pre> <p>\"EvictionSoft is the map of signal names to quantities that define soft eviction thresholds\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithevictionsoftgraceperiod","title":"fn spec.template.spec.kubelet.withEvictionSoftGracePeriod","text":"<pre><code>withEvictionSoftGracePeriod(evictionSoftGracePeriod)\n</code></pre> <p>\"EvictionSoftGracePeriod is the map of signal names to quantities that define grace periods for each eviction signal\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithevictionsoftgraceperiodmixin","title":"fn spec.template.spec.kubelet.withEvictionSoftGracePeriodMixin","text":"<pre><code>withEvictionSoftGracePeriodMixin(evictionSoftGracePeriod)\n</code></pre> <p>\"EvictionSoftGracePeriod is the map of signal names to quantities that define grace periods for each eviction signal\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithevictionsoftmixin","title":"fn spec.template.spec.kubelet.withEvictionSoftMixin","text":"<pre><code>withEvictionSoftMixin(evictionSoft)\n</code></pre> <p>\"EvictionSoft is the map of signal names to quantities that define soft eviction thresholds\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithimagegchighthresholdpercent","title":"fn spec.template.spec.kubelet.withImageGCHighThresholdPercent","text":"<pre><code>withImageGCHighThresholdPercent(imageGCHighThresholdPercent)\n</code></pre> <p>\"ImageGCHighThresholdPercent is the percent of disk usage after which image garbage collection is always run. The percent is calculated by dividing this field value by 100, so this field must be between 0 and 100, inclusive. When specified, the value must be greater than ImageGCLowThresholdPercent.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithimagegclowthresholdpercent","title":"fn spec.template.spec.kubelet.withImageGCLowThresholdPercent","text":"<pre><code>withImageGCLowThresholdPercent(imageGCLowThresholdPercent)\n</code></pre> <p>\"ImageGCLowThresholdPercent is the percent of disk usage before which image garbage collection is never run. Lowest disk usage to garbage collect to. The percent is calculated by dividing this field value by 100, so the field value must be between 0 and 100, inclusive. When specified, the value must be less than imageGCHighThresholdPercent\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithkubereserved","title":"fn spec.template.spec.kubelet.withKubeReserved","text":"<pre><code>withKubeReserved(kubeReserved)\n</code></pre> <p>\"KubeReserved contains resources reserved for Kubernetes system components.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithkubereservedmixin","title":"fn spec.template.spec.kubelet.withKubeReservedMixin","text":"<pre><code>withKubeReservedMixin(kubeReserved)\n</code></pre> <p>\"KubeReserved contains resources reserved for Kubernetes system components.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithmaxpods","title":"fn spec.template.spec.kubelet.withMaxPods","text":"<pre><code>withMaxPods(maxPods)\n</code></pre> <p>\"MaxPods is an override for the maximum number of pods that can run on a worker node instance.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithpodspercore","title":"fn spec.template.spec.kubelet.withPodsPerCore","text":"<pre><code>withPodsPerCore(podsPerCore)\n</code></pre> <p>\"PodsPerCore is an override for the number of pods that can run on a worker node instance based on the number of cpu cores. This value cannot exceed MaxPods, so, if MaxPods is a lower value, that value will be used.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithsystemreserved","title":"fn spec.template.spec.kubelet.withSystemReserved","text":"<pre><code>withSystemReserved(systemReserved)\n</code></pre> <p>\"SystemReserved contains resources reserved for OS system daemons and kernel memory.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithsystemreservedmixin","title":"fn spec.template.spec.kubelet.withSystemReservedMixin","text":"<pre><code>withSystemReservedMixin(systemReserved)\n</code></pre> <p>\"SystemReserved contains resources reserved for OS system daemons and kernel memory.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#obj-spectemplatespecnodeclass","title":"obj spec.template.spec.nodeClass","text":"<p>\"NodeClass is a reference to an object that defines provider specific configuration\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecnodeclasswithapiversion","title":"fn spec.template.spec.nodeClass.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"API version of the referent\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecnodeclasswithkind","title":"fn spec.template.spec.nodeClass.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\\</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecnodeclasswithname","title":"fn spec.template.spec.nodeClass.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#obj-spectemplatespecrequirements","title":"obj spec.template.spec.requirements","text":"<p>\"Requirements are layered with GetLabels and applied to every node.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecrequirementswithkey","title":"fn spec.template.spec.requirements.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"The label key that the selector applies to.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecrequirementswithoperator","title":"fn spec.template.spec.requirements.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecrequirementswithvalues","title":"fn spec.template.spec.requirements.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecrequirementswithvaluesmixin","title":"fn spec.template.spec.requirements.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#obj-spectemplatespecresources","title":"obj spec.template.spec.resources","text":"<p>\"Resources models the resource requirements for the NodeClaim to launch\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecresourceswithrequests","title":"fn spec.template.spec.resources.withRequests","text":"<pre><code>withRequests(requests)\n</code></pre> <p>\"Requests describes the minimum required resources for the NodeClaim to launch\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecresourceswithrequestsmixin","title":"fn spec.template.spec.resources.withRequestsMixin","text":"<pre><code>withRequestsMixin(requests)\n</code></pre> <p>\"Requests describes the minimum required resources for the NodeClaim to launch\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#obj-spectemplatespecstartuptaints","title":"obj spec.template.spec.startupTaints","text":"<p>\"StartupTaints are taints that are applied to nodes upon startup which are expected to be removed automatically within a short period of time, typically by a DaemonSet that tolerates the taint. These are commonly used by daemonsets to allow initialization and enforce startup ordering.  StartupTaints are ignored for provisioning purposes in that pods are not required to tolerate a StartupTaint in order to have nodes provisioned for them.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecstartuptaintswitheffect","title":"fn spec.template.spec.startupTaints.withEffect","text":"<pre><code>withEffect(effect)\n</code></pre> <p>\"Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecstartuptaintswithkey","title":"fn spec.template.spec.startupTaints.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Required. The taint key to be applied to a node.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecstartuptaintswithtimeadded","title":"fn spec.template.spec.startupTaints.withTimeAdded","text":"<pre><code>withTimeAdded(timeAdded)\n</code></pre> <p>\"TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecstartuptaintswithvalue","title":"fn spec.template.spec.startupTaints.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"The taint value corresponding to the taint key.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#obj-spectemplatespectaints","title":"obj spec.template.spec.taints","text":"<p>\"Taints will be applied to the NodeClaim's node.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespectaintswitheffect","title":"fn spec.template.spec.taints.withEffect","text":"<pre><code>withEffect(effect)\n</code></pre> <p>\"Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespectaintswithkey","title":"fn spec.template.spec.taints.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Required. The taint key to be applied to a node.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespectaintswithtimeadded","title":"fn spec.template.spec.taints.withTimeAdded","text":"<pre><code>withTimeAdded(timeAdded)\n</code></pre> <p>\"TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.\"</p>"},{"location":"0.31/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespectaintswithvalue","title":"fn spec.template.spec.taints.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"The taint value corresponding to the taint key.\"</p>"},{"location":"0.32/aws/","title":"karpenter","text":"<pre><code>local karpenter = import \"github.com/jsonnet-libs/karpenter-libsonnet/0.32/aws/main.libsonnet\"\n</code></pre> <ul> <li>karpenter</li> </ul>"},{"location":"0.32/aws/karpenter/","title":"karpenter","text":"<ul> <li>v1alpha1</li> <li>v1beta1</li> </ul>"},{"location":"0.32/aws/karpenter/v1alpha1/","title":"karpenter.v1alpha1","text":"<ul> <li>awsNodeTemplate</li> </ul>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/","title":"karpenter.v1alpha1.awsNodeTemplate","text":"<p>\"AWSNodeTemplate is the Schema for the AWSNodeTemplate API\"</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withAmiFamily(amiFamily)</code></li> <li><code>fn withAmiSelector(amiSelector)</code></li> <li><code>fn withAmiSelectorMixin(amiSelector)</code></li> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withBlockDeviceMappings(blockDeviceMappings)</code></li> <li><code>fn withBlockDeviceMappingsMixin(blockDeviceMappings)</code></li> <li><code>fn withContext(context)</code></li> <li><code>fn withDetailedMonitoring(detailedMonitoring)</code></li> <li><code>fn withInstanceProfile(instanceProfile)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withLaunchTemplate(launchTemplate)</code></li> <li><code>fn withSecurityGroupSelector(securityGroupSelector)</code></li> <li><code>fn withSecurityGroupSelectorMixin(securityGroupSelector)</code></li> <li><code>fn withSubnetSelector(subnetSelector)</code></li> <li><code>fn withSubnetSelectorMixin(subnetSelector)</code></li> <li><code>fn withTags(tags)</code></li> <li><code>fn withTagsMixin(tags)</code></li> <li><code>fn withUserData(userData)</code></li> <li><code>obj spec.blockDeviceMappings</code><ul> <li><code>fn withDeviceName(deviceName)</code></li> <li><code>obj spec.blockDeviceMappings.ebs</code><ul> <li><code>fn withDeleteOnTermination(deleteOnTermination)</code></li> <li><code>fn withEncrypted(encrypted)</code></li> <li><code>fn withIops(iops)</code></li> <li><code>fn withKmsKeyID(kmsKeyID)</code></li> <li><code>fn withSnapshotID(snapshotID)</code></li> <li><code>fn withThroughput(throughput)</code></li> <li><code>fn withVolumeSize(volumeSize)</code></li> <li><code>fn withVolumeType(volumeType)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.metadataOptions</code><ul> <li><code>fn withHttpEndpoint(httpEndpoint)</code></li> <li><code>fn withHttpProtocolIPv6(httpProtocolIPv6)</code></li> <li><code>fn withHttpPutResponseHopLimit(httpPutResponseHopLimit)</code></li> <li><code>fn withHttpTokens(httpTokens)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fields","title":"Fields","text":""},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of AWSNodeTemplate</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#obj-spec","title":"obj spec","text":"<p>\"AWSNodeTemplateSpec is the top level specification for the AWS Karpenter Provider. This will contain configuration necessary to launch instances in AWS.\"</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithamifamily","title":"fn spec.withAmiFamily","text":"<pre><code>withAmiFamily(amiFamily)\n</code></pre> <p>\"AMIFamily is the AMI family that instances use.\"</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithamiselector","title":"fn spec.withAmiSelector","text":"<pre><code>withAmiSelector(amiSelector)\n</code></pre> <p>\"AMISelector discovers AMIs to be used by Amazon EC2 tags.\"</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithamiselectormixin","title":"fn spec.withAmiSelectorMixin","text":"<pre><code>withAmiSelectorMixin(amiSelector)\n</code></pre> <p>\"AMISelector discovers AMIs to be used by Amazon EC2 tags.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithapiversion","title":"fn spec.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\"</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithblockdevicemappings","title":"fn spec.withBlockDeviceMappings","text":"<pre><code>withBlockDeviceMappings(blockDeviceMappings)\n</code></pre> <p>\"BlockDeviceMappings to be applied to provisioned nodes.\"</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithblockdevicemappingsmixin","title":"fn spec.withBlockDeviceMappingsMixin","text":"<pre><code>withBlockDeviceMappingsMixin(blockDeviceMappings)\n</code></pre> <p>\"BlockDeviceMappings to be applied to provisioned nodes.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithcontext","title":"fn spec.withContext","text":"<pre><code>withContext(context)\n</code></pre> <p>\"Context is a Reserved field in EC2 APIs https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet.html\"</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithdetailedmonitoring","title":"fn spec.withDetailedMonitoring","text":"<pre><code>withDetailedMonitoring(detailedMonitoring)\n</code></pre> <p>\"DetailedMonitoring controls if detailed monitoring is enabled for instances that are launched\"</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithinstanceprofile","title":"fn spec.withInstanceProfile","text":"<pre><code>withInstanceProfile(instanceProfile)\n</code></pre> <p>\"InstanceProfile is the AWS identity that instances use.\"</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithkind","title":"fn spec.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\"</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithlaunchtemplate","title":"fn spec.withLaunchTemplate","text":"<pre><code>withLaunchTemplate(launchTemplate)\n</code></pre> <p>\"LaunchTemplateName for the node. If not specified, a launch template will be generated. NOTE: This field is for specifying a custom launch template and is exposed in the Spec as <code>launchTemplate</code> for backwards compatibility.\"</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithsecuritygroupselector","title":"fn spec.withSecurityGroupSelector","text":"<pre><code>withSecurityGroupSelector(securityGroupSelector)\n</code></pre> <p>\"SecurityGroups specify the names of the security groups.\"</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithsecuritygroupselectormixin","title":"fn spec.withSecurityGroupSelectorMixin","text":"<pre><code>withSecurityGroupSelectorMixin(securityGroupSelector)\n</code></pre> <p>\"SecurityGroups specify the names of the security groups.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithsubnetselector","title":"fn spec.withSubnetSelector","text":"<pre><code>withSubnetSelector(subnetSelector)\n</code></pre> <p>\"SubnetSelector discovers subnets by tags. A value of \\\"\\\" is a wildcard.\"</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithsubnetselectormixin","title":"fn spec.withSubnetSelectorMixin","text":"<pre><code>withSubnetSelectorMixin(subnetSelector)\n</code></pre> <p>\"SubnetSelector discovers subnets by tags. A value of \\\"\\\" is a wildcard.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithtags","title":"fn spec.withTags","text":"<pre><code>withTags(tags)\n</code></pre> <p>\"Tags to be applied on ec2 resources like instances and launch templates.\"</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithtagsmixin","title":"fn spec.withTagsMixin","text":"<pre><code>withTagsMixin(tags)\n</code></pre> <p>\"Tags to be applied on ec2 resources like instances and launch templates.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specwithuserdata","title":"fn spec.withUserData","text":"<pre><code>withUserData(userData)\n</code></pre> <p>\"UserData to be applied to the provisioned nodes. It must be in the appropriate format based on the AMIFamily in use. Karpenter will merge certain fields into this UserData to ensure nodes are being provisioned with the correct configuration.\"</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#obj-specblockdevicemappings","title":"obj spec.blockDeviceMappings","text":"<p>\"BlockDeviceMappings to be applied to provisioned nodes.\"</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specblockdevicemappingswithdevicename","title":"fn spec.blockDeviceMappings.withDeviceName","text":"<pre><code>withDeviceName(deviceName)\n</code></pre> <p>\"The device name (for example, /dev/sdh or xvdh).\"</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#obj-specblockdevicemappingsebs","title":"obj spec.blockDeviceMappings.ebs","text":"<p>\"EBS contains parameters used to automatically set up EBS volumes when an instance is launched.\"</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specblockdevicemappingsebswithdeleteontermination","title":"fn spec.blockDeviceMappings.ebs.withDeleteOnTermination","text":"<pre><code>withDeleteOnTermination(deleteOnTermination)\n</code></pre> <p>\"DeleteOnTermination indicates whether the EBS volume is deleted on instance termination.\"</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specblockdevicemappingsebswithencrypted","title":"fn spec.blockDeviceMappings.ebs.withEncrypted","text":"<pre><code>withEncrypted(encrypted)\n</code></pre> <p>\"Encrypted indicates whether the EBS volume is encrypted. Encrypted volumes can only be attached to instances that support Amazon EBS encryption. If you are creating a volume from a snapshot, you can't specify an encryption value.\"</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specblockdevicemappingsebswithiops","title":"fn spec.blockDeviceMappings.ebs.withIops","text":"<pre><code>withIops(iops)\n</code></pre> <p>\"IOPS is the number of I/O operations per second (IOPS). For gp3, io1, and io2 volumes, this represents the number of IOPS that are provisioned for the volume. For gp2 volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. \\n The following are the supported values for each volume type: \\n * gp3: 3,000-16,000 IOPS \\n * io1: 100-64,000 IOPS \\n * io2: 100-64,000 IOPS \\n For io1 and io2 volumes, we guarantee 64,000 IOPS only for Instances built on the Nitro System (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances). Other instance families guarantee performance up to 32,000 IOPS. \\n This parameter is supported for io1, io2, and gp3 volumes only. This parameter is not supported for gp2, st1, sc1, or standard volumes.\"</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specblockdevicemappingsebswithkmskeyid","title":"fn spec.blockDeviceMappings.ebs.withKmsKeyID","text":"<pre><code>withKmsKeyID(kmsKeyID)\n</code></pre> <p>\"KMSKeyID (ARN) of the symmetric Key Management Service (KMS) CMK used for encryption.\"</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specblockdevicemappingsebswithsnapshotid","title":"fn spec.blockDeviceMappings.ebs.withSnapshotID","text":"<pre><code>withSnapshotID(snapshotID)\n</code></pre> <p>\"SnapshotID is the ID of an EBS snapshot\"</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specblockdevicemappingsebswiththroughput","title":"fn spec.blockDeviceMappings.ebs.withThroughput","text":"<pre><code>withThroughput(throughput)\n</code></pre> <p>\"Throughput to provision for a gp3 volume, with a maximum of 1,000 MiB/s. Valid Range: Minimum value of 125. Maximum value of 1000.\"</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specblockdevicemappingsebswithvolumesize","title":"fn spec.blockDeviceMappings.ebs.withVolumeSize","text":"<pre><code>withVolumeSize(volumeSize)\n</code></pre> <p>\"VolumeSize in GiBs. You must specify either a snapshot ID or a volume size. The following are the supported volumes sizes for each volume type: \\n * gp2 and gp3: 1-16,384 \\n * io1 and io2: 4-16,384 \\n * st1 and sc1: 125-16,384 \\n * standard: 1-1,024\"</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specblockdevicemappingsebswithvolumetype","title":"fn spec.blockDeviceMappings.ebs.withVolumeType","text":"<pre><code>withVolumeType(volumeType)\n</code></pre> <p>\"VolumeType of the block device. For more information, see Amazon EBS volume types (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html) in the Amazon Elastic Compute Cloud User Guide.\"</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#obj-specmetadataoptions","title":"obj spec.metadataOptions","text":"<p>\"MetadataOptions for the generated launch template of provisioned nodes. \\n This specifies the exposure of the Instance Metadata Service to provisioned EC2 nodes. For more information, see Instance Metadata and User Data (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html) in the Amazon Elastic Compute Cloud User Guide. \\n Refer to recommended, security best practices (https://aws.github.io/aws-eks-best-practices/security/docs/iam/#restrict-access-to-the-instance-profile-assigned-to-the-worker-node) for limiting exposure of Instance Metadata and User Data to pods. If omitted, defaults to httpEndpoint enabled, with httpProtocolIPv6 disabled, with httpPutResponseLimit of 2, and with httpTokens required.\"</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specmetadataoptionswithhttpendpoint","title":"fn spec.metadataOptions.withHttpEndpoint","text":"<pre><code>withHttpEndpoint(httpEndpoint)\n</code></pre> <p>\"HTTPEndpoint enables or disables the HTTP metadata endpoint on provisioned nodes. If metadata options is non-nil, but this parameter is not specified, the default state is \\\"enabled\\\". \\n If you specify a value of \\\"disabled\\\", instance metadata will not be accessible on the node.\"</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specmetadataoptionswithhttpprotocolipv6","title":"fn spec.metadataOptions.withHttpProtocolIPv6","text":"<pre><code>withHttpProtocolIPv6(httpProtocolIPv6)\n</code></pre> <p>\"HTTPProtocolIPv6 enables or disables the IPv6 endpoint for the instance metadata service on provisioned nodes. If metadata options is non-nil, but this parameter is not specified, the default state is \\\"disabled\\\".\"</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specmetadataoptionswithhttpputresponsehoplimit","title":"fn spec.metadataOptions.withHttpPutResponseHopLimit","text":"<pre><code>withHttpPutResponseHopLimit(httpPutResponseHopLimit)\n</code></pre> <p>\"HTTPPutResponseHopLimit is the desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. Possible values are integers from 1 to 64. If metadata options is non-nil, but this parameter is not specified, the default value is 1.\"</p>"},{"location":"0.32/aws/karpenter/v1alpha1/awsNodeTemplate/#fn-specmetadataoptionswithhttptokens","title":"fn spec.metadataOptions.withHttpTokens","text":"<pre><code>withHttpTokens(httpTokens)\n</code></pre> <p>\"HTTPTokens determines the state of token usage for instance metadata requests. If metadata options is non-nil, but this parameter is not specified, the default state is \\\"optional\\\". \\n If the state is optional, one can choose to retrieve instance metadata with or without a signed token header on the request. If one retrieves the IAM role credentials without a token, the version 1.0 role credentials are returned. If one retrieves the IAM role credentials using a valid signed token, the version 2.0 role credentials are returned. \\n If the state is \\\"required\\\", one must send a signed token header with any instance metadata retrieval requests. In this state, retrieving the IAM role credentials always returns the version 2.0 credentials; the version 1.0 credentials are not available.\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/","title":"karpenter.v1beta1","text":"<ul> <li>ec2NodeClass</li> </ul>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/","title":"karpenter.v1beta1.ec2NodeClass","text":"<p>\"EC2NodeClass is the Schema for the EC2NodeClass API\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withAmiFamily(amiFamily)</code></li> <li><code>fn withAmiSelectorTerms(amiSelectorTerms)</code></li> <li><code>fn withAmiSelectorTermsMixin(amiSelectorTerms)</code></li> <li><code>fn withBlockDeviceMappings(blockDeviceMappings)</code></li> <li><code>fn withBlockDeviceMappingsMixin(blockDeviceMappings)</code></li> <li><code>fn withContext(context)</code></li> <li><code>fn withDetailedMonitoring(detailedMonitoring)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withSecurityGroupSelectorTerms(securityGroupSelectorTerms)</code></li> <li><code>fn withSecurityGroupSelectorTermsMixin(securityGroupSelectorTerms)</code></li> <li><code>fn withSubnetSelectorTerms(subnetSelectorTerms)</code></li> <li><code>fn withSubnetSelectorTermsMixin(subnetSelectorTerms)</code></li> <li><code>fn withTags(tags)</code></li> <li><code>fn withTagsMixin(tags)</code></li> <li><code>fn withUserData(userData)</code></li> <li><code>obj spec.amiSelectorTerms</code><ul> <li><code>fn withId(id)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withOwner(owner)</code></li> <li><code>fn withTags(tags)</code></li> <li><code>fn withTagsMixin(tags)</code></li> </ul> </li> <li><code>obj spec.blockDeviceMappings</code><ul> <li><code>fn withDeviceName(deviceName)</code></li> <li><code>fn withRootVolume(rootVolume)</code></li> <li><code>obj spec.blockDeviceMappings.ebs</code><ul> <li><code>fn withDeleteOnTermination(deleteOnTermination)</code></li> <li><code>fn withEncrypted(encrypted)</code></li> <li><code>fn withIops(iops)</code></li> <li><code>fn withKmsKeyID(kmsKeyID)</code></li> <li><code>fn withSnapshotID(snapshotID)</code></li> <li><code>fn withThroughput(throughput)</code></li> <li><code>fn withVolumeSize(volumeSize)</code></li> <li><code>fn withVolumeType(volumeType)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.metadataOptions</code><ul> <li><code>fn withHttpEndpoint(httpEndpoint)</code></li> <li><code>fn withHttpProtocolIPv6(httpProtocolIPv6)</code></li> <li><code>fn withHttpPutResponseHopLimit(httpPutResponseHopLimit)</code></li> <li><code>fn withHttpTokens(httpTokens)</code></li> </ul> </li> <li><code>obj spec.securityGroupSelectorTerms</code><ul> <li><code>fn withId(id)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withTags(tags)</code></li> <li><code>fn withTagsMixin(tags)</code></li> </ul> </li> <li><code>obj spec.subnetSelectorTerms</code><ul> <li><code>fn withId(id)</code></li> <li><code>fn withTags(tags)</code></li> <li><code>fn withTagsMixin(tags)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fields","title":"Fields","text":""},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of EC2NodeClass</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#obj-spec","title":"obj spec","text":"<p>\"EC2NodeClassSpec is the top level specification for the AWS Karpenter Provider. This will contain configuration necessary to launch instances in AWS.\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithamifamily","title":"fn spec.withAmiFamily","text":"<pre><code>withAmiFamily(amiFamily)\n</code></pre> <p>\"AMIFamily is the AMI family that instances use.\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithamiselectorterms","title":"fn spec.withAmiSelectorTerms","text":"<pre><code>withAmiSelectorTerms(amiSelectorTerms)\n</code></pre> <p>\"AMISelectorTerms is a list of or ami selector terms. The terms are ORed.\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithamiselectortermsmixin","title":"fn spec.withAmiSelectorTermsMixin","text":"<pre><code>withAmiSelectorTermsMixin(amiSelectorTerms)\n</code></pre> <p>\"AMISelectorTerms is a list of or ami selector terms. The terms are ORed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithblockdevicemappings","title":"fn spec.withBlockDeviceMappings","text":"<pre><code>withBlockDeviceMappings(blockDeviceMappings)\n</code></pre> <p>\"BlockDeviceMappings to be applied to provisioned nodes.\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithblockdevicemappingsmixin","title":"fn spec.withBlockDeviceMappingsMixin","text":"<pre><code>withBlockDeviceMappingsMixin(blockDeviceMappings)\n</code></pre> <p>\"BlockDeviceMappings to be applied to provisioned nodes.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithcontext","title":"fn spec.withContext","text":"<pre><code>withContext(context)\n</code></pre> <p>\"Context is a Reserved field in EC2 APIs https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet.html\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithdetailedmonitoring","title":"fn spec.withDetailedMonitoring","text":"<pre><code>withDetailedMonitoring(detailedMonitoring)\n</code></pre> <p>\"DetailedMonitoring controls if detailed monitoring is enabled for instances that are launched\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithrole","title":"fn spec.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role is the AWS identity that nodes use. This field is immutable. Marking this field as immutable avoids concerns around terminating managed instance profiles from running instances. This field may be made mutable in the future, assuming the correct garbage collection and drift handling is implemented for the old instance profiles on an update.\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithsecuritygroupselectorterms","title":"fn spec.withSecurityGroupSelectorTerms","text":"<pre><code>withSecurityGroupSelectorTerms(securityGroupSelectorTerms)\n</code></pre> <p>\"SecurityGroupSelectorTerms is a list of or security group selector terms. The terms are ORed.\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithsecuritygroupselectortermsmixin","title":"fn spec.withSecurityGroupSelectorTermsMixin","text":"<pre><code>withSecurityGroupSelectorTermsMixin(securityGroupSelectorTerms)\n</code></pre> <p>\"SecurityGroupSelectorTerms is a list of or security group selector terms. The terms are ORed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithsubnetselectorterms","title":"fn spec.withSubnetSelectorTerms","text":"<pre><code>withSubnetSelectorTerms(subnetSelectorTerms)\n</code></pre> <p>\"SubnetSelectorTerms is a list of or subnet selector terms. The terms are ORed.\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithsubnetselectortermsmixin","title":"fn spec.withSubnetSelectorTermsMixin","text":"<pre><code>withSubnetSelectorTermsMixin(subnetSelectorTerms)\n</code></pre> <p>\"SubnetSelectorTerms is a list of or subnet selector terms. The terms are ORed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithtags","title":"fn spec.withTags","text":"<pre><code>withTags(tags)\n</code></pre> <p>\"Tags to be applied on ec2 resources like instances and launch templates.\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithtagsmixin","title":"fn spec.withTagsMixin","text":"<pre><code>withTagsMixin(tags)\n</code></pre> <p>\"Tags to be applied on ec2 resources like instances and launch templates.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithuserdata","title":"fn spec.withUserData","text":"<pre><code>withUserData(userData)\n</code></pre> <p>\"UserData to be applied to the provisioned nodes. It must be in the appropriate format based on the AMIFamily in use. Karpenter will merge certain fields into this UserData to ensure nodes are being provisioned with the correct configuration.\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#obj-specamiselectorterms","title":"obj spec.amiSelectorTerms","text":"<p>\"AMISelectorTerms is a list of or ami selector terms. The terms are ORed.\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-specamiselectortermswithid","title":"fn spec.amiSelectorTerms.withId","text":"<pre><code>withId(id)\n</code></pre> <p>\"ID is the ami id in EC2\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-specamiselectortermswithname","title":"fn spec.amiSelectorTerms.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the ami name in EC2. This value is the name field, which is different from the name tag.\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-specamiselectortermswithowner","title":"fn spec.amiSelectorTerms.withOwner","text":"<pre><code>withOwner(owner)\n</code></pre> <p>\"Owner is the owner for the ami. You can specify a combination of AWS account IDs, \\\"self\\\", \\\"amazon\\\", and \\\"aws-marketplace\\</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-specamiselectortermswithtags","title":"fn spec.amiSelectorTerms.withTags","text":"<pre><code>withTags(tags)\n</code></pre> <p>\"Tags is a map of key/value tags used to select subnets Specifying '*' for a value selects all values for a given tag key.\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-specamiselectortermswithtagsmixin","title":"fn spec.amiSelectorTerms.withTagsMixin","text":"<pre><code>withTagsMixin(tags)\n</code></pre> <p>\"Tags is a map of key/value tags used to select subnets Specifying '*' for a value selects all values for a given tag key.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#obj-specblockdevicemappings","title":"obj spec.blockDeviceMappings","text":"<p>\"BlockDeviceMappings to be applied to provisioned nodes.\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingswithdevicename","title":"fn spec.blockDeviceMappings.withDeviceName","text":"<pre><code>withDeviceName(deviceName)\n</code></pre> <p>\"The device name (for example, /dev/sdh or xvdh).\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingswithrootvolume","title":"fn spec.blockDeviceMappings.withRootVolume","text":"<pre><code>withRootVolume(rootVolume)\n</code></pre> <p>\"RootVolume is a flag indicating if this device is mounted as kubelet root dir. You can configure at most one root volume in BlockDeviceMappings.\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#obj-specblockdevicemappingsebs","title":"obj spec.blockDeviceMappings.ebs","text":"<p>\"EBS contains parameters used to automatically set up EBS volumes when an instance is launched.\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingsebswithdeleteontermination","title":"fn spec.blockDeviceMappings.ebs.withDeleteOnTermination","text":"<pre><code>withDeleteOnTermination(deleteOnTermination)\n</code></pre> <p>\"DeleteOnTermination indicates whether the EBS volume is deleted on instance termination.\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingsebswithencrypted","title":"fn spec.blockDeviceMappings.ebs.withEncrypted","text":"<pre><code>withEncrypted(encrypted)\n</code></pre> <p>\"Encrypted indicates whether the EBS volume is encrypted. Encrypted volumes can only be attached to instances that support Amazon EBS encryption. If you are creating a volume from a snapshot, you can't specify an encryption value.\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingsebswithiops","title":"fn spec.blockDeviceMappings.ebs.withIops","text":"<pre><code>withIops(iops)\n</code></pre> <p>\"IOPS is the number of I/O operations per second (IOPS). For gp3, io1, and io2 volumes, this represents the number of IOPS that are provisioned for the volume. For gp2 volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. \\n The following are the supported values for each volume type: \\n * gp3: 3,000-16,000 IOPS \\n * io1: 100-64,000 IOPS \\n * io2: 100-64,000 IOPS \\n For io1 and io2 volumes, we guarantee 64,000 IOPS only for Instances built on the Nitro System (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances). Other instance families guarantee performance up to 32,000 IOPS. \\n This parameter is supported for io1, io2, and gp3 volumes only. This parameter is not supported for gp2, st1, sc1, or standard volumes.\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingsebswithkmskeyid","title":"fn spec.blockDeviceMappings.ebs.withKmsKeyID","text":"<pre><code>withKmsKeyID(kmsKeyID)\n</code></pre> <p>\"KMSKeyID (ARN) of the symmetric Key Management Service (KMS) CMK used for encryption.\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingsebswithsnapshotid","title":"fn spec.blockDeviceMappings.ebs.withSnapshotID","text":"<pre><code>withSnapshotID(snapshotID)\n</code></pre> <p>\"SnapshotID is the ID of an EBS snapshot\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingsebswiththroughput","title":"fn spec.blockDeviceMappings.ebs.withThroughput","text":"<pre><code>withThroughput(throughput)\n</code></pre> <p>\"Throughput to provision for a gp3 volume, with a maximum of 1,000 MiB/s. Valid Range: Minimum value of 125. Maximum value of 1000.\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingsebswithvolumesize","title":"fn spec.blockDeviceMappings.ebs.withVolumeSize","text":"<pre><code>withVolumeSize(volumeSize)\n</code></pre> <p>\"VolumeSize in <code>Gi</code>, <code>G</code>, <code>Ti</code>, or <code>T</code>. You must specify either a snapshot ID or a volume size. The following are the supported volumes sizes for each volume type: \\n * gp2 and gp3: 1-16,384 \\n * io1 and io2: 4-16,384 \\n * st1 and sc1: 125-16,384 \\n * standard: 1-1,024\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingsebswithvolumetype","title":"fn spec.blockDeviceMappings.ebs.withVolumeType","text":"<pre><code>withVolumeType(volumeType)\n</code></pre> <p>\"VolumeType of the block device. For more information, see Amazon EBS volume types (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html) in the Amazon Elastic Compute Cloud User Guide.\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#obj-specmetadataoptions","title":"obj spec.metadataOptions","text":"<p>\"MetadataOptions for the generated launch template of provisioned nodes. \\n This specifies the exposure of the Instance Metadata Service to provisioned EC2 nodes. For more information, see Instance Metadata and User Data (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html) in the Amazon Elastic Compute Cloud User Guide. \\n Refer to recommended, security best practices (https://aws.github.io/aws-eks-best-practices/security/docs/iam/#restrict-access-to-the-instance-profile-assigned-to-the-worker-node) for limiting exposure of Instance Metadata and User Data to pods. If omitted, defaults to httpEndpoint enabled, with httpProtocolIPv6 disabled, with httpPutResponseLimit of 2, and with httpTokens required.\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-specmetadataoptionswithhttpendpoint","title":"fn spec.metadataOptions.withHttpEndpoint","text":"<pre><code>withHttpEndpoint(httpEndpoint)\n</code></pre> <p>\"HTTPEndpoint enables or disables the HTTP metadata endpoint on provisioned nodes. If metadata options is non-nil, but this parameter is not specified, the default state is \\\"enabled\\\". \\n If you specify a value of \\\"disabled\\\", instance metadata will not be accessible on the node.\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-specmetadataoptionswithhttpprotocolipv6","title":"fn spec.metadataOptions.withHttpProtocolIPv6","text":"<pre><code>withHttpProtocolIPv6(httpProtocolIPv6)\n</code></pre> <p>\"HTTPProtocolIPv6 enables or disables the IPv6 endpoint for the instance metadata service on provisioned nodes. If metadata options is non-nil, but this parameter is not specified, the default state is \\\"disabled\\\".\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-specmetadataoptionswithhttpputresponsehoplimit","title":"fn spec.metadataOptions.withHttpPutResponseHopLimit","text":"<pre><code>withHttpPutResponseHopLimit(httpPutResponseHopLimit)\n</code></pre> <p>\"HTTPPutResponseHopLimit is the desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. Possible values are integers from 1 to 64. If metadata options is non-nil, but this parameter is not specified, the default value is 2.\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-specmetadataoptionswithhttptokens","title":"fn spec.metadataOptions.withHttpTokens","text":"<pre><code>withHttpTokens(httpTokens)\n</code></pre> <p>\"HTTPTokens determines the state of token usage for instance metadata requests. If metadata options is non-nil, but this parameter is not specified, the default state is \\\"required\\\". \\n If the state is optional, one can choose to retrieve instance metadata with or without a signed token header on the request. If one retrieves the IAM role credentials without a token, the version 1.0 role credentials are returned. If one retrieves the IAM role credentials using a valid signed token, the version 2.0 role credentials are returned. \\n If the state is \\\"required\\\", one must send a signed token header with any instance metadata retrieval requests. In this state, retrieving the IAM role credentials always returns the version 2.0 credentials; the version 1.0 credentials are not available.\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#obj-specsecuritygroupselectorterms","title":"obj spec.securityGroupSelectorTerms","text":"<p>\"SecurityGroupSelectorTerms is a list of or security group selector terms. The terms are ORed.\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-specsecuritygroupselectortermswithid","title":"fn spec.securityGroupSelectorTerms.withId","text":"<pre><code>withId(id)\n</code></pre> <p>\"ID is the security group id in EC2\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-specsecuritygroupselectortermswithname","title":"fn spec.securityGroupSelectorTerms.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the security group name in EC2. This value is the name field, which is different from the name tag.\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-specsecuritygroupselectortermswithtags","title":"fn spec.securityGroupSelectorTerms.withTags","text":"<pre><code>withTags(tags)\n</code></pre> <p>\"Tags is a map of key/value tags used to select subnets Specifying '*' for a value selects all values for a given tag key.\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-specsecuritygroupselectortermswithtagsmixin","title":"fn spec.securityGroupSelectorTerms.withTagsMixin","text":"<pre><code>withTagsMixin(tags)\n</code></pre> <p>\"Tags is a map of key/value tags used to select subnets Specifying '*' for a value selects all values for a given tag key.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#obj-specsubnetselectorterms","title":"obj spec.subnetSelectorTerms","text":"<p>\"SubnetSelectorTerms is a list of or subnet selector terms. The terms are ORed.\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-specsubnetselectortermswithid","title":"fn spec.subnetSelectorTerms.withId","text":"<pre><code>withId(id)\n</code></pre> <p>\"ID is the subnet id in EC2\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-specsubnetselectortermswithtags","title":"fn spec.subnetSelectorTerms.withTags","text":"<pre><code>withTags(tags)\n</code></pre> <p>\"Tags is a map of key/value tags used to select subnets Specifying '*' for a value selects all values for a given tag key.\"</p>"},{"location":"0.32/aws/karpenter/v1beta1/ec2NodeClass/#fn-specsubnetselectortermswithtagsmixin","title":"fn spec.subnetSelectorTerms.withTagsMixin","text":"<pre><code>withTagsMixin(tags)\n</code></pre> <p>\"Tags is a map of key/value tags used to select subnets Specifying '*' for a value selects all values for a given tag key.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/","title":"karpenter","text":"<pre><code>local karpenter = import \"github.com/jsonnet-libs/karpenter-libsonnet/0.32/sh/main.libsonnet\"\n</code></pre> <ul> <li>karpenter</li> </ul>"},{"location":"0.32/sh/karpenter/","title":"karpenter","text":"<ul> <li>v1alpha5</li> <li>v1beta1</li> </ul>"},{"location":"0.32/sh/karpenter/v1alpha5/","title":"karpenter.v1alpha5","text":"<ul> <li>provisioner</li> </ul>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/","title":"karpenter.v1alpha5.provisioner","text":"<p>\"Provisioner is the Schema for the Provisioners API\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withProvider(provider)</code></li> <li><code>fn withProviderMixin(provider)</code></li> <li><code>fn withRequirements(requirements)</code></li> <li><code>fn withRequirementsMixin(requirements)</code></li> <li><code>fn withStartupTaints(startupTaints)</code></li> <li><code>fn withStartupTaintsMixin(startupTaints)</code></li> <li><code>fn withTaints(taints)</code></li> <li><code>fn withTaintsMixin(taints)</code></li> <li><code>fn withTtlSecondsAfterEmpty(ttlSecondsAfterEmpty)</code></li> <li><code>fn withTtlSecondsUntilExpired(ttlSecondsUntilExpired)</code></li> <li><code>fn withWeight(weight)</code></li> <li><code>obj spec.consolidation</code><ul> <li><code>fn withEnabled(enabled)</code></li> </ul> </li> <li><code>obj spec.kubeletConfiguration</code><ul> <li><code>fn withClusterDNS(clusterDNS)</code></li> <li><code>fn withClusterDNSMixin(clusterDNS)</code></li> <li><code>fn withContainerRuntime(containerRuntime)</code></li> <li><code>fn withCpuCFSQuota(cpuCFSQuota)</code></li> <li><code>fn withEvictionHard(evictionHard)</code></li> <li><code>fn withEvictionHardMixin(evictionHard)</code></li> <li><code>fn withEvictionMaxPodGracePeriod(evictionMaxPodGracePeriod)</code></li> <li><code>fn withEvictionSoft(evictionSoft)</code></li> <li><code>fn withEvictionSoftGracePeriod(evictionSoftGracePeriod)</code></li> <li><code>fn withEvictionSoftGracePeriodMixin(evictionSoftGracePeriod)</code></li> <li><code>fn withEvictionSoftMixin(evictionSoft)</code></li> <li><code>fn withImageGCHighThresholdPercent(imageGCHighThresholdPercent)</code></li> <li><code>fn withImageGCLowThresholdPercent(imageGCLowThresholdPercent)</code></li> <li><code>fn withKubeReserved(kubeReserved)</code></li> <li><code>fn withKubeReservedMixin(kubeReserved)</code></li> <li><code>fn withMaxPods(maxPods)</code></li> <li><code>fn withPodsPerCore(podsPerCore)</code></li> <li><code>fn withSystemReserved(systemReserved)</code></li> <li><code>fn withSystemReservedMixin(systemReserved)</code></li> </ul> </li> <li><code>obj spec.limits</code><ul> <li><code>fn withResources(resources)</code></li> <li><code>fn withResourcesMixin(resources)</code></li> </ul> </li> <li><code>obj spec.providerRef</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.requirements</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> <li><code>obj spec.startupTaints</code><ul> <li><code>fn withEffect(effect)</code></li> <li><code>fn withKey(key)</code></li> <li><code>fn withTimeAdded(timeAdded)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.taints</code><ul> <li><code>fn withEffect(effect)</code></li> <li><code>fn withKey(key)</code></li> <li><code>fn withTimeAdded(timeAdded)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fields","title":"Fields","text":""},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of Provisioner</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#obj-spec","title":"obj spec","text":"<p>\"ProvisionerSpec is the top level provisioner specification. Provisioners launch nodes in response to pods that are unschedulable. A single provisioner is capable of managing a diverse set of nodes. Node properties are determined from a combination of provisioner and pod scheduling constraints.\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-specwithannotations","title":"fn spec.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations are applied to every node.\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-specwithannotationsmixin","title":"fn spec.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations are applied to every node.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-specwithlabels","title":"fn spec.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Labels are layered with Requirements and applied to every node.\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-specwithlabelsmixin","title":"fn spec.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Labels are layered with Requirements and applied to every node.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-specwithprovider","title":"fn spec.withProvider","text":"<pre><code>withProvider(provider)\n</code></pre> <p>\"Provider contains fields specific to your cloudprovider.\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-specwithprovidermixin","title":"fn spec.withProviderMixin","text":"<pre><code>withProviderMixin(provider)\n</code></pre> <p>\"Provider contains fields specific to your cloudprovider.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-specwithrequirements","title":"fn spec.withRequirements","text":"<pre><code>withRequirements(requirements)\n</code></pre> <p>\"Requirements are layered with Labels and applied to every node.\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-specwithrequirementsmixin","title":"fn spec.withRequirementsMixin","text":"<pre><code>withRequirementsMixin(requirements)\n</code></pre> <p>\"Requirements are layered with Labels and applied to every node.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-specwithstartuptaints","title":"fn spec.withStartupTaints","text":"<pre><code>withStartupTaints(startupTaints)\n</code></pre> <p>\"StartupTaints are taints that are applied to nodes upon startup which are expected to be removed automatically within a short period of time, typically by a DaemonSet that tolerates the taint. These are commonly used by daemonsets to allow initialization and enforce startup ordering.  StartupTaints are ignored for provisioning purposes in that pods are not required to tolerate a StartupTaint in order to have nodes provisioned for them.\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-specwithstartuptaintsmixin","title":"fn spec.withStartupTaintsMixin","text":"<pre><code>withStartupTaintsMixin(startupTaints)\n</code></pre> <p>\"StartupTaints are taints that are applied to nodes upon startup which are expected to be removed automatically within a short period of time, typically by a DaemonSet that tolerates the taint. These are commonly used by daemonsets to allow initialization and enforce startup ordering.  StartupTaints are ignored for provisioning purposes in that pods are not required to tolerate a StartupTaint in order to have nodes provisioned for them.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-specwithtaints","title":"fn spec.withTaints","text":"<pre><code>withTaints(taints)\n</code></pre> <p>\"Taints will be applied to every node launched by the Provisioner. If specified, the provisioner will not provision nodes for pods that do not have matching tolerations. Additional taints will be created that match pod tolerations on a per-node basis.\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-specwithtaintsmixin","title":"fn spec.withTaintsMixin","text":"<pre><code>withTaintsMixin(taints)\n</code></pre> <p>\"Taints will be applied to every node launched by the Provisioner. If specified, the provisioner will not provision nodes for pods that do not have matching tolerations. Additional taints will be created that match pod tolerations on a per-node basis.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-specwithttlsecondsafterempty","title":"fn spec.withTtlSecondsAfterEmpty","text":"<pre><code>withTtlSecondsAfterEmpty(ttlSecondsAfterEmpty)\n</code></pre> <p>\"TTLSecondsAfterEmpty is the number of seconds the controller will wait before attempting to delete a node, measured from when the node is detected to be empty. A Node is considered to be empty when it does not have pods scheduled to it, excluding daemonsets. \\n Termination due to no utilization is disabled if this field is not set.\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-specwithttlsecondsuntilexpired","title":"fn spec.withTtlSecondsUntilExpired","text":"<pre><code>withTtlSecondsUntilExpired(ttlSecondsUntilExpired)\n</code></pre> <p>\"TTLSecondsUntilExpired is the number of seconds the controller will wait before terminating a node, measured from when the node is created. This is useful to implement features like eventually consistent node upgrade, memory leak protection, and disruption testing. \\n Termination due to expiration is disabled if this field is not set.\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-specwithweight","title":"fn spec.withWeight","text":"<pre><code>withWeight(weight)\n</code></pre> <p>\"Weight is the priority given to the provisioner during scheduling. A higher numerical weight indicates that this provisioner will be ordered ahead of other provisioners with lower weights. A provisioner with no weight will be treated as if it is a provisioner with a weight of 0.\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#obj-specconsolidation","title":"obj spec.consolidation","text":"<p>\"Consolidation are the consolidation parameters\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-specconsolidationwithenabled","title":"fn spec.consolidation.withEnabled","text":"<pre><code>withEnabled(enabled)\n</code></pre> <p>\"Enabled enables consolidation if it has been set\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#obj-speckubeletconfiguration","title":"obj spec.kubeletConfiguration","text":"<p>\"KubeletConfiguration are options passed to the kubelet when provisioning nodes\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithclusterdns","title":"fn spec.kubeletConfiguration.withClusterDNS","text":"<pre><code>withClusterDNS(clusterDNS)\n</code></pre> <p>\"clusterDNS is a list of IP addresses for the cluster DNS server. Note that not all providers may use all addresses.\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithclusterdnsmixin","title":"fn spec.kubeletConfiguration.withClusterDNSMixin","text":"<pre><code>withClusterDNSMixin(clusterDNS)\n</code></pre> <p>\"clusterDNS is a list of IP addresses for the cluster DNS server. Note that not all providers may use all addresses.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithcontainerruntime","title":"fn spec.kubeletConfiguration.withContainerRuntime","text":"<pre><code>withContainerRuntime(containerRuntime)\n</code></pre> <p>\"ContainerRuntime is the container runtime to be used with your worker nodes.\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithcpucfsquota","title":"fn spec.kubeletConfiguration.withCpuCFSQuota","text":"<pre><code>withCpuCFSQuota(cpuCFSQuota)\n</code></pre> <p>\"CPUCFSQuota enables CPU CFS quota enforcement for containers that specify CPU limits.\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithevictionhard","title":"fn spec.kubeletConfiguration.withEvictionHard","text":"<pre><code>withEvictionHard(evictionHard)\n</code></pre> <p>\"EvictionHard is the map of signal names to quantities that define hard eviction thresholds\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithevictionhardmixin","title":"fn spec.kubeletConfiguration.withEvictionHardMixin","text":"<pre><code>withEvictionHardMixin(evictionHard)\n</code></pre> <p>\"EvictionHard is the map of signal names to quantities that define hard eviction thresholds\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithevictionmaxpodgraceperiod","title":"fn spec.kubeletConfiguration.withEvictionMaxPodGracePeriod","text":"<pre><code>withEvictionMaxPodGracePeriod(evictionMaxPodGracePeriod)\n</code></pre> <p>\"EvictionMaxPodGracePeriod is the maximum allowed grace period (in seconds) to use when terminating pods in response to soft eviction thresholds being met.\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithevictionsoft","title":"fn spec.kubeletConfiguration.withEvictionSoft","text":"<pre><code>withEvictionSoft(evictionSoft)\n</code></pre> <p>\"EvictionSoft is the map of signal names to quantities that define soft eviction thresholds\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithevictionsoftgraceperiod","title":"fn spec.kubeletConfiguration.withEvictionSoftGracePeriod","text":"<pre><code>withEvictionSoftGracePeriod(evictionSoftGracePeriod)\n</code></pre> <p>\"EvictionSoftGracePeriod is the map of signal names to quantities that define grace periods for each eviction signal\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithevictionsoftgraceperiodmixin","title":"fn spec.kubeletConfiguration.withEvictionSoftGracePeriodMixin","text":"<pre><code>withEvictionSoftGracePeriodMixin(evictionSoftGracePeriod)\n</code></pre> <p>\"EvictionSoftGracePeriod is the map of signal names to quantities that define grace periods for each eviction signal\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithevictionsoftmixin","title":"fn spec.kubeletConfiguration.withEvictionSoftMixin","text":"<pre><code>withEvictionSoftMixin(evictionSoft)\n</code></pre> <p>\"EvictionSoft is the map of signal names to quantities that define soft eviction thresholds\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithimagegchighthresholdpercent","title":"fn spec.kubeletConfiguration.withImageGCHighThresholdPercent","text":"<pre><code>withImageGCHighThresholdPercent(imageGCHighThresholdPercent)\n</code></pre> <p>\"ImageGCHighThresholdPercent is the percent of disk usage after which image garbage collection is always run. The percent is calculated by dividing this field value by 100, so this field must be between 0 and 100, inclusive. When specified, the value must be greater than ImageGCLowThresholdPercent.\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithimagegclowthresholdpercent","title":"fn spec.kubeletConfiguration.withImageGCLowThresholdPercent","text":"<pre><code>withImageGCLowThresholdPercent(imageGCLowThresholdPercent)\n</code></pre> <p>\"ImageGCLowThresholdPercent is the percent of disk usage before which image garbage collection is never run. Lowest disk usage to garbage collect to. The percent is calculated by dividing this field value by 100, so the field value must be between 0 and 100, inclusive. When specified, the value must be less than imageGCHighThresholdPercent\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithkubereserved","title":"fn spec.kubeletConfiguration.withKubeReserved","text":"<pre><code>withKubeReserved(kubeReserved)\n</code></pre> <p>\"KubeReserved contains resources reserved for Kubernetes system components.\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithkubereservedmixin","title":"fn spec.kubeletConfiguration.withKubeReservedMixin","text":"<pre><code>withKubeReservedMixin(kubeReserved)\n</code></pre> <p>\"KubeReserved contains resources reserved for Kubernetes system components.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithmaxpods","title":"fn spec.kubeletConfiguration.withMaxPods","text":"<pre><code>withMaxPods(maxPods)\n</code></pre> <p>\"MaxPods is an override for the maximum number of pods that can run on a worker node instance.\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithpodspercore","title":"fn spec.kubeletConfiguration.withPodsPerCore","text":"<pre><code>withPodsPerCore(podsPerCore)\n</code></pre> <p>\"PodsPerCore is an override for the number of pods that can run on a worker node instance based on the number of cpu cores. This value cannot exceed MaxPods, so, if MaxPods is a lower value, that value will be used.\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithsystemreserved","title":"fn spec.kubeletConfiguration.withSystemReserved","text":"<pre><code>withSystemReserved(systemReserved)\n</code></pre> <p>\"SystemReserved contains resources reserved for OS system daemons and kernel memory.\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-speckubeletconfigurationwithsystemreservedmixin","title":"fn spec.kubeletConfiguration.withSystemReservedMixin","text":"<pre><code>withSystemReservedMixin(systemReserved)\n</code></pre> <p>\"SystemReserved contains resources reserved for OS system daemons and kernel memory.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#obj-speclimits","title":"obj spec.limits","text":"<p>\"Limits define a set of bounds for provisioning capacity.\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-speclimitswithresources","title":"fn spec.limits.withResources","text":"<pre><code>withResources(resources)\n</code></pre> <p>\"Resources contains all the allocatable resources that Karpenter supports for limiting.\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-speclimitswithresourcesmixin","title":"fn spec.limits.withResourcesMixin","text":"<pre><code>withResourcesMixin(resources)\n</code></pre> <p>\"Resources contains all the allocatable resources that Karpenter supports for limiting.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#obj-specproviderref","title":"obj spec.providerRef","text":"<p>\"ProviderRef is a reference to a dedicated CRD for the chosen provider, that holds additional configuration options\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-specproviderrefwithapiversion","title":"fn spec.providerRef.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"API version of the referent\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-specproviderrefwithkind","title":"fn spec.providerRef.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\\</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-specproviderrefwithname","title":"fn spec.providerRef.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#obj-specrequirements","title":"obj spec.requirements","text":"<p>\"Requirements are layered with Labels and applied to every node.\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-specrequirementswithkey","title":"fn spec.requirements.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"The label key that the selector applies to.\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-specrequirementswithoperator","title":"fn spec.requirements.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-specrequirementswithvalues","title":"fn spec.requirements.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-specrequirementswithvaluesmixin","title":"fn spec.requirements.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#obj-specstartuptaints","title":"obj spec.startupTaints","text":"<p>\"StartupTaints are taints that are applied to nodes upon startup which are expected to be removed automatically within a short period of time, typically by a DaemonSet that tolerates the taint. These are commonly used by daemonsets to allow initialization and enforce startup ordering.  StartupTaints are ignored for provisioning purposes in that pods are not required to tolerate a StartupTaint in order to have nodes provisioned for them.\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-specstartuptaintswitheffect","title":"fn spec.startupTaints.withEffect","text":"<pre><code>withEffect(effect)\n</code></pre> <p>\"Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-specstartuptaintswithkey","title":"fn spec.startupTaints.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Required. The taint key to be applied to a node.\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-specstartuptaintswithtimeadded","title":"fn spec.startupTaints.withTimeAdded","text":"<pre><code>withTimeAdded(timeAdded)\n</code></pre> <p>\"TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-specstartuptaintswithvalue","title":"fn spec.startupTaints.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"The taint value corresponding to the taint key.\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#obj-spectaints","title":"obj spec.taints","text":"<p>\"Taints will be applied to every node launched by the Provisioner. If specified, the provisioner will not provision nodes for pods that do not have matching tolerations. Additional taints will be created that match pod tolerations on a per-node basis.\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-spectaintswitheffect","title":"fn spec.taints.withEffect","text":"<pre><code>withEffect(effect)\n</code></pre> <p>\"Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-spectaintswithkey","title":"fn spec.taints.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Required. The taint key to be applied to a node.\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-spectaintswithtimeadded","title":"fn spec.taints.withTimeAdded","text":"<pre><code>withTimeAdded(timeAdded)\n</code></pre> <p>\"TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.\"</p>"},{"location":"0.32/sh/karpenter/v1alpha5/provisioner/#fn-spectaintswithvalue","title":"fn spec.taints.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"The taint value corresponding to the taint key.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/","title":"karpenter.v1beta1","text":"<ul> <li>nodeClaim</li> <li>nodePool</li> </ul>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/","title":"karpenter.v1beta1.nodeClaim","text":"<p>\"NodeClaim is the Schema for the NodeClaims API\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withRequirements(requirements)</code></li> <li><code>fn withRequirementsMixin(requirements)</code></li> <li><code>fn withStartupTaints(startupTaints)</code></li> <li><code>fn withStartupTaintsMixin(startupTaints)</code></li> <li><code>fn withTaints(taints)</code></li> <li><code>fn withTaintsMixin(taints)</code></li> <li><code>obj spec.kubelet</code><ul> <li><code>fn withClusterDNS(clusterDNS)</code></li> <li><code>fn withClusterDNSMixin(clusterDNS)</code></li> <li><code>fn withCpuCFSQuota(cpuCFSQuota)</code></li> <li><code>fn withEvictionHard(evictionHard)</code></li> <li><code>fn withEvictionHardMixin(evictionHard)</code></li> <li><code>fn withEvictionMaxPodGracePeriod(evictionMaxPodGracePeriod)</code></li> <li><code>fn withEvictionSoft(evictionSoft)</code></li> <li><code>fn withEvictionSoftGracePeriod(evictionSoftGracePeriod)</code></li> <li><code>fn withEvictionSoftGracePeriodMixin(evictionSoftGracePeriod)</code></li> <li><code>fn withEvictionSoftMixin(evictionSoft)</code></li> <li><code>fn withImageGCHighThresholdPercent(imageGCHighThresholdPercent)</code></li> <li><code>fn withImageGCLowThresholdPercent(imageGCLowThresholdPercent)</code></li> <li><code>fn withKubeReserved(kubeReserved)</code></li> <li><code>fn withKubeReservedMixin(kubeReserved)</code></li> <li><code>fn withMaxPods(maxPods)</code></li> <li><code>fn withPodsPerCore(podsPerCore)</code></li> <li><code>fn withSystemReserved(systemReserved)</code></li> <li><code>fn withSystemReservedMixin(systemReserved)</code></li> </ul> </li> <li><code>obj spec.nodeClassRef</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.requirements</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> <li><code>obj spec.resources</code><ul> <li><code>fn withRequests(requests)</code></li> <li><code>fn withRequestsMixin(requests)</code></li> </ul> </li> <li><code>obj spec.startupTaints</code><ul> <li><code>fn withEffect(effect)</code></li> <li><code>fn withKey(key)</code></li> <li><code>fn withTimeAdded(timeAdded)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.taints</code><ul> <li><code>fn withEffect(effect)</code></li> <li><code>fn withKey(key)</code></li> <li><code>fn withTimeAdded(timeAdded)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fields","title":"Fields","text":""},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of NodeClaim</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#obj-spec","title":"obj spec","text":"<p>\"NodeClaimSpec describes the desired state of the NodeClaim\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-specwithrequirements","title":"fn spec.withRequirements","text":"<pre><code>withRequirements(requirements)\n</code></pre> <p>\"Requirements are layered with GetLabels and applied to every node.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-specwithrequirementsmixin","title":"fn spec.withRequirementsMixin","text":"<pre><code>withRequirementsMixin(requirements)\n</code></pre> <p>\"Requirements are layered with GetLabels and applied to every node.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-specwithstartuptaints","title":"fn spec.withStartupTaints","text":"<pre><code>withStartupTaints(startupTaints)\n</code></pre> <p>\"StartupTaints are taints that are applied to nodes upon startup which are expected to be removed automatically within a short period of time, typically by a DaemonSet that tolerates the taint. These are commonly used by daemonsets to allow initialization and enforce startup ordering.  StartupTaints are ignored for provisioning purposes in that pods are not required to tolerate a StartupTaint in order to have nodes provisioned for them.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-specwithstartuptaintsmixin","title":"fn spec.withStartupTaintsMixin","text":"<pre><code>withStartupTaintsMixin(startupTaints)\n</code></pre> <p>\"StartupTaints are taints that are applied to nodes upon startup which are expected to be removed automatically within a short period of time, typically by a DaemonSet that tolerates the taint. These are commonly used by daemonsets to allow initialization and enforce startup ordering.  StartupTaints are ignored for provisioning purposes in that pods are not required to tolerate a StartupTaint in order to have nodes provisioned for them.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-specwithtaints","title":"fn spec.withTaints","text":"<pre><code>withTaints(taints)\n</code></pre> <p>\"Taints will be applied to the NodeClaim's node.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-specwithtaintsmixin","title":"fn spec.withTaintsMixin","text":"<pre><code>withTaintsMixin(taints)\n</code></pre> <p>\"Taints will be applied to the NodeClaim's node.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#obj-speckubelet","title":"obj spec.kubelet","text":"<p>\"Kubelet defines args to be used when configuring kubelet on provisioned nodes. They are a subset of the upstream types, recognizing not all options may be supported. Wherever possible, the types and names should reflect the upstream kubelet types.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithclusterdns","title":"fn spec.kubelet.withClusterDNS","text":"<pre><code>withClusterDNS(clusterDNS)\n</code></pre> <p>\"clusterDNS is a list of IP addresses for the cluster DNS server. Note that not all providers may use all addresses.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithclusterdnsmixin","title":"fn spec.kubelet.withClusterDNSMixin","text":"<pre><code>withClusterDNSMixin(clusterDNS)\n</code></pre> <p>\"clusterDNS is a list of IP addresses for the cluster DNS server. Note that not all providers may use all addresses.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithcpucfsquota","title":"fn spec.kubelet.withCpuCFSQuota","text":"<pre><code>withCpuCFSQuota(cpuCFSQuota)\n</code></pre> <p>\"CPUCFSQuota enables CPU CFS quota enforcement for containers that specify CPU limits.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithevictionhard","title":"fn spec.kubelet.withEvictionHard","text":"<pre><code>withEvictionHard(evictionHard)\n</code></pre> <p>\"EvictionHard is the map of signal names to quantities that define hard eviction thresholds\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithevictionhardmixin","title":"fn spec.kubelet.withEvictionHardMixin","text":"<pre><code>withEvictionHardMixin(evictionHard)\n</code></pre> <p>\"EvictionHard is the map of signal names to quantities that define hard eviction thresholds\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithevictionmaxpodgraceperiod","title":"fn spec.kubelet.withEvictionMaxPodGracePeriod","text":"<pre><code>withEvictionMaxPodGracePeriod(evictionMaxPodGracePeriod)\n</code></pre> <p>\"EvictionMaxPodGracePeriod is the maximum allowed grace period (in seconds) to use when terminating pods in response to soft eviction thresholds being met.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithevictionsoft","title":"fn spec.kubelet.withEvictionSoft","text":"<pre><code>withEvictionSoft(evictionSoft)\n</code></pre> <p>\"EvictionSoft is the map of signal names to quantities that define soft eviction thresholds\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithevictionsoftgraceperiod","title":"fn spec.kubelet.withEvictionSoftGracePeriod","text":"<pre><code>withEvictionSoftGracePeriod(evictionSoftGracePeriod)\n</code></pre> <p>\"EvictionSoftGracePeriod is the map of signal names to quantities that define grace periods for each eviction signal\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithevictionsoftgraceperiodmixin","title":"fn spec.kubelet.withEvictionSoftGracePeriodMixin","text":"<pre><code>withEvictionSoftGracePeriodMixin(evictionSoftGracePeriod)\n</code></pre> <p>\"EvictionSoftGracePeriod is the map of signal names to quantities that define grace periods for each eviction signal\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithevictionsoftmixin","title":"fn spec.kubelet.withEvictionSoftMixin","text":"<pre><code>withEvictionSoftMixin(evictionSoft)\n</code></pre> <p>\"EvictionSoft is the map of signal names to quantities that define soft eviction thresholds\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithimagegchighthresholdpercent","title":"fn spec.kubelet.withImageGCHighThresholdPercent","text":"<pre><code>withImageGCHighThresholdPercent(imageGCHighThresholdPercent)\n</code></pre> <p>\"ImageGCHighThresholdPercent is the percent of disk usage after which image garbage collection is always run. The percent is calculated by dividing this field value by 100, so this field must be between 0 and 100, inclusive. When specified, the value must be greater than ImageGCLowThresholdPercent.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithimagegclowthresholdpercent","title":"fn spec.kubelet.withImageGCLowThresholdPercent","text":"<pre><code>withImageGCLowThresholdPercent(imageGCLowThresholdPercent)\n</code></pre> <p>\"ImageGCLowThresholdPercent is the percent of disk usage before which image garbage collection is never run. Lowest disk usage to garbage collect to. The percent is calculated by dividing this field value by 100, so the field value must be between 0 and 100, inclusive. When specified, the value must be less than imageGCHighThresholdPercent\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithkubereserved","title":"fn spec.kubelet.withKubeReserved","text":"<pre><code>withKubeReserved(kubeReserved)\n</code></pre> <p>\"KubeReserved contains resources reserved for Kubernetes system components.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithkubereservedmixin","title":"fn spec.kubelet.withKubeReservedMixin","text":"<pre><code>withKubeReservedMixin(kubeReserved)\n</code></pre> <p>\"KubeReserved contains resources reserved for Kubernetes system components.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithmaxpods","title":"fn spec.kubelet.withMaxPods","text":"<pre><code>withMaxPods(maxPods)\n</code></pre> <p>\"MaxPods is an override for the maximum number of pods that can run on a worker node instance.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithpodspercore","title":"fn spec.kubelet.withPodsPerCore","text":"<pre><code>withPodsPerCore(podsPerCore)\n</code></pre> <p>\"PodsPerCore is an override for the number of pods that can run on a worker node instance based on the number of cpu cores. This value cannot exceed MaxPods, so, if MaxPods is a lower value, that value will be used.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithsystemreserved","title":"fn spec.kubelet.withSystemReserved","text":"<pre><code>withSystemReserved(systemReserved)\n</code></pre> <p>\"SystemReserved contains resources reserved for OS system daemons and kernel memory.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithsystemreservedmixin","title":"fn spec.kubelet.withSystemReservedMixin","text":"<pre><code>withSystemReservedMixin(systemReserved)\n</code></pre> <p>\"SystemReserved contains resources reserved for OS system daemons and kernel memory.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#obj-specnodeclassref","title":"obj spec.nodeClassRef","text":"<p>\"NodeClassRef is a reference to an object that defines provider specific configuration\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-specnodeclassrefwithapiversion","title":"fn spec.nodeClassRef.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"API version of the referent\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-specnodeclassrefwithkind","title":"fn spec.nodeClassRef.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\\</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-specnodeclassrefwithname","title":"fn spec.nodeClassRef.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#obj-specrequirements","title":"obj spec.requirements","text":"<p>\"Requirements are layered with GetLabels and applied to every node.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-specrequirementswithkey","title":"fn spec.requirements.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"The label key that the selector applies to.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-specrequirementswithoperator","title":"fn spec.requirements.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-specrequirementswithvalues","title":"fn spec.requirements.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-specrequirementswithvaluesmixin","title":"fn spec.requirements.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#obj-specresources","title":"obj spec.resources","text":"<p>\"Resources models the resource requirements for the NodeClaim to launch\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-specresourceswithrequests","title":"fn spec.resources.withRequests","text":"<pre><code>withRequests(requests)\n</code></pre> <p>\"Requests describes the minimum required resources for the NodeClaim to launch\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-specresourceswithrequestsmixin","title":"fn spec.resources.withRequestsMixin","text":"<pre><code>withRequestsMixin(requests)\n</code></pre> <p>\"Requests describes the minimum required resources for the NodeClaim to launch\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#obj-specstartuptaints","title":"obj spec.startupTaints","text":"<p>\"StartupTaints are taints that are applied to nodes upon startup which are expected to be removed automatically within a short period of time, typically by a DaemonSet that tolerates the taint. These are commonly used by daemonsets to allow initialization and enforce startup ordering.  StartupTaints are ignored for provisioning purposes in that pods are not required to tolerate a StartupTaint in order to have nodes provisioned for them.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-specstartuptaintswitheffect","title":"fn spec.startupTaints.withEffect","text":"<pre><code>withEffect(effect)\n</code></pre> <p>\"Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-specstartuptaintswithkey","title":"fn spec.startupTaints.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Required. The taint key to be applied to a node.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-specstartuptaintswithtimeadded","title":"fn spec.startupTaints.withTimeAdded","text":"<pre><code>withTimeAdded(timeAdded)\n</code></pre> <p>\"TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-specstartuptaintswithvalue","title":"fn spec.startupTaints.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"The taint value corresponding to the taint key.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#obj-spectaints","title":"obj spec.taints","text":"<p>\"Taints will be applied to the NodeClaim's node.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-spectaintswitheffect","title":"fn spec.taints.withEffect","text":"<pre><code>withEffect(effect)\n</code></pre> <p>\"Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-spectaintswithkey","title":"fn spec.taints.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Required. The taint key to be applied to a node.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-spectaintswithtimeadded","title":"fn spec.taints.withTimeAdded","text":"<pre><code>withTimeAdded(timeAdded)\n</code></pre> <p>\"TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodeClaim/#fn-spectaintswithvalue","title":"fn spec.taints.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"The taint value corresponding to the taint key.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/","title":"karpenter.v1beta1.nodePool","text":"<p>\"NodePool is the Schema for the NodePools API\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withLimits(limits)</code></li> <li><code>fn withLimitsMixin(limits)</code></li> <li><code>fn withWeight(weight)</code></li> <li><code>obj spec.disruption</code><ul> <li><code>fn withConsolidateAfter(consolidateAfter)</code></li> <li><code>fn withConsolidationPolicy(consolidationPolicy)</code></li> <li><code>fn withExpireAfter(expireAfter)</code></li> </ul> </li> <li><code>obj spec.template</code><ul> <li><code>obj spec.template.metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> </ul> </li> <li><code>obj spec.template.spec</code><ul> <li><code>fn withRequirements(requirements)</code></li> <li><code>fn withRequirementsMixin(requirements)</code></li> <li><code>fn withStartupTaints(startupTaints)</code></li> <li><code>fn withStartupTaintsMixin(startupTaints)</code></li> <li><code>fn withTaints(taints)</code></li> <li><code>fn withTaintsMixin(taints)</code></li> <li><code>obj spec.template.spec.kubelet</code><ul> <li><code>fn withClusterDNS(clusterDNS)</code></li> <li><code>fn withClusterDNSMixin(clusterDNS)</code></li> <li><code>fn withCpuCFSQuota(cpuCFSQuota)</code></li> <li><code>fn withEvictionHard(evictionHard)</code></li> <li><code>fn withEvictionHardMixin(evictionHard)</code></li> <li><code>fn withEvictionMaxPodGracePeriod(evictionMaxPodGracePeriod)</code></li> <li><code>fn withEvictionSoft(evictionSoft)</code></li> <li><code>fn withEvictionSoftGracePeriod(evictionSoftGracePeriod)</code></li> <li><code>fn withEvictionSoftGracePeriodMixin(evictionSoftGracePeriod)</code></li> <li><code>fn withEvictionSoftMixin(evictionSoft)</code></li> <li><code>fn withImageGCHighThresholdPercent(imageGCHighThresholdPercent)</code></li> <li><code>fn withImageGCLowThresholdPercent(imageGCLowThresholdPercent)</code></li> <li><code>fn withKubeReserved(kubeReserved)</code></li> <li><code>fn withKubeReservedMixin(kubeReserved)</code></li> <li><code>fn withMaxPods(maxPods)</code></li> <li><code>fn withPodsPerCore(podsPerCore)</code></li> <li><code>fn withSystemReserved(systemReserved)</code></li> <li><code>fn withSystemReservedMixin(systemReserved)</code></li> </ul> </li> <li><code>obj spec.template.spec.nodeClassRef</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.template.spec.requirements</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> <li><code>obj spec.template.spec.resources</code><ul> <li><code>fn withRequests(requests)</code></li> <li><code>fn withRequestsMixin(requests)</code></li> </ul> </li> <li><code>obj spec.template.spec.startupTaints</code><ul> <li><code>fn withEffect(effect)</code></li> <li><code>fn withKey(key)</code></li> <li><code>fn withTimeAdded(timeAdded)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.template.spec.taints</code><ul> <li><code>fn withEffect(effect)</code></li> <li><code>fn withKey(key)</code></li> <li><code>fn withTimeAdded(timeAdded)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fields","title":"Fields","text":""},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of NodePool</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#obj-spec","title":"obj spec","text":"<p>\"NodePoolSpec is the top level provisioner specification. Provisioners launch nodes in response to pods that are unschedulable. A single provisioner is capable of managing a diverse set of nodes. Node properties are determined from a combination of provisioner and pod scheduling constraints.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-specwithlimits","title":"fn spec.withLimits","text":"<pre><code>withLimits(limits)\n</code></pre> <p>\"Limits define a set of bounds for provisioning capacity.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-specwithlimitsmixin","title":"fn spec.withLimitsMixin","text":"<pre><code>withLimitsMixin(limits)\n</code></pre> <p>\"Limits define a set of bounds for provisioning capacity.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-specwithweight","title":"fn spec.withWeight","text":"<pre><code>withWeight(weight)\n</code></pre> <p>\"Weight is the priority given to the provisioner during scheduling. A higher numerical weight indicates that this provisioner will be ordered ahead of other provisioners with lower weights. A provisioner with no weight will be treated as if it is a provisioner with a weight of 0.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#obj-specdisruption","title":"obj spec.disruption","text":"<p>\"Disruption contains the parameters that relate to Karpenter's disruption logic\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-specdisruptionwithconsolidateafter","title":"fn spec.disruption.withConsolidateAfter","text":"<pre><code>withConsolidateAfter(consolidateAfter)\n</code></pre> <p>\"ConsolidateAfter is the duration the controller will wait before attempting to terminate nodes that are underutilized. Refer to ConsolidationPolicy for how underutilization is considered.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-specdisruptionwithconsolidationpolicy","title":"fn spec.disruption.withConsolidationPolicy","text":"<pre><code>withConsolidationPolicy(consolidationPolicy)\n</code></pre> <p>\"ConsolidationPolicy describes which nodes Karpenter can disrupt through its consolidation algorithm. This policy defaults to \\\"WhenUnderutilized\\\" if not specified\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-specdisruptionwithexpireafter","title":"fn spec.disruption.withExpireAfter","text":"<pre><code>withExpireAfter(expireAfter)\n</code></pre> <p>\"ExpireAfter is the duration the controller will wait before terminating a node, measured from when the node is created. This is useful to implement features like eventually consistent node upgrade, memory leak protection, and disruption testing.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#obj-spectemplate","title":"obj spec.template","text":"<p>\"Template contains the template of possibilities for the provisioning logic to launch a NodeClaim with. NodeClaims launched from this NodePool will often be further constrained than the template specifies.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#obj-spectemplatemetadata","title":"obj spec.template.metadata","text":""},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-spectemplatemetadatawithannotations","title":"fn spec.template.metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-spectemplatemetadatawithannotationsmixin","title":"fn spec.template.metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-spectemplatemetadatawithlabels","title":"fn spec.template.metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-spectemplatemetadatawithlabelsmixin","title":"fn spec.template.metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#obj-spectemplatespec","title":"obj spec.template.spec","text":"<p>\"NodeClaimSpec describes the desired state of the NodeClaim\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecwithrequirements","title":"fn spec.template.spec.withRequirements","text":"<pre><code>withRequirements(requirements)\n</code></pre> <p>\"Requirements are layered with GetLabels and applied to every node.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecwithrequirementsmixin","title":"fn spec.template.spec.withRequirementsMixin","text":"<pre><code>withRequirementsMixin(requirements)\n</code></pre> <p>\"Requirements are layered with GetLabels and applied to every node.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecwithstartuptaints","title":"fn spec.template.spec.withStartupTaints","text":"<pre><code>withStartupTaints(startupTaints)\n</code></pre> <p>\"StartupTaints are taints that are applied to nodes upon startup which are expected to be removed automatically within a short period of time, typically by a DaemonSet that tolerates the taint. These are commonly used by daemonsets to allow initialization and enforce startup ordering.  StartupTaints are ignored for provisioning purposes in that pods are not required to tolerate a StartupTaint in order to have nodes provisioned for them.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecwithstartuptaintsmixin","title":"fn spec.template.spec.withStartupTaintsMixin","text":"<pre><code>withStartupTaintsMixin(startupTaints)\n</code></pre> <p>\"StartupTaints are taints that are applied to nodes upon startup which are expected to be removed automatically within a short period of time, typically by a DaemonSet that tolerates the taint. These are commonly used by daemonsets to allow initialization and enforce startup ordering.  StartupTaints are ignored for provisioning purposes in that pods are not required to tolerate a StartupTaint in order to have nodes provisioned for them.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecwithtaints","title":"fn spec.template.spec.withTaints","text":"<pre><code>withTaints(taints)\n</code></pre> <p>\"Taints will be applied to the NodeClaim's node.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecwithtaintsmixin","title":"fn spec.template.spec.withTaintsMixin","text":"<pre><code>withTaintsMixin(taints)\n</code></pre> <p>\"Taints will be applied to the NodeClaim's node.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#obj-spectemplatespeckubelet","title":"obj spec.template.spec.kubelet","text":"<p>\"Kubelet defines args to be used when configuring kubelet on provisioned nodes. They are a subset of the upstream types, recognizing not all options may be supported. Wherever possible, the types and names should reflect the upstream kubelet types.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithclusterdns","title":"fn spec.template.spec.kubelet.withClusterDNS","text":"<pre><code>withClusterDNS(clusterDNS)\n</code></pre> <p>\"clusterDNS is a list of IP addresses for the cluster DNS server. Note that not all providers may use all addresses.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithclusterdnsmixin","title":"fn spec.template.spec.kubelet.withClusterDNSMixin","text":"<pre><code>withClusterDNSMixin(clusterDNS)\n</code></pre> <p>\"clusterDNS is a list of IP addresses for the cluster DNS server. Note that not all providers may use all addresses.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithcpucfsquota","title":"fn spec.template.spec.kubelet.withCpuCFSQuota","text":"<pre><code>withCpuCFSQuota(cpuCFSQuota)\n</code></pre> <p>\"CPUCFSQuota enables CPU CFS quota enforcement for containers that specify CPU limits.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithevictionhard","title":"fn spec.template.spec.kubelet.withEvictionHard","text":"<pre><code>withEvictionHard(evictionHard)\n</code></pre> <p>\"EvictionHard is the map of signal names to quantities that define hard eviction thresholds\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithevictionhardmixin","title":"fn spec.template.spec.kubelet.withEvictionHardMixin","text":"<pre><code>withEvictionHardMixin(evictionHard)\n</code></pre> <p>\"EvictionHard is the map of signal names to quantities that define hard eviction thresholds\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithevictionmaxpodgraceperiod","title":"fn spec.template.spec.kubelet.withEvictionMaxPodGracePeriod","text":"<pre><code>withEvictionMaxPodGracePeriod(evictionMaxPodGracePeriod)\n</code></pre> <p>\"EvictionMaxPodGracePeriod is the maximum allowed grace period (in seconds) to use when terminating pods in response to soft eviction thresholds being met.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithevictionsoft","title":"fn spec.template.spec.kubelet.withEvictionSoft","text":"<pre><code>withEvictionSoft(evictionSoft)\n</code></pre> <p>\"EvictionSoft is the map of signal names to quantities that define soft eviction thresholds\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithevictionsoftgraceperiod","title":"fn spec.template.spec.kubelet.withEvictionSoftGracePeriod","text":"<pre><code>withEvictionSoftGracePeriod(evictionSoftGracePeriod)\n</code></pre> <p>\"EvictionSoftGracePeriod is the map of signal names to quantities that define grace periods for each eviction signal\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithevictionsoftgraceperiodmixin","title":"fn spec.template.spec.kubelet.withEvictionSoftGracePeriodMixin","text":"<pre><code>withEvictionSoftGracePeriodMixin(evictionSoftGracePeriod)\n</code></pre> <p>\"EvictionSoftGracePeriod is the map of signal names to quantities that define grace periods for each eviction signal\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithevictionsoftmixin","title":"fn spec.template.spec.kubelet.withEvictionSoftMixin","text":"<pre><code>withEvictionSoftMixin(evictionSoft)\n</code></pre> <p>\"EvictionSoft is the map of signal names to quantities that define soft eviction thresholds\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithimagegchighthresholdpercent","title":"fn spec.template.spec.kubelet.withImageGCHighThresholdPercent","text":"<pre><code>withImageGCHighThresholdPercent(imageGCHighThresholdPercent)\n</code></pre> <p>\"ImageGCHighThresholdPercent is the percent of disk usage after which image garbage collection is always run. The percent is calculated by dividing this field value by 100, so this field must be between 0 and 100, inclusive. When specified, the value must be greater than ImageGCLowThresholdPercent.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithimagegclowthresholdpercent","title":"fn spec.template.spec.kubelet.withImageGCLowThresholdPercent","text":"<pre><code>withImageGCLowThresholdPercent(imageGCLowThresholdPercent)\n</code></pre> <p>\"ImageGCLowThresholdPercent is the percent of disk usage before which image garbage collection is never run. Lowest disk usage to garbage collect to. The percent is calculated by dividing this field value by 100, so the field value must be between 0 and 100, inclusive. When specified, the value must be less than imageGCHighThresholdPercent\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithkubereserved","title":"fn spec.template.spec.kubelet.withKubeReserved","text":"<pre><code>withKubeReserved(kubeReserved)\n</code></pre> <p>\"KubeReserved contains resources reserved for Kubernetes system components.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithkubereservedmixin","title":"fn spec.template.spec.kubelet.withKubeReservedMixin","text":"<pre><code>withKubeReservedMixin(kubeReserved)\n</code></pre> <p>\"KubeReserved contains resources reserved for Kubernetes system components.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithmaxpods","title":"fn spec.template.spec.kubelet.withMaxPods","text":"<pre><code>withMaxPods(maxPods)\n</code></pre> <p>\"MaxPods is an override for the maximum number of pods that can run on a worker node instance.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithpodspercore","title":"fn spec.template.spec.kubelet.withPodsPerCore","text":"<pre><code>withPodsPerCore(podsPerCore)\n</code></pre> <p>\"PodsPerCore is an override for the number of pods that can run on a worker node instance based on the number of cpu cores. This value cannot exceed MaxPods, so, if MaxPods is a lower value, that value will be used.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithsystemreserved","title":"fn spec.template.spec.kubelet.withSystemReserved","text":"<pre><code>withSystemReserved(systemReserved)\n</code></pre> <p>\"SystemReserved contains resources reserved for OS system daemons and kernel memory.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithsystemreservedmixin","title":"fn spec.template.spec.kubelet.withSystemReservedMixin","text":"<pre><code>withSystemReservedMixin(systemReserved)\n</code></pre> <p>\"SystemReserved contains resources reserved for OS system daemons and kernel memory.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#obj-spectemplatespecnodeclassref","title":"obj spec.template.spec.nodeClassRef","text":"<p>\"NodeClassRef is a reference to an object that defines provider specific configuration\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecnodeclassrefwithapiversion","title":"fn spec.template.spec.nodeClassRef.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"API version of the referent\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecnodeclassrefwithkind","title":"fn spec.template.spec.nodeClassRef.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\\</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecnodeclassrefwithname","title":"fn spec.template.spec.nodeClassRef.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#obj-spectemplatespecrequirements","title":"obj spec.template.spec.requirements","text":"<p>\"Requirements are layered with GetLabels and applied to every node.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecrequirementswithkey","title":"fn spec.template.spec.requirements.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"The label key that the selector applies to.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecrequirementswithoperator","title":"fn spec.template.spec.requirements.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecrequirementswithvalues","title":"fn spec.template.spec.requirements.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecrequirementswithvaluesmixin","title":"fn spec.template.spec.requirements.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#obj-spectemplatespecresources","title":"obj spec.template.spec.resources","text":"<p>\"Resources models the resource requirements for the NodeClaim to launch\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecresourceswithrequests","title":"fn spec.template.spec.resources.withRequests","text":"<pre><code>withRequests(requests)\n</code></pre> <p>\"Requests describes the minimum required resources for the NodeClaim to launch\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecresourceswithrequestsmixin","title":"fn spec.template.spec.resources.withRequestsMixin","text":"<pre><code>withRequestsMixin(requests)\n</code></pre> <p>\"Requests describes the minimum required resources for the NodeClaim to launch\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#obj-spectemplatespecstartuptaints","title":"obj spec.template.spec.startupTaints","text":"<p>\"StartupTaints are taints that are applied to nodes upon startup which are expected to be removed automatically within a short period of time, typically by a DaemonSet that tolerates the taint. These are commonly used by daemonsets to allow initialization and enforce startup ordering.  StartupTaints are ignored for provisioning purposes in that pods are not required to tolerate a StartupTaint in order to have nodes provisioned for them.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecstartuptaintswitheffect","title":"fn spec.template.spec.startupTaints.withEffect","text":"<pre><code>withEffect(effect)\n</code></pre> <p>\"Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecstartuptaintswithkey","title":"fn spec.template.spec.startupTaints.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Required. The taint key to be applied to a node.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecstartuptaintswithtimeadded","title":"fn spec.template.spec.startupTaints.withTimeAdded","text":"<pre><code>withTimeAdded(timeAdded)\n</code></pre> <p>\"TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecstartuptaintswithvalue","title":"fn spec.template.spec.startupTaints.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"The taint value corresponding to the taint key.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#obj-spectemplatespectaints","title":"obj spec.template.spec.taints","text":"<p>\"Taints will be applied to the NodeClaim's node.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespectaintswitheffect","title":"fn spec.template.spec.taints.withEffect","text":"<pre><code>withEffect(effect)\n</code></pre> <p>\"Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespectaintswithkey","title":"fn spec.template.spec.taints.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Required. The taint key to be applied to a node.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespectaintswithtimeadded","title":"fn spec.template.spec.taints.withTimeAdded","text":"<pre><code>withTimeAdded(timeAdded)\n</code></pre> <p>\"TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.\"</p>"},{"location":"0.32/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespectaintswithvalue","title":"fn spec.template.spec.taints.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"The taint value corresponding to the taint key.\"</p>"},{"location":"0.33/aws/","title":"karpenter","text":"<pre><code>local karpenter = import \"github.com/jsonnet-libs/karpenter-libsonnet/0.33/aws/main.libsonnet\"\n</code></pre> <ul> <li>karpenter</li> </ul>"},{"location":"0.33/aws/karpenter/","title":"karpenter","text":"<ul> <li>v1beta1</li> </ul>"},{"location":"0.33/aws/karpenter/v1beta1/","title":"karpenter.v1beta1","text":"<ul> <li>ec2NodeClass</li> </ul>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/","title":"karpenter.v1beta1.ec2NodeClass","text":"<p>\"EC2NodeClass is the Schema for the EC2NodeClass API\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withAmiFamily(amiFamily)</code></li> <li><code>fn withAmiSelectorTerms(amiSelectorTerms)</code></li> <li><code>fn withAmiSelectorTermsMixin(amiSelectorTerms)</code></li> <li><code>fn withBlockDeviceMappings(blockDeviceMappings)</code></li> <li><code>fn withBlockDeviceMappingsMixin(blockDeviceMappings)</code></li> <li><code>fn withContext(context)</code></li> <li><code>fn withDetailedMonitoring(detailedMonitoring)</code></li> <li><code>fn withInstanceProfile(instanceProfile)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withSecurityGroupSelectorTerms(securityGroupSelectorTerms)</code></li> <li><code>fn withSecurityGroupSelectorTermsMixin(securityGroupSelectorTerms)</code></li> <li><code>fn withSubnetSelectorTerms(subnetSelectorTerms)</code></li> <li><code>fn withSubnetSelectorTermsMixin(subnetSelectorTerms)</code></li> <li><code>fn withTags(tags)</code></li> <li><code>fn withTagsMixin(tags)</code></li> <li><code>fn withUserData(userData)</code></li> <li><code>obj spec.amiSelectorTerms</code><ul> <li><code>fn withId(id)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withOwner(owner)</code></li> <li><code>fn withTags(tags)</code></li> <li><code>fn withTagsMixin(tags)</code></li> </ul> </li> <li><code>obj spec.blockDeviceMappings</code><ul> <li><code>fn withDeviceName(deviceName)</code></li> <li><code>fn withRootVolume(rootVolume)</code></li> <li><code>obj spec.blockDeviceMappings.ebs</code><ul> <li><code>fn withDeleteOnTermination(deleteOnTermination)</code></li> <li><code>fn withEncrypted(encrypted)</code></li> <li><code>fn withIops(iops)</code></li> <li><code>fn withKmsKeyID(kmsKeyID)</code></li> <li><code>fn withSnapshotID(snapshotID)</code></li> <li><code>fn withThroughput(throughput)</code></li> <li><code>fn withVolumeSize(volumeSize)</code></li> <li><code>fn withVolumeType(volumeType)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.metadataOptions</code><ul> <li><code>fn withHttpEndpoint(httpEndpoint)</code></li> <li><code>fn withHttpProtocolIPv6(httpProtocolIPv6)</code></li> <li><code>fn withHttpPutResponseHopLimit(httpPutResponseHopLimit)</code></li> <li><code>fn withHttpTokens(httpTokens)</code></li> </ul> </li> <li><code>obj spec.securityGroupSelectorTerms</code><ul> <li><code>fn withId(id)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withTags(tags)</code></li> <li><code>fn withTagsMixin(tags)</code></li> </ul> </li> <li><code>obj spec.subnetSelectorTerms</code><ul> <li><code>fn withId(id)</code></li> <li><code>fn withTags(tags)</code></li> <li><code>fn withTagsMixin(tags)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fields","title":"Fields","text":""},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of EC2NodeClass</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#obj-spec","title":"obj spec","text":"<p>\"EC2NodeClassSpec is the top level specification for the AWS Karpenter Provider. This will contain configuration necessary to launch instances in AWS.\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithamifamily","title":"fn spec.withAmiFamily","text":"<pre><code>withAmiFamily(amiFamily)\n</code></pre> <p>\"AMIFamily is the AMI family that instances use.\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithamiselectorterms","title":"fn spec.withAmiSelectorTerms","text":"<pre><code>withAmiSelectorTerms(amiSelectorTerms)\n</code></pre> <p>\"AMISelectorTerms is a list of or ami selector terms. The terms are ORed.\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithamiselectortermsmixin","title":"fn spec.withAmiSelectorTermsMixin","text":"<pre><code>withAmiSelectorTermsMixin(amiSelectorTerms)\n</code></pre> <p>\"AMISelectorTerms is a list of or ami selector terms. The terms are ORed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithblockdevicemappings","title":"fn spec.withBlockDeviceMappings","text":"<pre><code>withBlockDeviceMappings(blockDeviceMappings)\n</code></pre> <p>\"BlockDeviceMappings to be applied to provisioned nodes.\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithblockdevicemappingsmixin","title":"fn spec.withBlockDeviceMappingsMixin","text":"<pre><code>withBlockDeviceMappingsMixin(blockDeviceMappings)\n</code></pre> <p>\"BlockDeviceMappings to be applied to provisioned nodes.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithcontext","title":"fn spec.withContext","text":"<pre><code>withContext(context)\n</code></pre> <p>\"Context is a Reserved field in EC2 APIs https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet.html\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithdetailedmonitoring","title":"fn spec.withDetailedMonitoring","text":"<pre><code>withDetailedMonitoring(detailedMonitoring)\n</code></pre> <p>\"DetailedMonitoring controls if detailed monitoring is enabled for instances that are launched\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithinstanceprofile","title":"fn spec.withInstanceProfile","text":"<pre><code>withInstanceProfile(instanceProfile)\n</code></pre> <p>\"InstanceProfile is the AWS entity that instances use. This field is mutually exclusive from role. The instance profile should already have a role assigned to it that Karpenter has PassRole permission on for instance launch using this instanceProfile to succeed.\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithrole","title":"fn spec.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role is the AWS identity that nodes use. This field is immutable. This field is mutually exclusive from instanceProfile. Marking this field as immutable avoids concerns around terminating managed instance profiles from running instances. This field may be made mutable in the future, assuming the correct garbage collection and drift handling is implemented for the old instance profiles on an update.\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithsecuritygroupselectorterms","title":"fn spec.withSecurityGroupSelectorTerms","text":"<pre><code>withSecurityGroupSelectorTerms(securityGroupSelectorTerms)\n</code></pre> <p>\"SecurityGroupSelectorTerms is a list of or security group selector terms. The terms are ORed.\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithsecuritygroupselectortermsmixin","title":"fn spec.withSecurityGroupSelectorTermsMixin","text":"<pre><code>withSecurityGroupSelectorTermsMixin(securityGroupSelectorTerms)\n</code></pre> <p>\"SecurityGroupSelectorTerms is a list of or security group selector terms. The terms are ORed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithsubnetselectorterms","title":"fn spec.withSubnetSelectorTerms","text":"<pre><code>withSubnetSelectorTerms(subnetSelectorTerms)\n</code></pre> <p>\"SubnetSelectorTerms is a list of or subnet selector terms. The terms are ORed.\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithsubnetselectortermsmixin","title":"fn spec.withSubnetSelectorTermsMixin","text":"<pre><code>withSubnetSelectorTermsMixin(subnetSelectorTerms)\n</code></pre> <p>\"SubnetSelectorTerms is a list of or subnet selector terms. The terms are ORed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithtags","title":"fn spec.withTags","text":"<pre><code>withTags(tags)\n</code></pre> <p>\"Tags to be applied on ec2 resources like instances and launch templates.\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithtagsmixin","title":"fn spec.withTagsMixin","text":"<pre><code>withTagsMixin(tags)\n</code></pre> <p>\"Tags to be applied on ec2 resources like instances and launch templates.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithuserdata","title":"fn spec.withUserData","text":"<pre><code>withUserData(userData)\n</code></pre> <p>\"UserData to be applied to the provisioned nodes. It must be in the appropriate format based on the AMIFamily in use. Karpenter will merge certain fields into this UserData to ensure nodes are being provisioned with the correct configuration.\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#obj-specamiselectorterms","title":"obj spec.amiSelectorTerms","text":"<p>\"AMISelectorTerms is a list of or ami selector terms. The terms are ORed.\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-specamiselectortermswithid","title":"fn spec.amiSelectorTerms.withId","text":"<pre><code>withId(id)\n</code></pre> <p>\"ID is the ami id in EC2\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-specamiselectortermswithname","title":"fn spec.amiSelectorTerms.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the ami name in EC2. This value is the name field, which is different from the name tag.\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-specamiselectortermswithowner","title":"fn spec.amiSelectorTerms.withOwner","text":"<pre><code>withOwner(owner)\n</code></pre> <p>\"Owner is the owner for the ami. You can specify a combination of AWS account IDs, \\\"self\\\", \\\"amazon\\\", and \\\"aws-marketplace\\</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-specamiselectortermswithtags","title":"fn spec.amiSelectorTerms.withTags","text":"<pre><code>withTags(tags)\n</code></pre> <p>\"Tags is a map of key/value tags used to select subnets Specifying '*' for a value selects all values for a given tag key.\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-specamiselectortermswithtagsmixin","title":"fn spec.amiSelectorTerms.withTagsMixin","text":"<pre><code>withTagsMixin(tags)\n</code></pre> <p>\"Tags is a map of key/value tags used to select subnets Specifying '*' for a value selects all values for a given tag key.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#obj-specblockdevicemappings","title":"obj spec.blockDeviceMappings","text":"<p>\"BlockDeviceMappings to be applied to provisioned nodes.\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingswithdevicename","title":"fn spec.blockDeviceMappings.withDeviceName","text":"<pre><code>withDeviceName(deviceName)\n</code></pre> <p>\"The device name (for example, /dev/sdh or xvdh).\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingswithrootvolume","title":"fn spec.blockDeviceMappings.withRootVolume","text":"<pre><code>withRootVolume(rootVolume)\n</code></pre> <p>\"RootVolume is a flag indicating if this device is mounted as kubelet root dir. You can configure at most one root volume in BlockDeviceMappings.\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#obj-specblockdevicemappingsebs","title":"obj spec.blockDeviceMappings.ebs","text":"<p>\"EBS contains parameters used to automatically set up EBS volumes when an instance is launched.\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingsebswithdeleteontermination","title":"fn spec.blockDeviceMappings.ebs.withDeleteOnTermination","text":"<pre><code>withDeleteOnTermination(deleteOnTermination)\n</code></pre> <p>\"DeleteOnTermination indicates whether the EBS volume is deleted on instance termination.\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingsebswithencrypted","title":"fn spec.blockDeviceMappings.ebs.withEncrypted","text":"<pre><code>withEncrypted(encrypted)\n</code></pre> <p>\"Encrypted indicates whether the EBS volume is encrypted. Encrypted volumes can only be attached to instances that support Amazon EBS encryption. If you are creating a volume from a snapshot, you can't specify an encryption value.\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingsebswithiops","title":"fn spec.blockDeviceMappings.ebs.withIops","text":"<pre><code>withIops(iops)\n</code></pre> <p>\"IOPS is the number of I/O operations per second (IOPS). For gp3, io1, and io2 volumes, this represents the number of IOPS that are provisioned for the volume. For gp2 volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. \\n The following are the supported values for each volume type: \\n * gp3: 3,000-16,000 IOPS \\n * io1: 100-64,000 IOPS \\n * io2: 100-64,000 IOPS \\n For io1 and io2 volumes, we guarantee 64,000 IOPS only for Instances built on the Nitro System (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances). Other instance families guarantee performance up to 32,000 IOPS. \\n This parameter is supported for io1, io2, and gp3 volumes only. This parameter is not supported for gp2, st1, sc1, or standard volumes.\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingsebswithkmskeyid","title":"fn spec.blockDeviceMappings.ebs.withKmsKeyID","text":"<pre><code>withKmsKeyID(kmsKeyID)\n</code></pre> <p>\"KMSKeyID (ARN) of the symmetric Key Management Service (KMS) CMK used for encryption.\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingsebswithsnapshotid","title":"fn spec.blockDeviceMappings.ebs.withSnapshotID","text":"<pre><code>withSnapshotID(snapshotID)\n</code></pre> <p>\"SnapshotID is the ID of an EBS snapshot\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingsebswiththroughput","title":"fn spec.blockDeviceMappings.ebs.withThroughput","text":"<pre><code>withThroughput(throughput)\n</code></pre> <p>\"Throughput to provision for a gp3 volume, with a maximum of 1,000 MiB/s. Valid Range: Minimum value of 125. Maximum value of 1000.\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingsebswithvolumesize","title":"fn spec.blockDeviceMappings.ebs.withVolumeSize","text":"<pre><code>withVolumeSize(volumeSize)\n</code></pre> <p>\"VolumeSize in <code>Gi</code>, <code>G</code>, <code>Ti</code>, or <code>T</code>. You must specify either a snapshot ID or a volume size. The following are the supported volumes sizes for each volume type: \\n * gp2 and gp3: 1-16,384 \\n * io1 and io2: 4-16,384 \\n * st1 and sc1: 125-16,384 \\n * standard: 1-1,024\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingsebswithvolumetype","title":"fn spec.blockDeviceMappings.ebs.withVolumeType","text":"<pre><code>withVolumeType(volumeType)\n</code></pre> <p>\"VolumeType of the block device. For more information, see Amazon EBS volume types (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html) in the Amazon Elastic Compute Cloud User Guide.\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#obj-specmetadataoptions","title":"obj spec.metadataOptions","text":"<p>\"MetadataOptions for the generated launch template of provisioned nodes. \\n This specifies the exposure of the Instance Metadata Service to provisioned EC2 nodes. For more information, see Instance Metadata and User Data (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html) in the Amazon Elastic Compute Cloud User Guide. \\n Refer to recommended, security best practices (https://aws.github.io/aws-eks-best-practices/security/docs/iam/#restrict-access-to-the-instance-profile-assigned-to-the-worker-node) for limiting exposure of Instance Metadata and User Data to pods. If omitted, defaults to httpEndpoint enabled, with httpProtocolIPv6 disabled, with httpPutResponseLimit of 2, and with httpTokens required.\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-specmetadataoptionswithhttpendpoint","title":"fn spec.metadataOptions.withHttpEndpoint","text":"<pre><code>withHttpEndpoint(httpEndpoint)\n</code></pre> <p>\"HTTPEndpoint enables or disables the HTTP metadata endpoint on provisioned nodes. If metadata options is non-nil, but this parameter is not specified, the default state is \\\"enabled\\\". \\n If you specify a value of \\\"disabled\\\", instance metadata will not be accessible on the node.\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-specmetadataoptionswithhttpprotocolipv6","title":"fn spec.metadataOptions.withHttpProtocolIPv6","text":"<pre><code>withHttpProtocolIPv6(httpProtocolIPv6)\n</code></pre> <p>\"HTTPProtocolIPv6 enables or disables the IPv6 endpoint for the instance metadata service on provisioned nodes. If metadata options is non-nil, but this parameter is not specified, the default state is \\\"disabled\\\".\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-specmetadataoptionswithhttpputresponsehoplimit","title":"fn spec.metadataOptions.withHttpPutResponseHopLimit","text":"<pre><code>withHttpPutResponseHopLimit(httpPutResponseHopLimit)\n</code></pre> <p>\"HTTPPutResponseHopLimit is the desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. Possible values are integers from 1 to 64. If metadata options is non-nil, but this parameter is not specified, the default value is 2.\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-specmetadataoptionswithhttptokens","title":"fn spec.metadataOptions.withHttpTokens","text":"<pre><code>withHttpTokens(httpTokens)\n</code></pre> <p>\"HTTPTokens determines the state of token usage for instance metadata requests. If metadata options is non-nil, but this parameter is not specified, the default state is \\\"required\\\". \\n If the state is optional, one can choose to retrieve instance metadata with or without a signed token header on the request. If one retrieves the IAM role credentials without a token, the version 1.0 role credentials are returned. If one retrieves the IAM role credentials using a valid signed token, the version 2.0 role credentials are returned. \\n If the state is \\\"required\\\", one must send a signed token header with any instance metadata retrieval requests. In this state, retrieving the IAM role credentials always returns the version 2.0 credentials; the version 1.0 credentials are not available.\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#obj-specsecuritygroupselectorterms","title":"obj spec.securityGroupSelectorTerms","text":"<p>\"SecurityGroupSelectorTerms is a list of or security group selector terms. The terms are ORed.\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-specsecuritygroupselectortermswithid","title":"fn spec.securityGroupSelectorTerms.withId","text":"<pre><code>withId(id)\n</code></pre> <p>\"ID is the security group id in EC2\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-specsecuritygroupselectortermswithname","title":"fn spec.securityGroupSelectorTerms.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the security group name in EC2. This value is the name field, which is different from the name tag.\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-specsecuritygroupselectortermswithtags","title":"fn spec.securityGroupSelectorTerms.withTags","text":"<pre><code>withTags(tags)\n</code></pre> <p>\"Tags is a map of key/value tags used to select subnets Specifying '*' for a value selects all values for a given tag key.\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-specsecuritygroupselectortermswithtagsmixin","title":"fn spec.securityGroupSelectorTerms.withTagsMixin","text":"<pre><code>withTagsMixin(tags)\n</code></pre> <p>\"Tags is a map of key/value tags used to select subnets Specifying '*' for a value selects all values for a given tag key.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#obj-specsubnetselectorterms","title":"obj spec.subnetSelectorTerms","text":"<p>\"SubnetSelectorTerms is a list of or subnet selector terms. The terms are ORed.\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-specsubnetselectortermswithid","title":"fn spec.subnetSelectorTerms.withId","text":"<pre><code>withId(id)\n</code></pre> <p>\"ID is the subnet id in EC2\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-specsubnetselectortermswithtags","title":"fn spec.subnetSelectorTerms.withTags","text":"<pre><code>withTags(tags)\n</code></pre> <p>\"Tags is a map of key/value tags used to select subnets Specifying '*' for a value selects all values for a given tag key.\"</p>"},{"location":"0.33/aws/karpenter/v1beta1/ec2NodeClass/#fn-specsubnetselectortermswithtagsmixin","title":"fn spec.subnetSelectorTerms.withTagsMixin","text":"<pre><code>withTagsMixin(tags)\n</code></pre> <p>\"Tags is a map of key/value tags used to select subnets Specifying '*' for a value selects all values for a given tag key.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.33/sh/","title":"karpenter","text":"<pre><code>local karpenter = import \"github.com/jsonnet-libs/karpenter-libsonnet/0.33/sh/main.libsonnet\"\n</code></pre> <ul> <li>karpenter</li> </ul>"},{"location":"0.33/sh/karpenter/","title":"karpenter","text":"<ul> <li>v1beta1</li> </ul>"},{"location":"0.33/sh/karpenter/v1beta1/","title":"karpenter.v1beta1","text":"<ul> <li>nodeClaim</li> <li>nodePool</li> </ul>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/","title":"karpenter.v1beta1.nodeClaim","text":"<p>\"NodeClaim is the Schema for the NodeClaims API\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withRequirements(requirements)</code></li> <li><code>fn withRequirementsMixin(requirements)</code></li> <li><code>fn withStartupTaints(startupTaints)</code></li> <li><code>fn withStartupTaintsMixin(startupTaints)</code></li> <li><code>fn withTaints(taints)</code></li> <li><code>fn withTaintsMixin(taints)</code></li> <li><code>obj spec.kubelet</code><ul> <li><code>fn withClusterDNS(clusterDNS)</code></li> <li><code>fn withClusterDNSMixin(clusterDNS)</code></li> <li><code>fn withCpuCFSQuota(cpuCFSQuota)</code></li> <li><code>fn withEvictionHard(evictionHard)</code></li> <li><code>fn withEvictionHardMixin(evictionHard)</code></li> <li><code>fn withEvictionMaxPodGracePeriod(evictionMaxPodGracePeriod)</code></li> <li><code>fn withEvictionSoft(evictionSoft)</code></li> <li><code>fn withEvictionSoftGracePeriod(evictionSoftGracePeriod)</code></li> <li><code>fn withEvictionSoftGracePeriodMixin(evictionSoftGracePeriod)</code></li> <li><code>fn withEvictionSoftMixin(evictionSoft)</code></li> <li><code>fn withImageGCHighThresholdPercent(imageGCHighThresholdPercent)</code></li> <li><code>fn withImageGCLowThresholdPercent(imageGCLowThresholdPercent)</code></li> <li><code>fn withKubeReserved(kubeReserved)</code></li> <li><code>fn withKubeReservedMixin(kubeReserved)</code></li> <li><code>fn withMaxPods(maxPods)</code></li> <li><code>fn withPodsPerCore(podsPerCore)</code></li> <li><code>fn withSystemReserved(systemReserved)</code></li> <li><code>fn withSystemReservedMixin(systemReserved)</code></li> </ul> </li> <li><code>obj spec.nodeClassRef</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.requirements</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> <li><code>obj spec.resources</code><ul> <li><code>fn withRequests(requests)</code></li> <li><code>fn withRequestsMixin(requests)</code></li> </ul> </li> <li><code>obj spec.startupTaints</code><ul> <li><code>fn withEffect(effect)</code></li> <li><code>fn withKey(key)</code></li> <li><code>fn withTimeAdded(timeAdded)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.taints</code><ul> <li><code>fn withEffect(effect)</code></li> <li><code>fn withKey(key)</code></li> <li><code>fn withTimeAdded(timeAdded)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fields","title":"Fields","text":""},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of NodeClaim</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#obj-spec","title":"obj spec","text":"<p>\"NodeClaimSpec describes the desired state of the NodeClaim\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-specwithrequirements","title":"fn spec.withRequirements","text":"<pre><code>withRequirements(requirements)\n</code></pre> <p>\"Requirements are layered with GetLabels and applied to every node.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-specwithrequirementsmixin","title":"fn spec.withRequirementsMixin","text":"<pre><code>withRequirementsMixin(requirements)\n</code></pre> <p>\"Requirements are layered with GetLabels and applied to every node.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-specwithstartuptaints","title":"fn spec.withStartupTaints","text":"<pre><code>withStartupTaints(startupTaints)\n</code></pre> <p>\"StartupTaints are taints that are applied to nodes upon startup which are expected to be removed automatically within a short period of time, typically by a DaemonSet that tolerates the taint. These are commonly used by daemonsets to allow initialization and enforce startup ordering.  StartupTaints are ignored for provisioning purposes in that pods are not required to tolerate a StartupTaint in order to have nodes provisioned for them.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-specwithstartuptaintsmixin","title":"fn spec.withStartupTaintsMixin","text":"<pre><code>withStartupTaintsMixin(startupTaints)\n</code></pre> <p>\"StartupTaints are taints that are applied to nodes upon startup which are expected to be removed automatically within a short period of time, typically by a DaemonSet that tolerates the taint. These are commonly used by daemonsets to allow initialization and enforce startup ordering.  StartupTaints are ignored for provisioning purposes in that pods are not required to tolerate a StartupTaint in order to have nodes provisioned for them.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-specwithtaints","title":"fn spec.withTaints","text":"<pre><code>withTaints(taints)\n</code></pre> <p>\"Taints will be applied to the NodeClaim's node.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-specwithtaintsmixin","title":"fn spec.withTaintsMixin","text":"<pre><code>withTaintsMixin(taints)\n</code></pre> <p>\"Taints will be applied to the NodeClaim's node.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#obj-speckubelet","title":"obj spec.kubelet","text":"<p>\"Kubelet defines args to be used when configuring kubelet on provisioned nodes. They are a subset of the upstream types, recognizing not all options may be supported. Wherever possible, the types and names should reflect the upstream kubelet types.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithclusterdns","title":"fn spec.kubelet.withClusterDNS","text":"<pre><code>withClusterDNS(clusterDNS)\n</code></pre> <p>\"clusterDNS is a list of IP addresses for the cluster DNS server. Note that not all providers may use all addresses.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithclusterdnsmixin","title":"fn spec.kubelet.withClusterDNSMixin","text":"<pre><code>withClusterDNSMixin(clusterDNS)\n</code></pre> <p>\"clusterDNS is a list of IP addresses for the cluster DNS server. Note that not all providers may use all addresses.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithcpucfsquota","title":"fn spec.kubelet.withCpuCFSQuota","text":"<pre><code>withCpuCFSQuota(cpuCFSQuota)\n</code></pre> <p>\"CPUCFSQuota enables CPU CFS quota enforcement for containers that specify CPU limits.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithevictionhard","title":"fn spec.kubelet.withEvictionHard","text":"<pre><code>withEvictionHard(evictionHard)\n</code></pre> <p>\"EvictionHard is the map of signal names to quantities that define hard eviction thresholds\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithevictionhardmixin","title":"fn spec.kubelet.withEvictionHardMixin","text":"<pre><code>withEvictionHardMixin(evictionHard)\n</code></pre> <p>\"EvictionHard is the map of signal names to quantities that define hard eviction thresholds\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithevictionmaxpodgraceperiod","title":"fn spec.kubelet.withEvictionMaxPodGracePeriod","text":"<pre><code>withEvictionMaxPodGracePeriod(evictionMaxPodGracePeriod)\n</code></pre> <p>\"EvictionMaxPodGracePeriod is the maximum allowed grace period (in seconds) to use when terminating pods in response to soft eviction thresholds being met.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithevictionsoft","title":"fn spec.kubelet.withEvictionSoft","text":"<pre><code>withEvictionSoft(evictionSoft)\n</code></pre> <p>\"EvictionSoft is the map of signal names to quantities that define soft eviction thresholds\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithevictionsoftgraceperiod","title":"fn spec.kubelet.withEvictionSoftGracePeriod","text":"<pre><code>withEvictionSoftGracePeriod(evictionSoftGracePeriod)\n</code></pre> <p>\"EvictionSoftGracePeriod is the map of signal names to quantities that define grace periods for each eviction signal\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithevictionsoftgraceperiodmixin","title":"fn spec.kubelet.withEvictionSoftGracePeriodMixin","text":"<pre><code>withEvictionSoftGracePeriodMixin(evictionSoftGracePeriod)\n</code></pre> <p>\"EvictionSoftGracePeriod is the map of signal names to quantities that define grace periods for each eviction signal\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithevictionsoftmixin","title":"fn spec.kubelet.withEvictionSoftMixin","text":"<pre><code>withEvictionSoftMixin(evictionSoft)\n</code></pre> <p>\"EvictionSoft is the map of signal names to quantities that define soft eviction thresholds\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithimagegchighthresholdpercent","title":"fn spec.kubelet.withImageGCHighThresholdPercent","text":"<pre><code>withImageGCHighThresholdPercent(imageGCHighThresholdPercent)\n</code></pre> <p>\"ImageGCHighThresholdPercent is the percent of disk usage after which image garbage collection is always run. The percent is calculated by dividing this field value by 100, so this field must be between 0 and 100, inclusive. When specified, the value must be greater than ImageGCLowThresholdPercent.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithimagegclowthresholdpercent","title":"fn spec.kubelet.withImageGCLowThresholdPercent","text":"<pre><code>withImageGCLowThresholdPercent(imageGCLowThresholdPercent)\n</code></pre> <p>\"ImageGCLowThresholdPercent is the percent of disk usage before which image garbage collection is never run. Lowest disk usage to garbage collect to. The percent is calculated by dividing this field value by 100, so the field value must be between 0 and 100, inclusive. When specified, the value must be less than imageGCHighThresholdPercent\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithkubereserved","title":"fn spec.kubelet.withKubeReserved","text":"<pre><code>withKubeReserved(kubeReserved)\n</code></pre> <p>\"KubeReserved contains resources reserved for Kubernetes system components.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithkubereservedmixin","title":"fn spec.kubelet.withKubeReservedMixin","text":"<pre><code>withKubeReservedMixin(kubeReserved)\n</code></pre> <p>\"KubeReserved contains resources reserved for Kubernetes system components.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithmaxpods","title":"fn spec.kubelet.withMaxPods","text":"<pre><code>withMaxPods(maxPods)\n</code></pre> <p>\"MaxPods is an override for the maximum number of pods that can run on a worker node instance.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithpodspercore","title":"fn spec.kubelet.withPodsPerCore","text":"<pre><code>withPodsPerCore(podsPerCore)\n</code></pre> <p>\"PodsPerCore is an override for the number of pods that can run on a worker node instance based on the number of cpu cores. This value cannot exceed MaxPods, so, if MaxPods is a lower value, that value will be used.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithsystemreserved","title":"fn spec.kubelet.withSystemReserved","text":"<pre><code>withSystemReserved(systemReserved)\n</code></pre> <p>\"SystemReserved contains resources reserved for OS system daemons and kernel memory.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithsystemreservedmixin","title":"fn spec.kubelet.withSystemReservedMixin","text":"<pre><code>withSystemReservedMixin(systemReserved)\n</code></pre> <p>\"SystemReserved contains resources reserved for OS system daemons and kernel memory.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#obj-specnodeclassref","title":"obj spec.nodeClassRef","text":"<p>\"NodeClassRef is a reference to an object that defines provider specific configuration\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-specnodeclassrefwithapiversion","title":"fn spec.nodeClassRef.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"API version of the referent\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-specnodeclassrefwithkind","title":"fn spec.nodeClassRef.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\\</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-specnodeclassrefwithname","title":"fn spec.nodeClassRef.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#obj-specrequirements","title":"obj spec.requirements","text":"<p>\"Requirements are layered with GetLabels and applied to every node.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-specrequirementswithkey","title":"fn spec.requirements.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"The label key that the selector applies to.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-specrequirementswithoperator","title":"fn spec.requirements.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-specrequirementswithvalues","title":"fn spec.requirements.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-specrequirementswithvaluesmixin","title":"fn spec.requirements.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#obj-specresources","title":"obj spec.resources","text":"<p>\"Resources models the resource requirements for the NodeClaim to launch\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-specresourceswithrequests","title":"fn spec.resources.withRequests","text":"<pre><code>withRequests(requests)\n</code></pre> <p>\"Requests describes the minimum required resources for the NodeClaim to launch\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-specresourceswithrequestsmixin","title":"fn spec.resources.withRequestsMixin","text":"<pre><code>withRequestsMixin(requests)\n</code></pre> <p>\"Requests describes the minimum required resources for the NodeClaim to launch\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#obj-specstartuptaints","title":"obj spec.startupTaints","text":"<p>\"StartupTaints are taints that are applied to nodes upon startup which are expected to be removed automatically within a short period of time, typically by a DaemonSet that tolerates the taint. These are commonly used by daemonsets to allow initialization and enforce startup ordering.  StartupTaints are ignored for provisioning purposes in that pods are not required to tolerate a StartupTaint in order to have nodes provisioned for them.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-specstartuptaintswitheffect","title":"fn spec.startupTaints.withEffect","text":"<pre><code>withEffect(effect)\n</code></pre> <p>\"Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-specstartuptaintswithkey","title":"fn spec.startupTaints.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Required. The taint key to be applied to a node.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-specstartuptaintswithtimeadded","title":"fn spec.startupTaints.withTimeAdded","text":"<pre><code>withTimeAdded(timeAdded)\n</code></pre> <p>\"TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-specstartuptaintswithvalue","title":"fn spec.startupTaints.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"The taint value corresponding to the taint key.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#obj-spectaints","title":"obj spec.taints","text":"<p>\"Taints will be applied to the NodeClaim's node.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-spectaintswitheffect","title":"fn spec.taints.withEffect","text":"<pre><code>withEffect(effect)\n</code></pre> <p>\"Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-spectaintswithkey","title":"fn spec.taints.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Required. The taint key to be applied to a node.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-spectaintswithtimeadded","title":"fn spec.taints.withTimeAdded","text":"<pre><code>withTimeAdded(timeAdded)\n</code></pre> <p>\"TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodeClaim/#fn-spectaintswithvalue","title":"fn spec.taints.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"The taint value corresponding to the taint key.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/","title":"karpenter.v1beta1.nodePool","text":"<p>\"NodePool is the Schema for the NodePools API\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withLimits(limits)</code></li> <li><code>fn withLimitsMixin(limits)</code></li> <li><code>fn withWeight(weight)</code></li> <li><code>obj spec.disruption</code><ul> <li><code>fn withConsolidateAfter(consolidateAfter)</code></li> <li><code>fn withConsolidationPolicy(consolidationPolicy)</code></li> <li><code>fn withExpireAfter(expireAfter)</code></li> </ul> </li> <li><code>obj spec.template</code><ul> <li><code>obj spec.template.metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> </ul> </li> <li><code>obj spec.template.spec</code><ul> <li><code>fn withRequirements(requirements)</code></li> <li><code>fn withRequirementsMixin(requirements)</code></li> <li><code>fn withStartupTaints(startupTaints)</code></li> <li><code>fn withStartupTaintsMixin(startupTaints)</code></li> <li><code>fn withTaints(taints)</code></li> <li><code>fn withTaintsMixin(taints)</code></li> <li><code>obj spec.template.spec.kubelet</code><ul> <li><code>fn withClusterDNS(clusterDNS)</code></li> <li><code>fn withClusterDNSMixin(clusterDNS)</code></li> <li><code>fn withCpuCFSQuota(cpuCFSQuota)</code></li> <li><code>fn withEvictionHard(evictionHard)</code></li> <li><code>fn withEvictionHardMixin(evictionHard)</code></li> <li><code>fn withEvictionMaxPodGracePeriod(evictionMaxPodGracePeriod)</code></li> <li><code>fn withEvictionSoft(evictionSoft)</code></li> <li><code>fn withEvictionSoftGracePeriod(evictionSoftGracePeriod)</code></li> <li><code>fn withEvictionSoftGracePeriodMixin(evictionSoftGracePeriod)</code></li> <li><code>fn withEvictionSoftMixin(evictionSoft)</code></li> <li><code>fn withImageGCHighThresholdPercent(imageGCHighThresholdPercent)</code></li> <li><code>fn withImageGCLowThresholdPercent(imageGCLowThresholdPercent)</code></li> <li><code>fn withKubeReserved(kubeReserved)</code></li> <li><code>fn withKubeReservedMixin(kubeReserved)</code></li> <li><code>fn withMaxPods(maxPods)</code></li> <li><code>fn withPodsPerCore(podsPerCore)</code></li> <li><code>fn withSystemReserved(systemReserved)</code></li> <li><code>fn withSystemReservedMixin(systemReserved)</code></li> </ul> </li> <li><code>obj spec.template.spec.nodeClassRef</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.template.spec.requirements</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> <li><code>obj spec.template.spec.resources</code><ul> <li><code>fn withRequests(requests)</code></li> <li><code>fn withRequestsMixin(requests)</code></li> </ul> </li> <li><code>obj spec.template.spec.startupTaints</code><ul> <li><code>fn withEffect(effect)</code></li> <li><code>fn withKey(key)</code></li> <li><code>fn withTimeAdded(timeAdded)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.template.spec.taints</code><ul> <li><code>fn withEffect(effect)</code></li> <li><code>fn withKey(key)</code></li> <li><code>fn withTimeAdded(timeAdded)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fields","title":"Fields","text":""},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of NodePool</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#obj-spec","title":"obj spec","text":"<p>\"NodePoolSpec is the top level nodepool specification. Nodepools launch nodes in response to pods that are unschedulable. A single nodepool is capable of managing a diverse set of nodes. Node properties are determined from a combination of nodepool and pod scheduling constraints.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-specwithlimits","title":"fn spec.withLimits","text":"<pre><code>withLimits(limits)\n</code></pre> <p>\"Limits define a set of bounds for provisioning capacity.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-specwithlimitsmixin","title":"fn spec.withLimitsMixin","text":"<pre><code>withLimitsMixin(limits)\n</code></pre> <p>\"Limits define a set of bounds for provisioning capacity.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-specwithweight","title":"fn spec.withWeight","text":"<pre><code>withWeight(weight)\n</code></pre> <p>\"Weight is the priority given to the nodepool during scheduling. A higher numerical weight indicates that this nodepool will be ordered ahead of other nodepools with lower weights. A nodepool with no weight will be treated as if it is a nodepool with a weight of 0.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#obj-specdisruption","title":"obj spec.disruption","text":"<p>\"Disruption contains the parameters that relate to Karpenter's disruption logic\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-specdisruptionwithconsolidateafter","title":"fn spec.disruption.withConsolidateAfter","text":"<pre><code>withConsolidateAfter(consolidateAfter)\n</code></pre> <p>\"ConsolidateAfter is the duration the controller will wait before attempting to terminate nodes that are underutilized. Refer to ConsolidationPolicy for how underutilization is considered.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-specdisruptionwithconsolidationpolicy","title":"fn spec.disruption.withConsolidationPolicy","text":"<pre><code>withConsolidationPolicy(consolidationPolicy)\n</code></pre> <p>\"ConsolidationPolicy describes which nodes Karpenter can disrupt through its consolidation algorithm. This policy defaults to \\\"WhenUnderutilized\\\" if not specified\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-specdisruptionwithexpireafter","title":"fn spec.disruption.withExpireAfter","text":"<pre><code>withExpireAfter(expireAfter)\n</code></pre> <p>\"ExpireAfter is the duration the controller will wait before terminating a node, measured from when the node is created. This is useful to implement features like eventually consistent node upgrade, memory leak protection, and disruption testing.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#obj-spectemplate","title":"obj spec.template","text":"<p>\"Template contains the template of possibilities for the provisioning logic to launch a NodeClaim with. NodeClaims launched from this NodePool will often be further constrained than the template specifies.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#obj-spectemplatemetadata","title":"obj spec.template.metadata","text":""},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-spectemplatemetadatawithannotations","title":"fn spec.template.metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-spectemplatemetadatawithannotationsmixin","title":"fn spec.template.metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-spectemplatemetadatawithlabels","title":"fn spec.template.metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-spectemplatemetadatawithlabelsmixin","title":"fn spec.template.metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#obj-spectemplatespec","title":"obj spec.template.spec","text":"<p>\"NodeClaimSpec describes the desired state of the NodeClaim\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecwithrequirements","title":"fn spec.template.spec.withRequirements","text":"<pre><code>withRequirements(requirements)\n</code></pre> <p>\"Requirements are layered with GetLabels and applied to every node.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecwithrequirementsmixin","title":"fn spec.template.spec.withRequirementsMixin","text":"<pre><code>withRequirementsMixin(requirements)\n</code></pre> <p>\"Requirements are layered with GetLabels and applied to every node.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecwithstartuptaints","title":"fn spec.template.spec.withStartupTaints","text":"<pre><code>withStartupTaints(startupTaints)\n</code></pre> <p>\"StartupTaints are taints that are applied to nodes upon startup which are expected to be removed automatically within a short period of time, typically by a DaemonSet that tolerates the taint. These are commonly used by daemonsets to allow initialization and enforce startup ordering.  StartupTaints are ignored for provisioning purposes in that pods are not required to tolerate a StartupTaint in order to have nodes provisioned for them.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecwithstartuptaintsmixin","title":"fn spec.template.spec.withStartupTaintsMixin","text":"<pre><code>withStartupTaintsMixin(startupTaints)\n</code></pre> <p>\"StartupTaints are taints that are applied to nodes upon startup which are expected to be removed automatically within a short period of time, typically by a DaemonSet that tolerates the taint. These are commonly used by daemonsets to allow initialization and enforce startup ordering.  StartupTaints are ignored for provisioning purposes in that pods are not required to tolerate a StartupTaint in order to have nodes provisioned for them.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecwithtaints","title":"fn spec.template.spec.withTaints","text":"<pre><code>withTaints(taints)\n</code></pre> <p>\"Taints will be applied to the NodeClaim's node.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecwithtaintsmixin","title":"fn spec.template.spec.withTaintsMixin","text":"<pre><code>withTaintsMixin(taints)\n</code></pre> <p>\"Taints will be applied to the NodeClaim's node.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#obj-spectemplatespeckubelet","title":"obj spec.template.spec.kubelet","text":"<p>\"Kubelet defines args to be used when configuring kubelet on provisioned nodes. They are a subset of the upstream types, recognizing not all options may be supported. Wherever possible, the types and names should reflect the upstream kubelet types.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithclusterdns","title":"fn spec.template.spec.kubelet.withClusterDNS","text":"<pre><code>withClusterDNS(clusterDNS)\n</code></pre> <p>\"clusterDNS is a list of IP addresses for the cluster DNS server. Note that not all providers may use all addresses.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithclusterdnsmixin","title":"fn spec.template.spec.kubelet.withClusterDNSMixin","text":"<pre><code>withClusterDNSMixin(clusterDNS)\n</code></pre> <p>\"clusterDNS is a list of IP addresses for the cluster DNS server. Note that not all providers may use all addresses.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithcpucfsquota","title":"fn spec.template.spec.kubelet.withCpuCFSQuota","text":"<pre><code>withCpuCFSQuota(cpuCFSQuota)\n</code></pre> <p>\"CPUCFSQuota enables CPU CFS quota enforcement for containers that specify CPU limits.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithevictionhard","title":"fn spec.template.spec.kubelet.withEvictionHard","text":"<pre><code>withEvictionHard(evictionHard)\n</code></pre> <p>\"EvictionHard is the map of signal names to quantities that define hard eviction thresholds\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithevictionhardmixin","title":"fn spec.template.spec.kubelet.withEvictionHardMixin","text":"<pre><code>withEvictionHardMixin(evictionHard)\n</code></pre> <p>\"EvictionHard is the map of signal names to quantities that define hard eviction thresholds\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithevictionmaxpodgraceperiod","title":"fn spec.template.spec.kubelet.withEvictionMaxPodGracePeriod","text":"<pre><code>withEvictionMaxPodGracePeriod(evictionMaxPodGracePeriod)\n</code></pre> <p>\"EvictionMaxPodGracePeriod is the maximum allowed grace period (in seconds) to use when terminating pods in response to soft eviction thresholds being met.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithevictionsoft","title":"fn spec.template.spec.kubelet.withEvictionSoft","text":"<pre><code>withEvictionSoft(evictionSoft)\n</code></pre> <p>\"EvictionSoft is the map of signal names to quantities that define soft eviction thresholds\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithevictionsoftgraceperiod","title":"fn spec.template.spec.kubelet.withEvictionSoftGracePeriod","text":"<pre><code>withEvictionSoftGracePeriod(evictionSoftGracePeriod)\n</code></pre> <p>\"EvictionSoftGracePeriod is the map of signal names to quantities that define grace periods for each eviction signal\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithevictionsoftgraceperiodmixin","title":"fn spec.template.spec.kubelet.withEvictionSoftGracePeriodMixin","text":"<pre><code>withEvictionSoftGracePeriodMixin(evictionSoftGracePeriod)\n</code></pre> <p>\"EvictionSoftGracePeriod is the map of signal names to quantities that define grace periods for each eviction signal\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithevictionsoftmixin","title":"fn spec.template.spec.kubelet.withEvictionSoftMixin","text":"<pre><code>withEvictionSoftMixin(evictionSoft)\n</code></pre> <p>\"EvictionSoft is the map of signal names to quantities that define soft eviction thresholds\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithimagegchighthresholdpercent","title":"fn spec.template.spec.kubelet.withImageGCHighThresholdPercent","text":"<pre><code>withImageGCHighThresholdPercent(imageGCHighThresholdPercent)\n</code></pre> <p>\"ImageGCHighThresholdPercent is the percent of disk usage after which image garbage collection is always run. The percent is calculated by dividing this field value by 100, so this field must be between 0 and 100, inclusive. When specified, the value must be greater than ImageGCLowThresholdPercent.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithimagegclowthresholdpercent","title":"fn spec.template.spec.kubelet.withImageGCLowThresholdPercent","text":"<pre><code>withImageGCLowThresholdPercent(imageGCLowThresholdPercent)\n</code></pre> <p>\"ImageGCLowThresholdPercent is the percent of disk usage before which image garbage collection is never run. Lowest disk usage to garbage collect to. The percent is calculated by dividing this field value by 100, so the field value must be between 0 and 100, inclusive. When specified, the value must be less than imageGCHighThresholdPercent\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithkubereserved","title":"fn spec.template.spec.kubelet.withKubeReserved","text":"<pre><code>withKubeReserved(kubeReserved)\n</code></pre> <p>\"KubeReserved contains resources reserved for Kubernetes system components.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithkubereservedmixin","title":"fn spec.template.spec.kubelet.withKubeReservedMixin","text":"<pre><code>withKubeReservedMixin(kubeReserved)\n</code></pre> <p>\"KubeReserved contains resources reserved for Kubernetes system components.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithmaxpods","title":"fn spec.template.spec.kubelet.withMaxPods","text":"<pre><code>withMaxPods(maxPods)\n</code></pre> <p>\"MaxPods is an override for the maximum number of pods that can run on a worker node instance.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithpodspercore","title":"fn spec.template.spec.kubelet.withPodsPerCore","text":"<pre><code>withPodsPerCore(podsPerCore)\n</code></pre> <p>\"PodsPerCore is an override for the number of pods that can run on a worker node instance based on the number of cpu cores. This value cannot exceed MaxPods, so, if MaxPods is a lower value, that value will be used.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithsystemreserved","title":"fn spec.template.spec.kubelet.withSystemReserved","text":"<pre><code>withSystemReserved(systemReserved)\n</code></pre> <p>\"SystemReserved contains resources reserved for OS system daemons and kernel memory.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithsystemreservedmixin","title":"fn spec.template.spec.kubelet.withSystemReservedMixin","text":"<pre><code>withSystemReservedMixin(systemReserved)\n</code></pre> <p>\"SystemReserved contains resources reserved for OS system daemons and kernel memory.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#obj-spectemplatespecnodeclassref","title":"obj spec.template.spec.nodeClassRef","text":"<p>\"NodeClassRef is a reference to an object that defines provider specific configuration\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecnodeclassrefwithapiversion","title":"fn spec.template.spec.nodeClassRef.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"API version of the referent\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecnodeclassrefwithkind","title":"fn spec.template.spec.nodeClassRef.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\\</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecnodeclassrefwithname","title":"fn spec.template.spec.nodeClassRef.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#obj-spectemplatespecrequirements","title":"obj spec.template.spec.requirements","text":"<p>\"Requirements are layered with GetLabels and applied to every node.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecrequirementswithkey","title":"fn spec.template.spec.requirements.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"The label key that the selector applies to.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecrequirementswithoperator","title":"fn spec.template.spec.requirements.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecrequirementswithvalues","title":"fn spec.template.spec.requirements.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecrequirementswithvaluesmixin","title":"fn spec.template.spec.requirements.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#obj-spectemplatespecresources","title":"obj spec.template.spec.resources","text":"<p>\"Resources models the resource requirements for the NodeClaim to launch\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecresourceswithrequests","title":"fn spec.template.spec.resources.withRequests","text":"<pre><code>withRequests(requests)\n</code></pre> <p>\"Requests describes the minimum required resources for the NodeClaim to launch\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecresourceswithrequestsmixin","title":"fn spec.template.spec.resources.withRequestsMixin","text":"<pre><code>withRequestsMixin(requests)\n</code></pre> <p>\"Requests describes the minimum required resources for the NodeClaim to launch\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#obj-spectemplatespecstartuptaints","title":"obj spec.template.spec.startupTaints","text":"<p>\"StartupTaints are taints that are applied to nodes upon startup which are expected to be removed automatically within a short period of time, typically by a DaemonSet that tolerates the taint. These are commonly used by daemonsets to allow initialization and enforce startup ordering.  StartupTaints are ignored for provisioning purposes in that pods are not required to tolerate a StartupTaint in order to have nodes provisioned for them.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecstartuptaintswitheffect","title":"fn spec.template.spec.startupTaints.withEffect","text":"<pre><code>withEffect(effect)\n</code></pre> <p>\"Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecstartuptaintswithkey","title":"fn spec.template.spec.startupTaints.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Required. The taint key to be applied to a node.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecstartuptaintswithtimeadded","title":"fn spec.template.spec.startupTaints.withTimeAdded","text":"<pre><code>withTimeAdded(timeAdded)\n</code></pre> <p>\"TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecstartuptaintswithvalue","title":"fn spec.template.spec.startupTaints.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"The taint value corresponding to the taint key.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#obj-spectemplatespectaints","title":"obj spec.template.spec.taints","text":"<p>\"Taints will be applied to the NodeClaim's node.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespectaintswitheffect","title":"fn spec.template.spec.taints.withEffect","text":"<pre><code>withEffect(effect)\n</code></pre> <p>\"Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespectaintswithkey","title":"fn spec.template.spec.taints.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Required. The taint key to be applied to a node.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespectaintswithtimeadded","title":"fn spec.template.spec.taints.withTimeAdded","text":"<pre><code>withTimeAdded(timeAdded)\n</code></pre> <p>\"TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.\"</p>"},{"location":"0.33/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespectaintswithvalue","title":"fn spec.template.spec.taints.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"The taint value corresponding to the taint key.\"</p>"},{"location":"0.34/aws/","title":"karpenter","text":"<pre><code>local karpenter = import \"github.com/jsonnet-libs/karpenter-libsonnet/0.34/aws/main.libsonnet\"\n</code></pre> <ul> <li>karpenter</li> </ul>"},{"location":"0.34/aws/karpenter/","title":"karpenter","text":"<ul> <li>v1beta1</li> </ul>"},{"location":"0.34/aws/karpenter/v1beta1/","title":"karpenter.v1beta1","text":"<ul> <li>ec2NodeClass</li> </ul>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/","title":"karpenter.v1beta1.ec2NodeClass","text":"<p>\"EC2NodeClass is the Schema for the EC2NodeClass API\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withAmiFamily(amiFamily)</code></li> <li><code>fn withAmiSelectorTerms(amiSelectorTerms)</code></li> <li><code>fn withAmiSelectorTermsMixin(amiSelectorTerms)</code></li> <li><code>fn withBlockDeviceMappings(blockDeviceMappings)</code></li> <li><code>fn withBlockDeviceMappingsMixin(blockDeviceMappings)</code></li> <li><code>fn withContext(context)</code></li> <li><code>fn withDetailedMonitoring(detailedMonitoring)</code></li> <li><code>fn withInstanceProfile(instanceProfile)</code></li> <li><code>fn withInstanceStorePolicy(instanceStorePolicy)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withSecurityGroupSelectorTerms(securityGroupSelectorTerms)</code></li> <li><code>fn withSecurityGroupSelectorTermsMixin(securityGroupSelectorTerms)</code></li> <li><code>fn withSubnetSelectorTerms(subnetSelectorTerms)</code></li> <li><code>fn withSubnetSelectorTermsMixin(subnetSelectorTerms)</code></li> <li><code>fn withTags(tags)</code></li> <li><code>fn withTagsMixin(tags)</code></li> <li><code>fn withUserData(userData)</code></li> <li><code>obj spec.amiSelectorTerms</code><ul> <li><code>fn withId(id)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withOwner(owner)</code></li> <li><code>fn withTags(tags)</code></li> <li><code>fn withTagsMixin(tags)</code></li> </ul> </li> <li><code>obj spec.blockDeviceMappings</code><ul> <li><code>fn withDeviceName(deviceName)</code></li> <li><code>fn withRootVolume(rootVolume)</code></li> <li><code>obj spec.blockDeviceMappings.ebs</code><ul> <li><code>fn withDeleteOnTermination(deleteOnTermination)</code></li> <li><code>fn withEncrypted(encrypted)</code></li> <li><code>fn withIops(iops)</code></li> <li><code>fn withKmsKeyID(kmsKeyID)</code></li> <li><code>fn withSnapshotID(snapshotID)</code></li> <li><code>fn withThroughput(throughput)</code></li> <li><code>fn withVolumeSize(volumeSize)</code></li> <li><code>fn withVolumeType(volumeType)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.metadataOptions</code><ul> <li><code>fn withHttpEndpoint(httpEndpoint)</code></li> <li><code>fn withHttpProtocolIPv6(httpProtocolIPv6)</code></li> <li><code>fn withHttpPutResponseHopLimit(httpPutResponseHopLimit)</code></li> <li><code>fn withHttpTokens(httpTokens)</code></li> </ul> </li> <li><code>obj spec.securityGroupSelectorTerms</code><ul> <li><code>fn withId(id)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withTags(tags)</code></li> <li><code>fn withTagsMixin(tags)</code></li> </ul> </li> <li><code>obj spec.subnetSelectorTerms</code><ul> <li><code>fn withId(id)</code></li> <li><code>fn withTags(tags)</code></li> <li><code>fn withTagsMixin(tags)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fields","title":"Fields","text":""},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of EC2NodeClass</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#obj-spec","title":"obj spec","text":"<p>\"EC2NodeClassSpec is the top level specification for the AWS Karpenter Provider.\\nThis will contain configuration necessary to launch instances in AWS.\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithamifamily","title":"fn spec.withAmiFamily","text":"<pre><code>withAmiFamily(amiFamily)\n</code></pre> <p>\"AMIFamily is the AMI family that instances use.\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithamiselectorterms","title":"fn spec.withAmiSelectorTerms","text":"<pre><code>withAmiSelectorTerms(amiSelectorTerms)\n</code></pre> <p>\"AMISelectorTerms is a list of or ami selector terms. The terms are ORed.\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithamiselectortermsmixin","title":"fn spec.withAmiSelectorTermsMixin","text":"<pre><code>withAmiSelectorTermsMixin(amiSelectorTerms)\n</code></pre> <p>\"AMISelectorTerms is a list of or ami selector terms. The terms are ORed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithblockdevicemappings","title":"fn spec.withBlockDeviceMappings","text":"<pre><code>withBlockDeviceMappings(blockDeviceMappings)\n</code></pre> <p>\"BlockDeviceMappings to be applied to provisioned nodes.\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithblockdevicemappingsmixin","title":"fn spec.withBlockDeviceMappingsMixin","text":"<pre><code>withBlockDeviceMappingsMixin(blockDeviceMappings)\n</code></pre> <p>\"BlockDeviceMappings to be applied to provisioned nodes.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithcontext","title":"fn spec.withContext","text":"<pre><code>withContext(context)\n</code></pre> <p>\"Context is a Reserved field in EC2 APIs\\nhttps://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet.html\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithdetailedmonitoring","title":"fn spec.withDetailedMonitoring","text":"<pre><code>withDetailedMonitoring(detailedMonitoring)\n</code></pre> <p>\"DetailedMonitoring controls if detailed monitoring is enabled for instances that are launched\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithinstanceprofile","title":"fn spec.withInstanceProfile","text":"<pre><code>withInstanceProfile(instanceProfile)\n</code></pre> <p>\"InstanceProfile is the AWS entity that instances use.\\nThis field is mutually exclusive from role.\\nThe instance profile should already have a role assigned to it that Karpenter\\n has PassRole permission on for instance launch using this instanceProfile to succeed.\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithinstancestorepolicy","title":"fn spec.withInstanceStorePolicy","text":"<pre><code>withInstanceStorePolicy(instanceStorePolicy)\n</code></pre> <p>\"InstanceStorePolicy specifies how to handle instance-store disks.\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithrole","title":"fn spec.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role is the AWS identity that nodes use. This field is immutable.\\nThis field is mutually exclusive from instanceProfile.\\nMarking this field as immutable avoids concerns around terminating managed instance profiles from running instances.\\nThis field may be made mutable in the future, assuming the correct garbage collection and drift handling is implemented\\nfor the old instance profiles on an update.\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithsecuritygroupselectorterms","title":"fn spec.withSecurityGroupSelectorTerms","text":"<pre><code>withSecurityGroupSelectorTerms(securityGroupSelectorTerms)\n</code></pre> <p>\"SecurityGroupSelectorTerms is a list of or security group selector terms. The terms are ORed.\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithsecuritygroupselectortermsmixin","title":"fn spec.withSecurityGroupSelectorTermsMixin","text":"<pre><code>withSecurityGroupSelectorTermsMixin(securityGroupSelectorTerms)\n</code></pre> <p>\"SecurityGroupSelectorTerms is a list of or security group selector terms. The terms are ORed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithsubnetselectorterms","title":"fn spec.withSubnetSelectorTerms","text":"<pre><code>withSubnetSelectorTerms(subnetSelectorTerms)\n</code></pre> <p>\"SubnetSelectorTerms is a list of or subnet selector terms. The terms are ORed.\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithsubnetselectortermsmixin","title":"fn spec.withSubnetSelectorTermsMixin","text":"<pre><code>withSubnetSelectorTermsMixin(subnetSelectorTerms)\n</code></pre> <p>\"SubnetSelectorTerms is a list of or subnet selector terms. The terms are ORed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithtags","title":"fn spec.withTags","text":"<pre><code>withTags(tags)\n</code></pre> <p>\"Tags to be applied on ec2 resources like instances and launch templates.\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithtagsmixin","title":"fn spec.withTagsMixin","text":"<pre><code>withTagsMixin(tags)\n</code></pre> <p>\"Tags to be applied on ec2 resources like instances and launch templates.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithuserdata","title":"fn spec.withUserData","text":"<pre><code>withUserData(userData)\n</code></pre> <p>\"UserData to be applied to the provisioned nodes.\\nIt must be in the appropriate format based on the AMIFamily in use. Karpenter will merge certain fields into\\nthis UserData to ensure nodes are being provisioned with the correct configuration.\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#obj-specamiselectorterms","title":"obj spec.amiSelectorTerms","text":"<p>\"AMISelectorTerms is a list of or ami selector terms. The terms are ORed.\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-specamiselectortermswithid","title":"fn spec.amiSelectorTerms.withId","text":"<pre><code>withId(id)\n</code></pre> <p>\"ID is the ami id in EC2\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-specamiselectortermswithname","title":"fn spec.amiSelectorTerms.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the ami name in EC2.\\nThis value is the name field, which is different from the name tag.\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-specamiselectortermswithowner","title":"fn spec.amiSelectorTerms.withOwner","text":"<pre><code>withOwner(owner)\n</code></pre> <p>\"Owner is the owner for the ami.\\nYou can specify a combination of AWS account IDs, \\\"self\\\", \\\"amazon\\\", and \\\"aws-marketplace\\</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-specamiselectortermswithtags","title":"fn spec.amiSelectorTerms.withTags","text":"<pre><code>withTags(tags)\n</code></pre> <p>\"Tags is a map of key/value tags used to select subnets\\nSpecifying '*' for a value selects all values for a given tag key.\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-specamiselectortermswithtagsmixin","title":"fn spec.amiSelectorTerms.withTagsMixin","text":"<pre><code>withTagsMixin(tags)\n</code></pre> <p>\"Tags is a map of key/value tags used to select subnets\\nSpecifying '*' for a value selects all values for a given tag key.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#obj-specblockdevicemappings","title":"obj spec.blockDeviceMappings","text":"<p>\"BlockDeviceMappings to be applied to provisioned nodes.\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingswithdevicename","title":"fn spec.blockDeviceMappings.withDeviceName","text":"<pre><code>withDeviceName(deviceName)\n</code></pre> <p>\"The device name (for example, /dev/sdh or xvdh).\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingswithrootvolume","title":"fn spec.blockDeviceMappings.withRootVolume","text":"<pre><code>withRootVolume(rootVolume)\n</code></pre> <p>\"RootVolume is a flag indicating if this device is mounted as kubelet root dir. You can\\nconfigure at most one root volume in BlockDeviceMappings.\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#obj-specblockdevicemappingsebs","title":"obj spec.blockDeviceMappings.ebs","text":"<p>\"EBS contains parameters used to automatically set up EBS volumes when an instance is launched.\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingsebswithdeleteontermination","title":"fn spec.blockDeviceMappings.ebs.withDeleteOnTermination","text":"<pre><code>withDeleteOnTermination(deleteOnTermination)\n</code></pre> <p>\"DeleteOnTermination indicates whether the EBS volume is deleted on instance termination.\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingsebswithencrypted","title":"fn spec.blockDeviceMappings.ebs.withEncrypted","text":"<pre><code>withEncrypted(encrypted)\n</code></pre> <p>\"Encrypted indicates whether the EBS volume is encrypted. Encrypted volumes can only\\nbe attached to instances that support Amazon EBS encryption. If you are creating\\na volume from a snapshot, you can't specify an encryption value.\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingsebswithiops","title":"fn spec.blockDeviceMappings.ebs.withIops","text":"<pre><code>withIops(iops)\n</code></pre> <p>\"IOPS is the number of I/O operations per second (IOPS). For gp3, io1, and io2 volumes,\\nthis represents the number of IOPS that are provisioned for the volume. For\\ngp2 volumes, this represents the baseline performance of the volume and the\\nrate at which the volume accumulates I/O credits for bursting.\\n\\n\\nThe following are the supported values for each volume type:\\n\\n\\n   * gp3: 3,000-16,000 IOPS\\n\\n\\n   * io1: 100-64,000 IOPS\\n\\n\\n   * io2: 100-64,000 IOPS\\n\\n\\nFor io1 and io2 volumes, we guarantee 64,000 IOPS only for Instances built\\non the Nitro System (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances).\\nOther instance families guarantee performance up to 32,000 IOPS.\\n\\n\\nThis parameter is supported for io1, io2, and gp3 volumes only. This parameter\\nis not supported for gp2, st1, sc1, or standard volumes.\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingsebswithkmskeyid","title":"fn spec.blockDeviceMappings.ebs.withKmsKeyID","text":"<pre><code>withKmsKeyID(kmsKeyID)\n</code></pre> <p>\"KMSKeyID (ARN) of the symmetric Key Management Service (KMS) CMK used for encryption.\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingsebswithsnapshotid","title":"fn spec.blockDeviceMappings.ebs.withSnapshotID","text":"<pre><code>withSnapshotID(snapshotID)\n</code></pre> <p>\"SnapshotID is the ID of an EBS snapshot\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingsebswiththroughput","title":"fn spec.blockDeviceMappings.ebs.withThroughput","text":"<pre><code>withThroughput(throughput)\n</code></pre> <p>\"Throughput to provision for a gp3 volume, with a maximum of 1,000 MiB/s.\\nValid Range: Minimum value of 125. Maximum value of 1000.\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingsebswithvolumesize","title":"fn spec.blockDeviceMappings.ebs.withVolumeSize","text":"<pre><code>withVolumeSize(volumeSize)\n</code></pre> <p>\"VolumeSize in <code>Gi</code>, <code>G</code>, <code>Ti</code>, or <code>T</code>. You must specify either a snapshot ID or\\na volume size. The following are the supported volumes sizes for each volume\\ntype:\\n\\n\\n   * gp2 and gp3: 1-16,384\\n\\n\\n   * io1 and io2: 4-16,384\\n\\n\\n   * st1 and sc1: 125-16,384\\n\\n\\n   * standard: 1-1,024\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingsebswithvolumetype","title":"fn spec.blockDeviceMappings.ebs.withVolumeType","text":"<pre><code>withVolumeType(volumeType)\n</code></pre> <p>\"VolumeType of the block device.\\nFor more information, see Amazon EBS volume types (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html)\\nin the Amazon Elastic Compute Cloud User Guide.\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#obj-specmetadataoptions","title":"obj spec.metadataOptions","text":"<p>\"MetadataOptions for the generated launch template of provisioned nodes.\\n\\n\\nThis specifies the exposure of the Instance Metadata Service to\\nprovisioned EC2 nodes. For more information,\\nsee Instance Metadata and User Data\\n(https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html)\\nin the Amazon Elastic Compute Cloud User Guide.\\n\\n\\nRefer to recommended, security best practices\\n(https://aws.github.io/aws-eks-best-practices/security/docs/iam/#restrict-access-to-the-instance-profile-assigned-to-the-worker-node)\\nfor limiting exposure of Instance Metadata and User Data to pods.\\nIf omitted, defaults to httpEndpoint enabled, with httpProtocolIPv6\\ndisabled, with httpPutResponseLimit of 2, and with httpTokens\\nrequired.\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-specmetadataoptionswithhttpendpoint","title":"fn spec.metadataOptions.withHttpEndpoint","text":"<pre><code>withHttpEndpoint(httpEndpoint)\n</code></pre> <p>\"HTTPEndpoint enables or disables the HTTP metadata endpoint on provisioned\\nnodes. If metadata options is non-nil, but this parameter is not specified,\\nthe default state is \\\"enabled\\\".\\n\\n\\nIf you specify a value of \\\"disabled\\\", instance metadata will not be accessible\\non the node.\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-specmetadataoptionswithhttpprotocolipv6","title":"fn spec.metadataOptions.withHttpProtocolIPv6","text":"<pre><code>withHttpProtocolIPv6(httpProtocolIPv6)\n</code></pre> <p>\"HTTPProtocolIPv6 enables or disables the IPv6 endpoint for the instance metadata\\nservice on provisioned nodes. If metadata options is non-nil, but this parameter\\nis not specified, the default state is \\\"disabled\\\".\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-specmetadataoptionswithhttpputresponsehoplimit","title":"fn spec.metadataOptions.withHttpPutResponseHopLimit","text":"<pre><code>withHttpPutResponseHopLimit(httpPutResponseHopLimit)\n</code></pre> <p>\"HTTPPutResponseHopLimit is the desired HTTP PUT response hop limit for\\ninstance metadata requests. The larger the number, the further instance\\nmetadata requests can travel. Possible values are integers from 1 to 64.\\nIf metadata options is non-nil, but this parameter is not specified, the\\ndefault value is 2.\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-specmetadataoptionswithhttptokens","title":"fn spec.metadataOptions.withHttpTokens","text":"<pre><code>withHttpTokens(httpTokens)\n</code></pre> <p>\"HTTPTokens determines the state of token usage for instance metadata\\nrequests. If metadata options is non-nil, but this parameter is not\\nspecified, the default state is \\\"required\\\".\\n\\n\\nIf the state is optional, one can choose to retrieve instance metadata with\\nor without a signed token header on the request. If one retrieves the IAM\\nrole credentials without a token, the version 1.0 role credentials are\\nreturned. If one retrieves the IAM role credentials using a valid signed\\ntoken, the version 2.0 role credentials are returned.\\n\\n\\nIf the state is \\\"required\\\", one must send a signed token header with any\\ninstance metadata retrieval requests. In this state, retrieving the IAM\\nrole credentials always returns the version 2.0 credentials; the version\\n1.0 credentials are not available.\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#obj-specsecuritygroupselectorterms","title":"obj spec.securityGroupSelectorTerms","text":"<p>\"SecurityGroupSelectorTerms is a list of or security group selector terms. The terms are ORed.\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-specsecuritygroupselectortermswithid","title":"fn spec.securityGroupSelectorTerms.withId","text":"<pre><code>withId(id)\n</code></pre> <p>\"ID is the security group id in EC2\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-specsecuritygroupselectortermswithname","title":"fn spec.securityGroupSelectorTerms.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the security group name in EC2.\\nThis value is the name field, which is different from the name tag.\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-specsecuritygroupselectortermswithtags","title":"fn spec.securityGroupSelectorTerms.withTags","text":"<pre><code>withTags(tags)\n</code></pre> <p>\"Tags is a map of key/value tags used to select subnets\\nSpecifying '*' for a value selects all values for a given tag key.\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-specsecuritygroupselectortermswithtagsmixin","title":"fn spec.securityGroupSelectorTerms.withTagsMixin","text":"<pre><code>withTagsMixin(tags)\n</code></pre> <p>\"Tags is a map of key/value tags used to select subnets\\nSpecifying '*' for a value selects all values for a given tag key.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#obj-specsubnetselectorterms","title":"obj spec.subnetSelectorTerms","text":"<p>\"SubnetSelectorTerms is a list of or subnet selector terms. The terms are ORed.\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-specsubnetselectortermswithid","title":"fn spec.subnetSelectorTerms.withId","text":"<pre><code>withId(id)\n</code></pre> <p>\"ID is the subnet id in EC2\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-specsubnetselectortermswithtags","title":"fn spec.subnetSelectorTerms.withTags","text":"<pre><code>withTags(tags)\n</code></pre> <p>\"Tags is a map of key/value tags used to select subnets\\nSpecifying '*' for a value selects all values for a given tag key.\"</p>"},{"location":"0.34/aws/karpenter/v1beta1/ec2NodeClass/#fn-specsubnetselectortermswithtagsmixin","title":"fn spec.subnetSelectorTerms.withTagsMixin","text":"<pre><code>withTagsMixin(tags)\n</code></pre> <p>\"Tags is a map of key/value tags used to select subnets\\nSpecifying '*' for a value selects all values for a given tag key.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.34/sh/","title":"karpenter","text":"<pre><code>local karpenter = import \"github.com/jsonnet-libs/karpenter-libsonnet/0.34/sh/main.libsonnet\"\n</code></pre> <ul> <li>karpenter</li> </ul>"},{"location":"0.34/sh/karpenter/","title":"karpenter","text":"<ul> <li>v1beta1</li> </ul>"},{"location":"0.34/sh/karpenter/v1beta1/","title":"karpenter.v1beta1","text":"<ul> <li>nodeClaim</li> <li>nodePool</li> </ul>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/","title":"karpenter.v1beta1.nodeClaim","text":"<p>\"NodeClaim is the Schema for the NodeClaims API\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withRequirements(requirements)</code></li> <li><code>fn withRequirementsMixin(requirements)</code></li> <li><code>fn withStartupTaints(startupTaints)</code></li> <li><code>fn withStartupTaintsMixin(startupTaints)</code></li> <li><code>fn withTaints(taints)</code></li> <li><code>fn withTaintsMixin(taints)</code></li> <li><code>obj spec.kubelet</code><ul> <li><code>fn withClusterDNS(clusterDNS)</code></li> <li><code>fn withClusterDNSMixin(clusterDNS)</code></li> <li><code>fn withCpuCFSQuota(cpuCFSQuota)</code></li> <li><code>fn withEvictionHard(evictionHard)</code></li> <li><code>fn withEvictionHardMixin(evictionHard)</code></li> <li><code>fn withEvictionMaxPodGracePeriod(evictionMaxPodGracePeriod)</code></li> <li><code>fn withEvictionSoft(evictionSoft)</code></li> <li><code>fn withEvictionSoftGracePeriod(evictionSoftGracePeriod)</code></li> <li><code>fn withEvictionSoftGracePeriodMixin(evictionSoftGracePeriod)</code></li> <li><code>fn withEvictionSoftMixin(evictionSoft)</code></li> <li><code>fn withImageGCHighThresholdPercent(imageGCHighThresholdPercent)</code></li> <li><code>fn withImageGCLowThresholdPercent(imageGCLowThresholdPercent)</code></li> <li><code>fn withKubeReserved(kubeReserved)</code></li> <li><code>fn withKubeReservedMixin(kubeReserved)</code></li> <li><code>fn withMaxPods(maxPods)</code></li> <li><code>fn withPodsPerCore(podsPerCore)</code></li> <li><code>fn withSystemReserved(systemReserved)</code></li> <li><code>fn withSystemReservedMixin(systemReserved)</code></li> </ul> </li> <li><code>obj spec.nodeClassRef</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.requirements</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> <li><code>obj spec.resources</code><ul> <li><code>fn withRequests(requests)</code></li> <li><code>fn withRequestsMixin(requests)</code></li> </ul> </li> <li><code>obj spec.startupTaints</code><ul> <li><code>fn withEffect(effect)</code></li> <li><code>fn withKey(key)</code></li> <li><code>fn withTimeAdded(timeAdded)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.taints</code><ul> <li><code>fn withEffect(effect)</code></li> <li><code>fn withKey(key)</code></li> <li><code>fn withTimeAdded(timeAdded)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fields","title":"Fields","text":""},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of NodeClaim</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#obj-spec","title":"obj spec","text":"<p>\"NodeClaimSpec describes the desired state of the NodeClaim\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-specwithrequirements","title":"fn spec.withRequirements","text":"<pre><code>withRequirements(requirements)\n</code></pre> <p>\"Requirements are layered with GetLabels and applied to every node.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-specwithrequirementsmixin","title":"fn spec.withRequirementsMixin","text":"<pre><code>withRequirementsMixin(requirements)\n</code></pre> <p>\"Requirements are layered with GetLabels and applied to every node.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-specwithstartuptaints","title":"fn spec.withStartupTaints","text":"<pre><code>withStartupTaints(startupTaints)\n</code></pre> <p>\"StartupTaints are taints that are applied to nodes upon startup which are expected to be removed automatically\\nwithin a short period of time, typically by a DaemonSet that tolerates the taint. These are commonly used by\\ndaemonsets to allow initialization and enforce startup ordering.  StartupTaints are ignored for provisioning\\npurposes in that pods are not required to tolerate a StartupTaint in order to have nodes provisioned for them.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-specwithstartuptaintsmixin","title":"fn spec.withStartupTaintsMixin","text":"<pre><code>withStartupTaintsMixin(startupTaints)\n</code></pre> <p>\"StartupTaints are taints that are applied to nodes upon startup which are expected to be removed automatically\\nwithin a short period of time, typically by a DaemonSet that tolerates the taint. These are commonly used by\\ndaemonsets to allow initialization and enforce startup ordering.  StartupTaints are ignored for provisioning\\npurposes in that pods are not required to tolerate a StartupTaint in order to have nodes provisioned for them.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-specwithtaints","title":"fn spec.withTaints","text":"<pre><code>withTaints(taints)\n</code></pre> <p>\"Taints will be applied to the NodeClaim's node.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-specwithtaintsmixin","title":"fn spec.withTaintsMixin","text":"<pre><code>withTaintsMixin(taints)\n</code></pre> <p>\"Taints will be applied to the NodeClaim's node.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#obj-speckubelet","title":"obj spec.kubelet","text":"<p>\"Kubelet defines args to be used when configuring kubelet on provisioned nodes.\\nThey are a subset of the upstream types, recognizing not all options may be supported.\\nWherever possible, the types and names should reflect the upstream kubelet types.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithclusterdns","title":"fn spec.kubelet.withClusterDNS","text":"<pre><code>withClusterDNS(clusterDNS)\n</code></pre> <p>\"clusterDNS is a list of IP addresses for the cluster DNS server.\\nNote that not all providers may use all addresses.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithclusterdnsmixin","title":"fn spec.kubelet.withClusterDNSMixin","text":"<pre><code>withClusterDNSMixin(clusterDNS)\n</code></pre> <p>\"clusterDNS is a list of IP addresses for the cluster DNS server.\\nNote that not all providers may use all addresses.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithcpucfsquota","title":"fn spec.kubelet.withCpuCFSQuota","text":"<pre><code>withCpuCFSQuota(cpuCFSQuota)\n</code></pre> <p>\"CPUCFSQuota enables CPU CFS quota enforcement for containers that specify CPU limits.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithevictionhard","title":"fn spec.kubelet.withEvictionHard","text":"<pre><code>withEvictionHard(evictionHard)\n</code></pre> <p>\"EvictionHard is the map of signal names to quantities that define hard eviction thresholds\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithevictionhardmixin","title":"fn spec.kubelet.withEvictionHardMixin","text":"<pre><code>withEvictionHardMixin(evictionHard)\n</code></pre> <p>\"EvictionHard is the map of signal names to quantities that define hard eviction thresholds\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithevictionmaxpodgraceperiod","title":"fn spec.kubelet.withEvictionMaxPodGracePeriod","text":"<pre><code>withEvictionMaxPodGracePeriod(evictionMaxPodGracePeriod)\n</code></pre> <p>\"EvictionMaxPodGracePeriod is the maximum allowed grace period (in seconds) to use when terminating pods in\\nresponse to soft eviction thresholds being met.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithevictionsoft","title":"fn spec.kubelet.withEvictionSoft","text":"<pre><code>withEvictionSoft(evictionSoft)\n</code></pre> <p>\"EvictionSoft is the map of signal names to quantities that define soft eviction thresholds\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithevictionsoftgraceperiod","title":"fn spec.kubelet.withEvictionSoftGracePeriod","text":"<pre><code>withEvictionSoftGracePeriod(evictionSoftGracePeriod)\n</code></pre> <p>\"EvictionSoftGracePeriod is the map of signal names to quantities that define grace periods for each eviction signal\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithevictionsoftgraceperiodmixin","title":"fn spec.kubelet.withEvictionSoftGracePeriodMixin","text":"<pre><code>withEvictionSoftGracePeriodMixin(evictionSoftGracePeriod)\n</code></pre> <p>\"EvictionSoftGracePeriod is the map of signal names to quantities that define grace periods for each eviction signal\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithevictionsoftmixin","title":"fn spec.kubelet.withEvictionSoftMixin","text":"<pre><code>withEvictionSoftMixin(evictionSoft)\n</code></pre> <p>\"EvictionSoft is the map of signal names to quantities that define soft eviction thresholds\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithimagegchighthresholdpercent","title":"fn spec.kubelet.withImageGCHighThresholdPercent","text":"<pre><code>withImageGCHighThresholdPercent(imageGCHighThresholdPercent)\n</code></pre> <p>\"ImageGCHighThresholdPercent is the percent of disk usage after which image\\ngarbage collection is always run. The percent is calculated by dividing this\\nfield value by 100, so this field must be between 0 and 100, inclusive.\\nWhen specified, the value must be greater than ImageGCLowThresholdPercent.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithimagegclowthresholdpercent","title":"fn spec.kubelet.withImageGCLowThresholdPercent","text":"<pre><code>withImageGCLowThresholdPercent(imageGCLowThresholdPercent)\n</code></pre> <p>\"ImageGCLowThresholdPercent is the percent of disk usage before which image\\ngarbage collection is never run. Lowest disk usage to garbage collect to.\\nThe percent is calculated by dividing this field value by 100,\\nso the field value must be between 0 and 100, inclusive.\\nWhen specified, the value must be less than imageGCHighThresholdPercent\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithkubereserved","title":"fn spec.kubelet.withKubeReserved","text":"<pre><code>withKubeReserved(kubeReserved)\n</code></pre> <p>\"KubeReserved contains resources reserved for Kubernetes system components.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithkubereservedmixin","title":"fn spec.kubelet.withKubeReservedMixin","text":"<pre><code>withKubeReservedMixin(kubeReserved)\n</code></pre> <p>\"KubeReserved contains resources reserved for Kubernetes system components.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithmaxpods","title":"fn spec.kubelet.withMaxPods","text":"<pre><code>withMaxPods(maxPods)\n</code></pre> <p>\"MaxPods is an override for the maximum number of pods that can run on\\na worker node instance.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithpodspercore","title":"fn spec.kubelet.withPodsPerCore","text":"<pre><code>withPodsPerCore(podsPerCore)\n</code></pre> <p>\"PodsPerCore is an override for the number of pods that can run on a worker node\\ninstance based on the number of cpu cores. This value cannot exceed MaxPods, so, if\\nMaxPods is a lower value, that value will be used.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithsystemreserved","title":"fn spec.kubelet.withSystemReserved","text":"<pre><code>withSystemReserved(systemReserved)\n</code></pre> <p>\"SystemReserved contains resources reserved for OS system daemons and kernel memory.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithsystemreservedmixin","title":"fn spec.kubelet.withSystemReservedMixin","text":"<pre><code>withSystemReservedMixin(systemReserved)\n</code></pre> <p>\"SystemReserved contains resources reserved for OS system daemons and kernel memory.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#obj-specnodeclassref","title":"obj spec.nodeClassRef","text":"<p>\"NodeClassRef is a reference to an object that defines provider specific configuration\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-specnodeclassrefwithapiversion","title":"fn spec.nodeClassRef.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"API version of the referent\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-specnodeclassrefwithkind","title":"fn spec.nodeClassRef.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\\</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-specnodeclassrefwithname","title":"fn spec.nodeClassRef.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#obj-specrequirements","title":"obj spec.requirements","text":"<p>\"Requirements are layered with GetLabels and applied to every node.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-specrequirementswithkey","title":"fn spec.requirements.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"The label key that the selector applies to.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-specrequirementswithoperator","title":"fn spec.requirements.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-specrequirementswithvalues","title":"fn spec.requirements.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-specrequirementswithvaluesmixin","title":"fn spec.requirements.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#obj-specresources","title":"obj spec.resources","text":"<p>\"Resources models the resource requirements for the NodeClaim to launch\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-specresourceswithrequests","title":"fn spec.resources.withRequests","text":"<pre><code>withRequests(requests)\n</code></pre> <p>\"Requests describes the minimum required resources for the NodeClaim to launch\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-specresourceswithrequestsmixin","title":"fn spec.resources.withRequestsMixin","text":"<pre><code>withRequestsMixin(requests)\n</code></pre> <p>\"Requests describes the minimum required resources for the NodeClaim to launch\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#obj-specstartuptaints","title":"obj spec.startupTaints","text":"<p>\"StartupTaints are taints that are applied to nodes upon startup which are expected to be removed automatically\\nwithin a short period of time, typically by a DaemonSet that tolerates the taint. These are commonly used by\\ndaemonsets to allow initialization and enforce startup ordering.  StartupTaints are ignored for provisioning\\npurposes in that pods are not required to tolerate a StartupTaint in order to have nodes provisioned for them.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-specstartuptaintswitheffect","title":"fn spec.startupTaints.withEffect","text":"<pre><code>withEffect(effect)\n</code></pre> <p>\"Required. The effect of the taint on pods\\nthat do not tolerate the taint.\\nValid effects are NoSchedule, PreferNoSchedule and NoExecute.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-specstartuptaintswithkey","title":"fn spec.startupTaints.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Required. The taint key to be applied to a node.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-specstartuptaintswithtimeadded","title":"fn spec.startupTaints.withTimeAdded","text":"<pre><code>withTimeAdded(timeAdded)\n</code></pre> <p>\"TimeAdded represents the time at which the taint was added.\\nIt is only written for NoExecute taints.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-specstartuptaintswithvalue","title":"fn spec.startupTaints.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"The taint value corresponding to the taint key.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#obj-spectaints","title":"obj spec.taints","text":"<p>\"Taints will be applied to the NodeClaim's node.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-spectaintswitheffect","title":"fn spec.taints.withEffect","text":"<pre><code>withEffect(effect)\n</code></pre> <p>\"Required. The effect of the taint on pods\\nthat do not tolerate the taint.\\nValid effects are NoSchedule, PreferNoSchedule and NoExecute.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-spectaintswithkey","title":"fn spec.taints.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Required. The taint key to be applied to a node.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-spectaintswithtimeadded","title":"fn spec.taints.withTimeAdded","text":"<pre><code>withTimeAdded(timeAdded)\n</code></pre> <p>\"TimeAdded represents the time at which the taint was added.\\nIt is only written for NoExecute taints.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodeClaim/#fn-spectaintswithvalue","title":"fn spec.taints.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"The taint value corresponding to the taint key.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/","title":"karpenter.v1beta1.nodePool","text":"<p>\"NodePool is the Schema for the NodePools API\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withLimits(limits)</code></li> <li><code>fn withLimitsMixin(limits)</code></li> <li><code>fn withWeight(weight)</code></li> <li><code>obj spec.disruption</code><ul> <li><code>fn withBudgets(budgets)</code></li> <li><code>fn withBudgetsMixin(budgets)</code></li> <li><code>fn withConsolidateAfter(consolidateAfter)</code></li> <li><code>fn withConsolidationPolicy(consolidationPolicy)</code></li> <li><code>fn withExpireAfter(expireAfter)</code></li> <li><code>obj spec.disruption.budgets</code><ul> <li><code>fn withDuration(duration)</code></li> <li><code>fn withNodes(nodes)</code></li> <li><code>fn withSchedule(schedule)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.template</code><ul> <li><code>obj spec.template.metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> </ul> </li> <li><code>obj spec.template.spec</code><ul> <li><code>fn withRequirements(requirements)</code></li> <li><code>fn withRequirementsMixin(requirements)</code></li> <li><code>fn withStartupTaints(startupTaints)</code></li> <li><code>fn withStartupTaintsMixin(startupTaints)</code></li> <li><code>fn withTaints(taints)</code></li> <li><code>fn withTaintsMixin(taints)</code></li> <li><code>obj spec.template.spec.kubelet</code><ul> <li><code>fn withClusterDNS(clusterDNS)</code></li> <li><code>fn withClusterDNSMixin(clusterDNS)</code></li> <li><code>fn withCpuCFSQuota(cpuCFSQuota)</code></li> <li><code>fn withEvictionHard(evictionHard)</code></li> <li><code>fn withEvictionHardMixin(evictionHard)</code></li> <li><code>fn withEvictionMaxPodGracePeriod(evictionMaxPodGracePeriod)</code></li> <li><code>fn withEvictionSoft(evictionSoft)</code></li> <li><code>fn withEvictionSoftGracePeriod(evictionSoftGracePeriod)</code></li> <li><code>fn withEvictionSoftGracePeriodMixin(evictionSoftGracePeriod)</code></li> <li><code>fn withEvictionSoftMixin(evictionSoft)</code></li> <li><code>fn withImageGCHighThresholdPercent(imageGCHighThresholdPercent)</code></li> <li><code>fn withImageGCLowThresholdPercent(imageGCLowThresholdPercent)</code></li> <li><code>fn withKubeReserved(kubeReserved)</code></li> <li><code>fn withKubeReservedMixin(kubeReserved)</code></li> <li><code>fn withMaxPods(maxPods)</code></li> <li><code>fn withPodsPerCore(podsPerCore)</code></li> <li><code>fn withSystemReserved(systemReserved)</code></li> <li><code>fn withSystemReservedMixin(systemReserved)</code></li> </ul> </li> <li><code>obj spec.template.spec.nodeClassRef</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.template.spec.requirements</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> <li><code>obj spec.template.spec.resources</code><ul> <li><code>fn withRequests(requests)</code></li> <li><code>fn withRequestsMixin(requests)</code></li> </ul> </li> <li><code>obj spec.template.spec.startupTaints</code><ul> <li><code>fn withEffect(effect)</code></li> <li><code>fn withKey(key)</code></li> <li><code>fn withTimeAdded(timeAdded)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.template.spec.taints</code><ul> <li><code>fn withEffect(effect)</code></li> <li><code>fn withKey(key)</code></li> <li><code>fn withTimeAdded(timeAdded)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fields","title":"Fields","text":""},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of NodePool</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#obj-spec","title":"obj spec","text":"<p>\"NodePoolSpec is the top level nodepool specification. Nodepools\\nlaunch nodes in response to pods that are unschedulable. A single nodepool\\nis capable of managing a diverse set of nodes. Node properties are determined\\nfrom a combination of nodepool and pod scheduling constraints.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-specwithlimits","title":"fn spec.withLimits","text":"<pre><code>withLimits(limits)\n</code></pre> <p>\"Limits define a set of bounds for provisioning capacity.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-specwithlimitsmixin","title":"fn spec.withLimitsMixin","text":"<pre><code>withLimitsMixin(limits)\n</code></pre> <p>\"Limits define a set of bounds for provisioning capacity.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-specwithweight","title":"fn spec.withWeight","text":"<pre><code>withWeight(weight)\n</code></pre> <p>\"Weight is the priority given to the nodepool during scheduling. A higher\\nnumerical weight indicates that this nodepool will be ordered\\nahead of other nodepools with lower weights. A nodepool with no weight\\nwill be treated as if it is a nodepool with a weight of 0.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#obj-specdisruption","title":"obj spec.disruption","text":"<p>\"Disruption contains the parameters that relate to Karpenter's disruption logic\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-specdisruptionwithbudgets","title":"fn spec.disruption.withBudgets","text":"<pre><code>withBudgets(budgets)\n</code></pre> <p>\"Budgets is a list of Budgets.\\nIf there are multiple active budgets, Karpenter uses\\nthe most restrictive value. If left undefined,\\nthis will default to one budget with a value to 10%.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-specdisruptionwithbudgetsmixin","title":"fn spec.disruption.withBudgetsMixin","text":"<pre><code>withBudgetsMixin(budgets)\n</code></pre> <p>\"Budgets is a list of Budgets.\\nIf there are multiple active budgets, Karpenter uses\\nthe most restrictive value. If left undefined,\\nthis will default to one budget with a value to 10%.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-specdisruptionwithconsolidateafter","title":"fn spec.disruption.withConsolidateAfter","text":"<pre><code>withConsolidateAfter(consolidateAfter)\n</code></pre> <p>\"ConsolidateAfter is the duration the controller will wait\\nbefore attempting to terminate nodes that are underutilized.\\nRefer to ConsolidationPolicy for how underutilization is considered.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-specdisruptionwithconsolidationpolicy","title":"fn spec.disruption.withConsolidationPolicy","text":"<pre><code>withConsolidationPolicy(consolidationPolicy)\n</code></pre> <p>\"ConsolidationPolicy describes which nodes Karpenter can disrupt through its consolidation\\nalgorithm. This policy defaults to \\\"WhenUnderutilized\\\" if not specified\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-specdisruptionwithexpireafter","title":"fn spec.disruption.withExpireAfter","text":"<pre><code>withExpireAfter(expireAfter)\n</code></pre> <p>\"ExpireAfter is the duration the controller will wait\\nbefore terminating a node, measured from when the node is created. This\\nis useful to implement features like eventually consistent node upgrade,\\nmemory leak protection, and disruption testing.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#obj-specdisruptionbudgets","title":"obj spec.disruption.budgets","text":"<p>\"Budgets is a list of Budgets.\\nIf there are multiple active budgets, Karpenter uses\\nthe most restrictive value. If left undefined,\\nthis will default to one budget with a value to 10%.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-specdisruptionbudgetswithduration","title":"fn spec.disruption.budgets.withDuration","text":"<pre><code>withDuration(duration)\n</code></pre> <p>\"Duration determines how long a Budget is active since each Schedule hit.\\nOnly minutes and hours are accepted, as cron does not work in seconds.\\nIf omitted, the budget is always active.\\nThis is required if Schedule is set.\\nThis regex has an optional 0s at the end since the duration.String() always adds\\na 0s at the end.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-specdisruptionbudgetswithnodes","title":"fn spec.disruption.budgets.withNodes","text":"<pre><code>withNodes(nodes)\n</code></pre> <p>\"Nodes dictates the maximum number of NodeClaims owned by this NodePool\\nthat can be terminating at once. This is calculated by counting nodes that\\nhave a deletion timestamp set, or are actively being deleted by Karpenter.\\nThis field is required when specifying a budget.\\nThis cannot be of type intstr.IntOrString since kubebuilder doesn't support pattern\\nchecking for int nodes for IntOrString nodes.\\nRef: https://github.com/kubernetes-sigs/controller-tools/blob/55efe4be40394a288216dab63156b0a64fb82929/pkg/crd/markers/validation.go#L379-L388\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-specdisruptionbudgetswithschedule","title":"fn spec.disruption.budgets.withSchedule","text":"<pre><code>withSchedule(schedule)\n</code></pre> <p>\"Schedule specifies when a budget begins being active, following\\nthe upstream cronjob syntax. If omitted, the budget is always active.\\nTimezones are not supported.\\nThis field is required if Duration is set.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#obj-spectemplate","title":"obj spec.template","text":"<p>\"Template contains the template of possibilities for the provisioning logic to launch a NodeClaim with.\\nNodeClaims launched from this NodePool will often be further constrained than the template specifies.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#obj-spectemplatemetadata","title":"obj spec.template.metadata","text":""},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-spectemplatemetadatawithannotations","title":"fn spec.template.metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be\\nset by external tools to store and retrieve arbitrary metadata. They are not\\nqueryable and should be preserved when modifying objects.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-spectemplatemetadatawithannotationsmixin","title":"fn spec.template.metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be\\nset by external tools to store and retrieve arbitrary metadata. They are not\\nqueryable and should be preserved when modifying objects.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-spectemplatemetadatawithlabels","title":"fn spec.template.metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize\\n(scope and select) objects. May match selectors of replication controllers\\nand services.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-spectemplatemetadatawithlabelsmixin","title":"fn spec.template.metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize\\n(scope and select) objects. May match selectors of replication controllers\\nand services.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#obj-spectemplatespec","title":"obj spec.template.spec","text":"<p>\"NodeClaimSpec describes the desired state of the NodeClaim\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecwithrequirements","title":"fn spec.template.spec.withRequirements","text":"<pre><code>withRequirements(requirements)\n</code></pre> <p>\"Requirements are layered with GetLabels and applied to every node.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecwithrequirementsmixin","title":"fn spec.template.spec.withRequirementsMixin","text":"<pre><code>withRequirementsMixin(requirements)\n</code></pre> <p>\"Requirements are layered with GetLabels and applied to every node.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecwithstartuptaints","title":"fn spec.template.spec.withStartupTaints","text":"<pre><code>withStartupTaints(startupTaints)\n</code></pre> <p>\"StartupTaints are taints that are applied to nodes upon startup which are expected to be removed automatically\\nwithin a short period of time, typically by a DaemonSet that tolerates the taint. These are commonly used by\\ndaemonsets to allow initialization and enforce startup ordering.  StartupTaints are ignored for provisioning\\npurposes in that pods are not required to tolerate a StartupTaint in order to have nodes provisioned for them.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecwithstartuptaintsmixin","title":"fn spec.template.spec.withStartupTaintsMixin","text":"<pre><code>withStartupTaintsMixin(startupTaints)\n</code></pre> <p>\"StartupTaints are taints that are applied to nodes upon startup which are expected to be removed automatically\\nwithin a short period of time, typically by a DaemonSet that tolerates the taint. These are commonly used by\\ndaemonsets to allow initialization and enforce startup ordering.  StartupTaints are ignored for provisioning\\npurposes in that pods are not required to tolerate a StartupTaint in order to have nodes provisioned for them.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecwithtaints","title":"fn spec.template.spec.withTaints","text":"<pre><code>withTaints(taints)\n</code></pre> <p>\"Taints will be applied to the NodeClaim's node.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecwithtaintsmixin","title":"fn spec.template.spec.withTaintsMixin","text":"<pre><code>withTaintsMixin(taints)\n</code></pre> <p>\"Taints will be applied to the NodeClaim's node.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#obj-spectemplatespeckubelet","title":"obj spec.template.spec.kubelet","text":"<p>\"Kubelet defines args to be used when configuring kubelet on provisioned nodes.\\nThey are a subset of the upstream types, recognizing not all options may be supported.\\nWherever possible, the types and names should reflect the upstream kubelet types.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithclusterdns","title":"fn spec.template.spec.kubelet.withClusterDNS","text":"<pre><code>withClusterDNS(clusterDNS)\n</code></pre> <p>\"clusterDNS is a list of IP addresses for the cluster DNS server.\\nNote that not all providers may use all addresses.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithclusterdnsmixin","title":"fn spec.template.spec.kubelet.withClusterDNSMixin","text":"<pre><code>withClusterDNSMixin(clusterDNS)\n</code></pre> <p>\"clusterDNS is a list of IP addresses for the cluster DNS server.\\nNote that not all providers may use all addresses.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithcpucfsquota","title":"fn spec.template.spec.kubelet.withCpuCFSQuota","text":"<pre><code>withCpuCFSQuota(cpuCFSQuota)\n</code></pre> <p>\"CPUCFSQuota enables CPU CFS quota enforcement for containers that specify CPU limits.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithevictionhard","title":"fn spec.template.spec.kubelet.withEvictionHard","text":"<pre><code>withEvictionHard(evictionHard)\n</code></pre> <p>\"EvictionHard is the map of signal names to quantities that define hard eviction thresholds\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithevictionhardmixin","title":"fn spec.template.spec.kubelet.withEvictionHardMixin","text":"<pre><code>withEvictionHardMixin(evictionHard)\n</code></pre> <p>\"EvictionHard is the map of signal names to quantities that define hard eviction thresholds\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithevictionmaxpodgraceperiod","title":"fn spec.template.spec.kubelet.withEvictionMaxPodGracePeriod","text":"<pre><code>withEvictionMaxPodGracePeriod(evictionMaxPodGracePeriod)\n</code></pre> <p>\"EvictionMaxPodGracePeriod is the maximum allowed grace period (in seconds) to use when terminating pods in\\nresponse to soft eviction thresholds being met.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithevictionsoft","title":"fn spec.template.spec.kubelet.withEvictionSoft","text":"<pre><code>withEvictionSoft(evictionSoft)\n</code></pre> <p>\"EvictionSoft is the map of signal names to quantities that define soft eviction thresholds\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithevictionsoftgraceperiod","title":"fn spec.template.spec.kubelet.withEvictionSoftGracePeriod","text":"<pre><code>withEvictionSoftGracePeriod(evictionSoftGracePeriod)\n</code></pre> <p>\"EvictionSoftGracePeriod is the map of signal names to quantities that define grace periods for each eviction signal\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithevictionsoftgraceperiodmixin","title":"fn spec.template.spec.kubelet.withEvictionSoftGracePeriodMixin","text":"<pre><code>withEvictionSoftGracePeriodMixin(evictionSoftGracePeriod)\n</code></pre> <p>\"EvictionSoftGracePeriod is the map of signal names to quantities that define grace periods for each eviction signal\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithevictionsoftmixin","title":"fn spec.template.spec.kubelet.withEvictionSoftMixin","text":"<pre><code>withEvictionSoftMixin(evictionSoft)\n</code></pre> <p>\"EvictionSoft is the map of signal names to quantities that define soft eviction thresholds\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithimagegchighthresholdpercent","title":"fn spec.template.spec.kubelet.withImageGCHighThresholdPercent","text":"<pre><code>withImageGCHighThresholdPercent(imageGCHighThresholdPercent)\n</code></pre> <p>\"ImageGCHighThresholdPercent is the percent of disk usage after which image\\ngarbage collection is always run. The percent is calculated by dividing this\\nfield value by 100, so this field must be between 0 and 100, inclusive.\\nWhen specified, the value must be greater than ImageGCLowThresholdPercent.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithimagegclowthresholdpercent","title":"fn spec.template.spec.kubelet.withImageGCLowThresholdPercent","text":"<pre><code>withImageGCLowThresholdPercent(imageGCLowThresholdPercent)\n</code></pre> <p>\"ImageGCLowThresholdPercent is the percent of disk usage before which image\\ngarbage collection is never run. Lowest disk usage to garbage collect to.\\nThe percent is calculated by dividing this field value by 100,\\nso the field value must be between 0 and 100, inclusive.\\nWhen specified, the value must be less than imageGCHighThresholdPercent\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithkubereserved","title":"fn spec.template.spec.kubelet.withKubeReserved","text":"<pre><code>withKubeReserved(kubeReserved)\n</code></pre> <p>\"KubeReserved contains resources reserved for Kubernetes system components.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithkubereservedmixin","title":"fn spec.template.spec.kubelet.withKubeReservedMixin","text":"<pre><code>withKubeReservedMixin(kubeReserved)\n</code></pre> <p>\"KubeReserved contains resources reserved for Kubernetes system components.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithmaxpods","title":"fn spec.template.spec.kubelet.withMaxPods","text":"<pre><code>withMaxPods(maxPods)\n</code></pre> <p>\"MaxPods is an override for the maximum number of pods that can run on\\na worker node instance.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithpodspercore","title":"fn spec.template.spec.kubelet.withPodsPerCore","text":"<pre><code>withPodsPerCore(podsPerCore)\n</code></pre> <p>\"PodsPerCore is an override for the number of pods that can run on a worker node\\ninstance based on the number of cpu cores. This value cannot exceed MaxPods, so, if\\nMaxPods is a lower value, that value will be used.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithsystemreserved","title":"fn spec.template.spec.kubelet.withSystemReserved","text":"<pre><code>withSystemReserved(systemReserved)\n</code></pre> <p>\"SystemReserved contains resources reserved for OS system daemons and kernel memory.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithsystemreservedmixin","title":"fn spec.template.spec.kubelet.withSystemReservedMixin","text":"<pre><code>withSystemReservedMixin(systemReserved)\n</code></pre> <p>\"SystemReserved contains resources reserved for OS system daemons and kernel memory.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#obj-spectemplatespecnodeclassref","title":"obj spec.template.spec.nodeClassRef","text":"<p>\"NodeClassRef is a reference to an object that defines provider specific configuration\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecnodeclassrefwithapiversion","title":"fn spec.template.spec.nodeClassRef.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"API version of the referent\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecnodeclassrefwithkind","title":"fn spec.template.spec.nodeClassRef.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\\</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecnodeclassrefwithname","title":"fn spec.template.spec.nodeClassRef.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#obj-spectemplatespecrequirements","title":"obj spec.template.spec.requirements","text":"<p>\"Requirements are layered with GetLabels and applied to every node.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecrequirementswithkey","title":"fn spec.template.spec.requirements.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"The label key that the selector applies to.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecrequirementswithoperator","title":"fn spec.template.spec.requirements.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecrequirementswithvalues","title":"fn spec.template.spec.requirements.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecrequirementswithvaluesmixin","title":"fn spec.template.spec.requirements.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#obj-spectemplatespecresources","title":"obj spec.template.spec.resources","text":"<p>\"Resources models the resource requirements for the NodeClaim to launch\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecresourceswithrequests","title":"fn spec.template.spec.resources.withRequests","text":"<pre><code>withRequests(requests)\n</code></pre> <p>\"Requests describes the minimum required resources for the NodeClaim to launch\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecresourceswithrequestsmixin","title":"fn spec.template.spec.resources.withRequestsMixin","text":"<pre><code>withRequestsMixin(requests)\n</code></pre> <p>\"Requests describes the minimum required resources for the NodeClaim to launch\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#obj-spectemplatespecstartuptaints","title":"obj spec.template.spec.startupTaints","text":"<p>\"StartupTaints are taints that are applied to nodes upon startup which are expected to be removed automatically\\nwithin a short period of time, typically by a DaemonSet that tolerates the taint. These are commonly used by\\ndaemonsets to allow initialization and enforce startup ordering.  StartupTaints are ignored for provisioning\\npurposes in that pods are not required to tolerate a StartupTaint in order to have nodes provisioned for them.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecstartuptaintswitheffect","title":"fn spec.template.spec.startupTaints.withEffect","text":"<pre><code>withEffect(effect)\n</code></pre> <p>\"Required. The effect of the taint on pods\\nthat do not tolerate the taint.\\nValid effects are NoSchedule, PreferNoSchedule and NoExecute.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecstartuptaintswithkey","title":"fn spec.template.spec.startupTaints.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Required. The taint key to be applied to a node.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecstartuptaintswithtimeadded","title":"fn spec.template.spec.startupTaints.withTimeAdded","text":"<pre><code>withTimeAdded(timeAdded)\n</code></pre> <p>\"TimeAdded represents the time at which the taint was added.\\nIt is only written for NoExecute taints.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecstartuptaintswithvalue","title":"fn spec.template.spec.startupTaints.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"The taint value corresponding to the taint key.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#obj-spectemplatespectaints","title":"obj spec.template.spec.taints","text":"<p>\"Taints will be applied to the NodeClaim's node.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespectaintswitheffect","title":"fn spec.template.spec.taints.withEffect","text":"<pre><code>withEffect(effect)\n</code></pre> <p>\"Required. The effect of the taint on pods\\nthat do not tolerate the taint.\\nValid effects are NoSchedule, PreferNoSchedule and NoExecute.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespectaintswithkey","title":"fn spec.template.spec.taints.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Required. The taint key to be applied to a node.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespectaintswithtimeadded","title":"fn spec.template.spec.taints.withTimeAdded","text":"<pre><code>withTimeAdded(timeAdded)\n</code></pre> <p>\"TimeAdded represents the time at which the taint was added.\\nIt is only written for NoExecute taints.\"</p>"},{"location":"0.34/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespectaintswithvalue","title":"fn spec.template.spec.taints.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"The taint value corresponding to the taint key.\"</p>"},{"location":"0.35/aws/","title":"karpenter","text":"<pre><code>local karpenter = import \"github.com/jsonnet-libs/karpenter-libsonnet/0.35/aws/main.libsonnet\"\n</code></pre> <ul> <li>karpenter</li> </ul>"},{"location":"0.35/aws/karpenter/","title":"karpenter","text":"<ul> <li>v1beta1</li> </ul>"},{"location":"0.35/aws/karpenter/v1beta1/","title":"karpenter.v1beta1","text":"<ul> <li>ec2NodeClass</li> </ul>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/","title":"karpenter.v1beta1.ec2NodeClass","text":"<p>\"EC2NodeClass is the Schema for the EC2NodeClass API\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withAmiFamily(amiFamily)</code></li> <li><code>fn withAmiSelectorTerms(amiSelectorTerms)</code></li> <li><code>fn withAmiSelectorTermsMixin(amiSelectorTerms)</code></li> <li><code>fn withAssociatePublicIPAddress(associatePublicIPAddress)</code></li> <li><code>fn withBlockDeviceMappings(blockDeviceMappings)</code></li> <li><code>fn withBlockDeviceMappingsMixin(blockDeviceMappings)</code></li> <li><code>fn withContext(context)</code></li> <li><code>fn withDetailedMonitoring(detailedMonitoring)</code></li> <li><code>fn withInstanceProfile(instanceProfile)</code></li> <li><code>fn withInstanceStorePolicy(instanceStorePolicy)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withSecurityGroupSelectorTerms(securityGroupSelectorTerms)</code></li> <li><code>fn withSecurityGroupSelectorTermsMixin(securityGroupSelectorTerms)</code></li> <li><code>fn withSubnetSelectorTerms(subnetSelectorTerms)</code></li> <li><code>fn withSubnetSelectorTermsMixin(subnetSelectorTerms)</code></li> <li><code>fn withTags(tags)</code></li> <li><code>fn withTagsMixin(tags)</code></li> <li><code>fn withUserData(userData)</code></li> <li><code>obj spec.amiSelectorTerms</code><ul> <li><code>fn withId(id)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withOwner(owner)</code></li> <li><code>fn withTags(tags)</code></li> <li><code>fn withTagsMixin(tags)</code></li> </ul> </li> <li><code>obj spec.blockDeviceMappings</code><ul> <li><code>fn withDeviceName(deviceName)</code></li> <li><code>fn withRootVolume(rootVolume)</code></li> <li><code>obj spec.blockDeviceMappings.ebs</code><ul> <li><code>fn withDeleteOnTermination(deleteOnTermination)</code></li> <li><code>fn withEncrypted(encrypted)</code></li> <li><code>fn withIops(iops)</code></li> <li><code>fn withKmsKeyID(kmsKeyID)</code></li> <li><code>fn withSnapshotID(snapshotID)</code></li> <li><code>fn withThroughput(throughput)</code></li> <li><code>fn withVolumeSize(volumeSize)</code></li> <li><code>fn withVolumeType(volumeType)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.metadataOptions</code><ul> <li><code>fn withHttpEndpoint(httpEndpoint)</code></li> <li><code>fn withHttpProtocolIPv6(httpProtocolIPv6)</code></li> <li><code>fn withHttpPutResponseHopLimit(httpPutResponseHopLimit)</code></li> <li><code>fn withHttpTokens(httpTokens)</code></li> </ul> </li> <li><code>obj spec.securityGroupSelectorTerms</code><ul> <li><code>fn withId(id)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withTags(tags)</code></li> <li><code>fn withTagsMixin(tags)</code></li> </ul> </li> <li><code>obj spec.subnetSelectorTerms</code><ul> <li><code>fn withId(id)</code></li> <li><code>fn withTags(tags)</code></li> <li><code>fn withTagsMixin(tags)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fields","title":"Fields","text":""},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of EC2NodeClass</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#obj-spec","title":"obj spec","text":"<p>\"EC2NodeClassSpec is the top level specification for the AWS Karpenter Provider.\\nThis will contain configuration necessary to launch instances in AWS.\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithamifamily","title":"fn spec.withAmiFamily","text":"<pre><code>withAmiFamily(amiFamily)\n</code></pre> <p>\"AMIFamily is the AMI family that instances use.\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithamiselectorterms","title":"fn spec.withAmiSelectorTerms","text":"<pre><code>withAmiSelectorTerms(amiSelectorTerms)\n</code></pre> <p>\"AMISelectorTerms is a list of or ami selector terms. The terms are ORed.\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithamiselectortermsmixin","title":"fn spec.withAmiSelectorTermsMixin","text":"<pre><code>withAmiSelectorTermsMixin(amiSelectorTerms)\n</code></pre> <p>\"AMISelectorTerms is a list of or ami selector terms. The terms are ORed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithassociatepublicipaddress","title":"fn spec.withAssociatePublicIPAddress","text":"<pre><code>withAssociatePublicIPAddress(associatePublicIPAddress)\n</code></pre> <p>\"AssociatePublicIPAddress controls if public IP addresses are assigned to instances that are launched with the nodeclass.\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithblockdevicemappings","title":"fn spec.withBlockDeviceMappings","text":"<pre><code>withBlockDeviceMappings(blockDeviceMappings)\n</code></pre> <p>\"BlockDeviceMappings to be applied to provisioned nodes.\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithblockdevicemappingsmixin","title":"fn spec.withBlockDeviceMappingsMixin","text":"<pre><code>withBlockDeviceMappingsMixin(blockDeviceMappings)\n</code></pre> <p>\"BlockDeviceMappings to be applied to provisioned nodes.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithcontext","title":"fn spec.withContext","text":"<pre><code>withContext(context)\n</code></pre> <p>\"Context is a Reserved field in EC2 APIs\\nhttps://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet.html\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithdetailedmonitoring","title":"fn spec.withDetailedMonitoring","text":"<pre><code>withDetailedMonitoring(detailedMonitoring)\n</code></pre> <p>\"DetailedMonitoring controls if detailed monitoring is enabled for instances that are launched\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithinstanceprofile","title":"fn spec.withInstanceProfile","text":"<pre><code>withInstanceProfile(instanceProfile)\n</code></pre> <p>\"InstanceProfile is the AWS entity that instances use.\\nThis field is mutually exclusive from role.\\nThe instance profile should already have a role assigned to it that Karpenter\\n has PassRole permission on for instance launch using this instanceProfile to succeed.\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithinstancestorepolicy","title":"fn spec.withInstanceStorePolicy","text":"<pre><code>withInstanceStorePolicy(instanceStorePolicy)\n</code></pre> <p>\"InstanceStorePolicy specifies how to handle instance-store disks.\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithrole","title":"fn spec.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role is the AWS identity that nodes use. This field is immutable.\\nThis field is mutually exclusive from instanceProfile.\\nMarking this field as immutable avoids concerns around terminating managed instance profiles from running instances.\\nThis field may be made mutable in the future, assuming the correct garbage collection and drift handling is implemented\\nfor the old instance profiles on an update.\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithsecuritygroupselectorterms","title":"fn spec.withSecurityGroupSelectorTerms","text":"<pre><code>withSecurityGroupSelectorTerms(securityGroupSelectorTerms)\n</code></pre> <p>\"SecurityGroupSelectorTerms is a list of or security group selector terms. The terms are ORed.\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithsecuritygroupselectortermsmixin","title":"fn spec.withSecurityGroupSelectorTermsMixin","text":"<pre><code>withSecurityGroupSelectorTermsMixin(securityGroupSelectorTerms)\n</code></pre> <p>\"SecurityGroupSelectorTerms is a list of or security group selector terms. The terms are ORed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithsubnetselectorterms","title":"fn spec.withSubnetSelectorTerms","text":"<pre><code>withSubnetSelectorTerms(subnetSelectorTerms)\n</code></pre> <p>\"SubnetSelectorTerms is a list of or subnet selector terms. The terms are ORed.\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithsubnetselectortermsmixin","title":"fn spec.withSubnetSelectorTermsMixin","text":"<pre><code>withSubnetSelectorTermsMixin(subnetSelectorTerms)\n</code></pre> <p>\"SubnetSelectorTerms is a list of or subnet selector terms. The terms are ORed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithtags","title":"fn spec.withTags","text":"<pre><code>withTags(tags)\n</code></pre> <p>\"Tags to be applied on ec2 resources like instances and launch templates.\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithtagsmixin","title":"fn spec.withTagsMixin","text":"<pre><code>withTagsMixin(tags)\n</code></pre> <p>\"Tags to be applied on ec2 resources like instances and launch templates.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-specwithuserdata","title":"fn spec.withUserData","text":"<pre><code>withUserData(userData)\n</code></pre> <p>\"UserData to be applied to the provisioned nodes.\\nIt must be in the appropriate format based on the AMIFamily in use. Karpenter will merge certain fields into\\nthis UserData to ensure nodes are being provisioned with the correct configuration.\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#obj-specamiselectorterms","title":"obj spec.amiSelectorTerms","text":"<p>\"AMISelectorTerms is a list of or ami selector terms. The terms are ORed.\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-specamiselectortermswithid","title":"fn spec.amiSelectorTerms.withId","text":"<pre><code>withId(id)\n</code></pre> <p>\"ID is the ami id in EC2\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-specamiselectortermswithname","title":"fn spec.amiSelectorTerms.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the ami name in EC2.\\nThis value is the name field, which is different from the name tag.\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-specamiselectortermswithowner","title":"fn spec.amiSelectorTerms.withOwner","text":"<pre><code>withOwner(owner)\n</code></pre> <p>\"Owner is the owner for the ami.\\nYou can specify a combination of AWS account IDs, \\\"self\\\", \\\"amazon\\\", and \\\"aws-marketplace\\</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-specamiselectortermswithtags","title":"fn spec.amiSelectorTerms.withTags","text":"<pre><code>withTags(tags)\n</code></pre> <p>\"Tags is a map of key/value tags used to select subnets\\nSpecifying '*' for a value selects all values for a given tag key.\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-specamiselectortermswithtagsmixin","title":"fn spec.amiSelectorTerms.withTagsMixin","text":"<pre><code>withTagsMixin(tags)\n</code></pre> <p>\"Tags is a map of key/value tags used to select subnets\\nSpecifying '*' for a value selects all values for a given tag key.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#obj-specblockdevicemappings","title":"obj spec.blockDeviceMappings","text":"<p>\"BlockDeviceMappings to be applied to provisioned nodes.\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingswithdevicename","title":"fn spec.blockDeviceMappings.withDeviceName","text":"<pre><code>withDeviceName(deviceName)\n</code></pre> <p>\"The device name (for example, /dev/sdh or xvdh).\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingswithrootvolume","title":"fn spec.blockDeviceMappings.withRootVolume","text":"<pre><code>withRootVolume(rootVolume)\n</code></pre> <p>\"RootVolume is a flag indicating if this device is mounted as kubelet root dir. You can\\nconfigure at most one root volume in BlockDeviceMappings.\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#obj-specblockdevicemappingsebs","title":"obj spec.blockDeviceMappings.ebs","text":"<p>\"EBS contains parameters used to automatically set up EBS volumes when an instance is launched.\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingsebswithdeleteontermination","title":"fn spec.blockDeviceMappings.ebs.withDeleteOnTermination","text":"<pre><code>withDeleteOnTermination(deleteOnTermination)\n</code></pre> <p>\"DeleteOnTermination indicates whether the EBS volume is deleted on instance termination.\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingsebswithencrypted","title":"fn spec.blockDeviceMappings.ebs.withEncrypted","text":"<pre><code>withEncrypted(encrypted)\n</code></pre> <p>\"Encrypted indicates whether the EBS volume is encrypted. Encrypted volumes can only\\nbe attached to instances that support Amazon EBS encryption. If you are creating\\na volume from a snapshot, you can't specify an encryption value.\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingsebswithiops","title":"fn spec.blockDeviceMappings.ebs.withIops","text":"<pre><code>withIops(iops)\n</code></pre> <p>\"IOPS is the number of I/O operations per second (IOPS). For gp3, io1, and io2 volumes,\\nthis represents the number of IOPS that are provisioned for the volume. For\\ngp2 volumes, this represents the baseline performance of the volume and the\\nrate at which the volume accumulates I/O credits for bursting.\\n\\n\\nThe following are the supported values for each volume type:\\n\\n\\n   * gp3: 3,000-16,000 IOPS\\n\\n\\n   * io1: 100-64,000 IOPS\\n\\n\\n   * io2: 100-64,000 IOPS\\n\\n\\nFor io1 and io2 volumes, we guarantee 64,000 IOPS only for Instances built\\non the Nitro System (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances).\\nOther instance families guarantee performance up to 32,000 IOPS.\\n\\n\\nThis parameter is supported for io1, io2, and gp3 volumes only. This parameter\\nis not supported for gp2, st1, sc1, or standard volumes.\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingsebswithkmskeyid","title":"fn spec.blockDeviceMappings.ebs.withKmsKeyID","text":"<pre><code>withKmsKeyID(kmsKeyID)\n</code></pre> <p>\"KMSKeyID (ARN) of the symmetric Key Management Service (KMS) CMK used for encryption.\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingsebswithsnapshotid","title":"fn spec.blockDeviceMappings.ebs.withSnapshotID","text":"<pre><code>withSnapshotID(snapshotID)\n</code></pre> <p>\"SnapshotID is the ID of an EBS snapshot\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingsebswiththroughput","title":"fn spec.blockDeviceMappings.ebs.withThroughput","text":"<pre><code>withThroughput(throughput)\n</code></pre> <p>\"Throughput to provision for a gp3 volume, with a maximum of 1,000 MiB/s.\\nValid Range: Minimum value of 125. Maximum value of 1000.\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingsebswithvolumesize","title":"fn spec.blockDeviceMappings.ebs.withVolumeSize","text":"<pre><code>withVolumeSize(volumeSize)\n</code></pre> <p>\"VolumeSize in <code>Gi</code>, <code>G</code>, <code>Ti</code>, or <code>T</code>. You must specify either a snapshot ID or\\na volume size. The following are the supported volumes sizes for each volume\\ntype:\\n\\n\\n   * gp2 and gp3: 1-16,384\\n\\n\\n   * io1 and io2: 4-16,384\\n\\n\\n   * st1 and sc1: 125-16,384\\n\\n\\n   * standard: 1-1,024\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-specblockdevicemappingsebswithvolumetype","title":"fn spec.blockDeviceMappings.ebs.withVolumeType","text":"<pre><code>withVolumeType(volumeType)\n</code></pre> <p>\"VolumeType of the block device.\\nFor more information, see Amazon EBS volume types (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html)\\nin the Amazon Elastic Compute Cloud User Guide.\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#obj-specmetadataoptions","title":"obj spec.metadataOptions","text":"<p>\"MetadataOptions for the generated launch template of provisioned nodes.\\n\\n\\nThis specifies the exposure of the Instance Metadata Service to\\nprovisioned EC2 nodes. For more information,\\nsee Instance Metadata and User Data\\n(https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html)\\nin the Amazon Elastic Compute Cloud User Guide.\\n\\n\\nRefer to recommended, security best practices\\n(https://aws.github.io/aws-eks-best-practices/security/docs/iam/#restrict-access-to-the-instance-profile-assigned-to-the-worker-node)\\nfor limiting exposure of Instance Metadata and User Data to pods.\\nIf omitted, defaults to httpEndpoint enabled, with httpProtocolIPv6\\ndisabled, with httpPutResponseLimit of 2, and with httpTokens\\nrequired.\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-specmetadataoptionswithhttpendpoint","title":"fn spec.metadataOptions.withHttpEndpoint","text":"<pre><code>withHttpEndpoint(httpEndpoint)\n</code></pre> <p>\"HTTPEndpoint enables or disables the HTTP metadata endpoint on provisioned\\nnodes. If metadata options is non-nil, but this parameter is not specified,\\nthe default state is \\\"enabled\\\".\\n\\n\\nIf you specify a value of \\\"disabled\\\", instance metadata will not be accessible\\non the node.\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-specmetadataoptionswithhttpprotocolipv6","title":"fn spec.metadataOptions.withHttpProtocolIPv6","text":"<pre><code>withHttpProtocolIPv6(httpProtocolIPv6)\n</code></pre> <p>\"HTTPProtocolIPv6 enables or disables the IPv6 endpoint for the instance metadata\\nservice on provisioned nodes. If metadata options is non-nil, but this parameter\\nis not specified, the default state is \\\"disabled\\\".\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-specmetadataoptionswithhttpputresponsehoplimit","title":"fn spec.metadataOptions.withHttpPutResponseHopLimit","text":"<pre><code>withHttpPutResponseHopLimit(httpPutResponseHopLimit)\n</code></pre> <p>\"HTTPPutResponseHopLimit is the desired HTTP PUT response hop limit for\\ninstance metadata requests. The larger the number, the further instance\\nmetadata requests can travel. Possible values are integers from 1 to 64.\\nIf metadata options is non-nil, but this parameter is not specified, the\\ndefault value is 2.\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-specmetadataoptionswithhttptokens","title":"fn spec.metadataOptions.withHttpTokens","text":"<pre><code>withHttpTokens(httpTokens)\n</code></pre> <p>\"HTTPTokens determines the state of token usage for instance metadata\\nrequests. If metadata options is non-nil, but this parameter is not\\nspecified, the default state is \\\"required\\\".\\n\\n\\nIf the state is optional, one can choose to retrieve instance metadata with\\nor without a signed token header on the request. If one retrieves the IAM\\nrole credentials without a token, the version 1.0 role credentials are\\nreturned. If one retrieves the IAM role credentials using a valid signed\\ntoken, the version 2.0 role credentials are returned.\\n\\n\\nIf the state is \\\"required\\\", one must send a signed token header with any\\ninstance metadata retrieval requests. In this state, retrieving the IAM\\nrole credentials always returns the version 2.0 credentials; the version\\n1.0 credentials are not available.\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#obj-specsecuritygroupselectorterms","title":"obj spec.securityGroupSelectorTerms","text":"<p>\"SecurityGroupSelectorTerms is a list of or security group selector terms. The terms are ORed.\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-specsecuritygroupselectortermswithid","title":"fn spec.securityGroupSelectorTerms.withId","text":"<pre><code>withId(id)\n</code></pre> <p>\"ID is the security group id in EC2\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-specsecuritygroupselectortermswithname","title":"fn spec.securityGroupSelectorTerms.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the security group name in EC2.\\nThis value is the name field, which is different from the name tag.\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-specsecuritygroupselectortermswithtags","title":"fn spec.securityGroupSelectorTerms.withTags","text":"<pre><code>withTags(tags)\n</code></pre> <p>\"Tags is a map of key/value tags used to select subnets\\nSpecifying '*' for a value selects all values for a given tag key.\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-specsecuritygroupselectortermswithtagsmixin","title":"fn spec.securityGroupSelectorTerms.withTagsMixin","text":"<pre><code>withTagsMixin(tags)\n</code></pre> <p>\"Tags is a map of key/value tags used to select subnets\\nSpecifying '*' for a value selects all values for a given tag key.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#obj-specsubnetselectorterms","title":"obj spec.subnetSelectorTerms","text":"<p>\"SubnetSelectorTerms is a list of or subnet selector terms. The terms are ORed.\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-specsubnetselectortermswithid","title":"fn spec.subnetSelectorTerms.withId","text":"<pre><code>withId(id)\n</code></pre> <p>\"ID is the subnet id in EC2\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-specsubnetselectortermswithtags","title":"fn spec.subnetSelectorTerms.withTags","text":"<pre><code>withTags(tags)\n</code></pre> <p>\"Tags is a map of key/value tags used to select subnets\\nSpecifying '*' for a value selects all values for a given tag key.\"</p>"},{"location":"0.35/aws/karpenter/v1beta1/ec2NodeClass/#fn-specsubnetselectortermswithtagsmixin","title":"fn spec.subnetSelectorTerms.withTagsMixin","text":"<pre><code>withTagsMixin(tags)\n</code></pre> <p>\"Tags is a map of key/value tags used to select subnets\\nSpecifying '*' for a value selects all values for a given tag key.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.35/sh/","title":"karpenter","text":"<pre><code>local karpenter = import \"github.com/jsonnet-libs/karpenter-libsonnet/0.35/sh/main.libsonnet\"\n</code></pre> <ul> <li>karpenter</li> </ul>"},{"location":"0.35/sh/karpenter/","title":"karpenter","text":"<ul> <li>v1beta1</li> </ul>"},{"location":"0.35/sh/karpenter/v1beta1/","title":"karpenter.v1beta1","text":"<ul> <li>nodeClaim</li> <li>nodePool</li> </ul>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/","title":"karpenter.v1beta1.nodeClaim","text":"<p>\"NodeClaim is the Schema for the NodeClaims API\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withRequirements(requirements)</code></li> <li><code>fn withRequirementsMixin(requirements)</code></li> <li><code>fn withStartupTaints(startupTaints)</code></li> <li><code>fn withStartupTaintsMixin(startupTaints)</code></li> <li><code>fn withTaints(taints)</code></li> <li><code>fn withTaintsMixin(taints)</code></li> <li><code>obj spec.kubelet</code><ul> <li><code>fn withClusterDNS(clusterDNS)</code></li> <li><code>fn withClusterDNSMixin(clusterDNS)</code></li> <li><code>fn withCpuCFSQuota(cpuCFSQuota)</code></li> <li><code>fn withEvictionHard(evictionHard)</code></li> <li><code>fn withEvictionHardMixin(evictionHard)</code></li> <li><code>fn withEvictionMaxPodGracePeriod(evictionMaxPodGracePeriod)</code></li> <li><code>fn withEvictionSoft(evictionSoft)</code></li> <li><code>fn withEvictionSoftGracePeriod(evictionSoftGracePeriod)</code></li> <li><code>fn withEvictionSoftGracePeriodMixin(evictionSoftGracePeriod)</code></li> <li><code>fn withEvictionSoftMixin(evictionSoft)</code></li> <li><code>fn withImageGCHighThresholdPercent(imageGCHighThresholdPercent)</code></li> <li><code>fn withImageGCLowThresholdPercent(imageGCLowThresholdPercent)</code></li> <li><code>fn withKubeReserved(kubeReserved)</code></li> <li><code>fn withKubeReservedMixin(kubeReserved)</code></li> <li><code>fn withMaxPods(maxPods)</code></li> <li><code>fn withPodsPerCore(podsPerCore)</code></li> <li><code>fn withSystemReserved(systemReserved)</code></li> <li><code>fn withSystemReservedMixin(systemReserved)</code></li> </ul> </li> <li><code>obj spec.nodeClassRef</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.requirements</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMinValues(minValues)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> <li><code>obj spec.resources</code><ul> <li><code>fn withRequests(requests)</code></li> <li><code>fn withRequestsMixin(requests)</code></li> </ul> </li> <li><code>obj spec.startupTaints</code><ul> <li><code>fn withEffect(effect)</code></li> <li><code>fn withKey(key)</code></li> <li><code>fn withTimeAdded(timeAdded)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.taints</code><ul> <li><code>fn withEffect(effect)</code></li> <li><code>fn withKey(key)</code></li> <li><code>fn withTimeAdded(timeAdded)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fields","title":"Fields","text":""},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of NodeClaim</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#obj-spec","title":"obj spec","text":"<p>\"NodeClaimSpec describes the desired state of the NodeClaim\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-specwithrequirements","title":"fn spec.withRequirements","text":"<pre><code>withRequirements(requirements)\n</code></pre> <p>\"Requirements are layered with GetLabels and applied to every node.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-specwithrequirementsmixin","title":"fn spec.withRequirementsMixin","text":"<pre><code>withRequirementsMixin(requirements)\n</code></pre> <p>\"Requirements are layered with GetLabels and applied to every node.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-specwithstartuptaints","title":"fn spec.withStartupTaints","text":"<pre><code>withStartupTaints(startupTaints)\n</code></pre> <p>\"StartupTaints are taints that are applied to nodes upon startup which are expected to be removed automatically\\nwithin a short period of time, typically by a DaemonSet that tolerates the taint. These are commonly used by\\ndaemonsets to allow initialization and enforce startup ordering.  StartupTaints are ignored for provisioning\\npurposes in that pods are not required to tolerate a StartupTaint in order to have nodes provisioned for them.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-specwithstartuptaintsmixin","title":"fn spec.withStartupTaintsMixin","text":"<pre><code>withStartupTaintsMixin(startupTaints)\n</code></pre> <p>\"StartupTaints are taints that are applied to nodes upon startup which are expected to be removed automatically\\nwithin a short period of time, typically by a DaemonSet that tolerates the taint. These are commonly used by\\ndaemonsets to allow initialization and enforce startup ordering.  StartupTaints are ignored for provisioning\\npurposes in that pods are not required to tolerate a StartupTaint in order to have nodes provisioned for them.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-specwithtaints","title":"fn spec.withTaints","text":"<pre><code>withTaints(taints)\n</code></pre> <p>\"Taints will be applied to the NodeClaim's node.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-specwithtaintsmixin","title":"fn spec.withTaintsMixin","text":"<pre><code>withTaintsMixin(taints)\n</code></pre> <p>\"Taints will be applied to the NodeClaim's node.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#obj-speckubelet","title":"obj spec.kubelet","text":"<p>\"Kubelet defines args to be used when configuring kubelet on provisioned nodes.\\nThey are a subset of the upstream types, recognizing not all options may be supported.\\nWherever possible, the types and names should reflect the upstream kubelet types.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithclusterdns","title":"fn spec.kubelet.withClusterDNS","text":"<pre><code>withClusterDNS(clusterDNS)\n</code></pre> <p>\"clusterDNS is a list of IP addresses for the cluster DNS server.\\nNote that not all providers may use all addresses.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithclusterdnsmixin","title":"fn spec.kubelet.withClusterDNSMixin","text":"<pre><code>withClusterDNSMixin(clusterDNS)\n</code></pre> <p>\"clusterDNS is a list of IP addresses for the cluster DNS server.\\nNote that not all providers may use all addresses.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithcpucfsquota","title":"fn spec.kubelet.withCpuCFSQuota","text":"<pre><code>withCpuCFSQuota(cpuCFSQuota)\n</code></pre> <p>\"CPUCFSQuota enables CPU CFS quota enforcement for containers that specify CPU limits.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithevictionhard","title":"fn spec.kubelet.withEvictionHard","text":"<pre><code>withEvictionHard(evictionHard)\n</code></pre> <p>\"EvictionHard is the map of signal names to quantities that define hard eviction thresholds\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithevictionhardmixin","title":"fn spec.kubelet.withEvictionHardMixin","text":"<pre><code>withEvictionHardMixin(evictionHard)\n</code></pre> <p>\"EvictionHard is the map of signal names to quantities that define hard eviction thresholds\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithevictionmaxpodgraceperiod","title":"fn spec.kubelet.withEvictionMaxPodGracePeriod","text":"<pre><code>withEvictionMaxPodGracePeriod(evictionMaxPodGracePeriod)\n</code></pre> <p>\"EvictionMaxPodGracePeriod is the maximum allowed grace period (in seconds) to use when terminating pods in\\nresponse to soft eviction thresholds being met.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithevictionsoft","title":"fn spec.kubelet.withEvictionSoft","text":"<pre><code>withEvictionSoft(evictionSoft)\n</code></pre> <p>\"EvictionSoft is the map of signal names to quantities that define soft eviction thresholds\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithevictionsoftgraceperiod","title":"fn spec.kubelet.withEvictionSoftGracePeriod","text":"<pre><code>withEvictionSoftGracePeriod(evictionSoftGracePeriod)\n</code></pre> <p>\"EvictionSoftGracePeriod is the map of signal names to quantities that define grace periods for each eviction signal\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithevictionsoftgraceperiodmixin","title":"fn spec.kubelet.withEvictionSoftGracePeriodMixin","text":"<pre><code>withEvictionSoftGracePeriodMixin(evictionSoftGracePeriod)\n</code></pre> <p>\"EvictionSoftGracePeriod is the map of signal names to quantities that define grace periods for each eviction signal\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithevictionsoftmixin","title":"fn spec.kubelet.withEvictionSoftMixin","text":"<pre><code>withEvictionSoftMixin(evictionSoft)\n</code></pre> <p>\"EvictionSoft is the map of signal names to quantities that define soft eviction thresholds\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithimagegchighthresholdpercent","title":"fn spec.kubelet.withImageGCHighThresholdPercent","text":"<pre><code>withImageGCHighThresholdPercent(imageGCHighThresholdPercent)\n</code></pre> <p>\"ImageGCHighThresholdPercent is the percent of disk usage after which image\\ngarbage collection is always run. The percent is calculated by dividing this\\nfield value by 100, so this field must be between 0 and 100, inclusive.\\nWhen specified, the value must be greater than ImageGCLowThresholdPercent.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithimagegclowthresholdpercent","title":"fn spec.kubelet.withImageGCLowThresholdPercent","text":"<pre><code>withImageGCLowThresholdPercent(imageGCLowThresholdPercent)\n</code></pre> <p>\"ImageGCLowThresholdPercent is the percent of disk usage before which image\\ngarbage collection is never run. Lowest disk usage to garbage collect to.\\nThe percent is calculated by dividing this field value by 100,\\nso the field value must be between 0 and 100, inclusive.\\nWhen specified, the value must be less than imageGCHighThresholdPercent\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithkubereserved","title":"fn spec.kubelet.withKubeReserved","text":"<pre><code>withKubeReserved(kubeReserved)\n</code></pre> <p>\"KubeReserved contains resources reserved for Kubernetes system components.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithkubereservedmixin","title":"fn spec.kubelet.withKubeReservedMixin","text":"<pre><code>withKubeReservedMixin(kubeReserved)\n</code></pre> <p>\"KubeReserved contains resources reserved for Kubernetes system components.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithmaxpods","title":"fn spec.kubelet.withMaxPods","text":"<pre><code>withMaxPods(maxPods)\n</code></pre> <p>\"MaxPods is an override for the maximum number of pods that can run on\\na worker node instance.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithpodspercore","title":"fn spec.kubelet.withPodsPerCore","text":"<pre><code>withPodsPerCore(podsPerCore)\n</code></pre> <p>\"PodsPerCore is an override for the number of pods that can run on a worker node\\ninstance based on the number of cpu cores. This value cannot exceed MaxPods, so, if\\nMaxPods is a lower value, that value will be used.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithsystemreserved","title":"fn spec.kubelet.withSystemReserved","text":"<pre><code>withSystemReserved(systemReserved)\n</code></pre> <p>\"SystemReserved contains resources reserved for OS system daemons and kernel memory.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-speckubeletwithsystemreservedmixin","title":"fn spec.kubelet.withSystemReservedMixin","text":"<pre><code>withSystemReservedMixin(systemReserved)\n</code></pre> <p>\"SystemReserved contains resources reserved for OS system daemons and kernel memory.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#obj-specnodeclassref","title":"obj spec.nodeClassRef","text":"<p>\"NodeClassRef is a reference to an object that defines provider specific configuration\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-specnodeclassrefwithapiversion","title":"fn spec.nodeClassRef.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"API version of the referent\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-specnodeclassrefwithkind","title":"fn spec.nodeClassRef.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\\</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-specnodeclassrefwithname","title":"fn spec.nodeClassRef.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#obj-specrequirements","title":"obj spec.requirements","text":"<p>\"Requirements are layered with GetLabels and applied to every node.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-specrequirementswithkey","title":"fn spec.requirements.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"The label key that the selector applies to.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-specrequirementswithminvalues","title":"fn spec.requirements.withMinValues","text":"<pre><code>withMinValues(minValues)\n</code></pre> <p>\"This field is ALPHA and can be dropped or replaced at any time\\nMinValues is the minimum number of unique values required to define the flexibility of the specific requirement.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-specrequirementswithoperator","title":"fn spec.requirements.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-specrequirementswithvalues","title":"fn spec.requirements.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-specrequirementswithvaluesmixin","title":"fn spec.requirements.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#obj-specresources","title":"obj spec.resources","text":"<p>\"Resources models the resource requirements for the NodeClaim to launch\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-specresourceswithrequests","title":"fn spec.resources.withRequests","text":"<pre><code>withRequests(requests)\n</code></pre> <p>\"Requests describes the minimum required resources for the NodeClaim to launch\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-specresourceswithrequestsmixin","title":"fn spec.resources.withRequestsMixin","text":"<pre><code>withRequestsMixin(requests)\n</code></pre> <p>\"Requests describes the minimum required resources for the NodeClaim to launch\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#obj-specstartuptaints","title":"obj spec.startupTaints","text":"<p>\"StartupTaints are taints that are applied to nodes upon startup which are expected to be removed automatically\\nwithin a short period of time, typically by a DaemonSet that tolerates the taint. These are commonly used by\\ndaemonsets to allow initialization and enforce startup ordering.  StartupTaints are ignored for provisioning\\npurposes in that pods are not required to tolerate a StartupTaint in order to have nodes provisioned for them.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-specstartuptaintswitheffect","title":"fn spec.startupTaints.withEffect","text":"<pre><code>withEffect(effect)\n</code></pre> <p>\"Required. The effect of the taint on pods\\nthat do not tolerate the taint.\\nValid effects are NoSchedule, PreferNoSchedule and NoExecute.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-specstartuptaintswithkey","title":"fn spec.startupTaints.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Required. The taint key to be applied to a node.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-specstartuptaintswithtimeadded","title":"fn spec.startupTaints.withTimeAdded","text":"<pre><code>withTimeAdded(timeAdded)\n</code></pre> <p>\"TimeAdded represents the time at which the taint was added.\\nIt is only written for NoExecute taints.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-specstartuptaintswithvalue","title":"fn spec.startupTaints.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"The taint value corresponding to the taint key.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#obj-spectaints","title":"obj spec.taints","text":"<p>\"Taints will be applied to the NodeClaim's node.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-spectaintswitheffect","title":"fn spec.taints.withEffect","text":"<pre><code>withEffect(effect)\n</code></pre> <p>\"Required. The effect of the taint on pods\\nthat do not tolerate the taint.\\nValid effects are NoSchedule, PreferNoSchedule and NoExecute.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-spectaintswithkey","title":"fn spec.taints.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Required. The taint key to be applied to a node.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-spectaintswithtimeadded","title":"fn spec.taints.withTimeAdded","text":"<pre><code>withTimeAdded(timeAdded)\n</code></pre> <p>\"TimeAdded represents the time at which the taint was added.\\nIt is only written for NoExecute taints.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodeClaim/#fn-spectaintswithvalue","title":"fn spec.taints.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"The taint value corresponding to the taint key.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/","title":"karpenter.v1beta1.nodePool","text":"<p>\"NodePool is the Schema for the NodePools API\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withLimits(limits)</code></li> <li><code>fn withLimitsMixin(limits)</code></li> <li><code>fn withWeight(weight)</code></li> <li><code>obj spec.disruption</code><ul> <li><code>fn withBudgets(budgets)</code></li> <li><code>fn withBudgetsMixin(budgets)</code></li> <li><code>fn withConsolidateAfter(consolidateAfter)</code></li> <li><code>fn withConsolidationPolicy(consolidationPolicy)</code></li> <li><code>fn withExpireAfter(expireAfter)</code></li> <li><code>obj spec.disruption.budgets</code><ul> <li><code>fn withDuration(duration)</code></li> <li><code>fn withNodes(nodes)</code></li> <li><code>fn withSchedule(schedule)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.template</code><ul> <li><code>obj spec.template.metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> </ul> </li> <li><code>obj spec.template.spec</code><ul> <li><code>fn withRequirements(requirements)</code></li> <li><code>fn withRequirementsMixin(requirements)</code></li> <li><code>fn withStartupTaints(startupTaints)</code></li> <li><code>fn withStartupTaintsMixin(startupTaints)</code></li> <li><code>fn withTaints(taints)</code></li> <li><code>fn withTaintsMixin(taints)</code></li> <li><code>obj spec.template.spec.kubelet</code><ul> <li><code>fn withClusterDNS(clusterDNS)</code></li> <li><code>fn withClusterDNSMixin(clusterDNS)</code></li> <li><code>fn withCpuCFSQuota(cpuCFSQuota)</code></li> <li><code>fn withEvictionHard(evictionHard)</code></li> <li><code>fn withEvictionHardMixin(evictionHard)</code></li> <li><code>fn withEvictionMaxPodGracePeriod(evictionMaxPodGracePeriod)</code></li> <li><code>fn withEvictionSoft(evictionSoft)</code></li> <li><code>fn withEvictionSoftGracePeriod(evictionSoftGracePeriod)</code></li> <li><code>fn withEvictionSoftGracePeriodMixin(evictionSoftGracePeriod)</code></li> <li><code>fn withEvictionSoftMixin(evictionSoft)</code></li> <li><code>fn withImageGCHighThresholdPercent(imageGCHighThresholdPercent)</code></li> <li><code>fn withImageGCLowThresholdPercent(imageGCLowThresholdPercent)</code></li> <li><code>fn withKubeReserved(kubeReserved)</code></li> <li><code>fn withKubeReservedMixin(kubeReserved)</code></li> <li><code>fn withMaxPods(maxPods)</code></li> <li><code>fn withPodsPerCore(podsPerCore)</code></li> <li><code>fn withSystemReserved(systemReserved)</code></li> <li><code>fn withSystemReservedMixin(systemReserved)</code></li> </ul> </li> <li><code>obj spec.template.spec.nodeClassRef</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.template.spec.requirements</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMinValues(minValues)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> <li><code>obj spec.template.spec.resources</code><ul> <li><code>fn withRequests(requests)</code></li> <li><code>fn withRequestsMixin(requests)</code></li> </ul> </li> <li><code>obj spec.template.spec.startupTaints</code><ul> <li><code>fn withEffect(effect)</code></li> <li><code>fn withKey(key)</code></li> <li><code>fn withTimeAdded(timeAdded)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.template.spec.taints</code><ul> <li><code>fn withEffect(effect)</code></li> <li><code>fn withKey(key)</code></li> <li><code>fn withTimeAdded(timeAdded)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fields","title":"Fields","text":""},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of NodePool</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#obj-spec","title":"obj spec","text":"<p>\"NodePoolSpec is the top level nodepool specification. Nodepools\\nlaunch nodes in response to pods that are unschedulable. A single nodepool\\nis capable of managing a diverse set of nodes. Node properties are determined\\nfrom a combination of nodepool and pod scheduling constraints.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-specwithlimits","title":"fn spec.withLimits","text":"<pre><code>withLimits(limits)\n</code></pre> <p>\"Limits define a set of bounds for provisioning capacity.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-specwithlimitsmixin","title":"fn spec.withLimitsMixin","text":"<pre><code>withLimitsMixin(limits)\n</code></pre> <p>\"Limits define a set of bounds for provisioning capacity.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-specwithweight","title":"fn spec.withWeight","text":"<pre><code>withWeight(weight)\n</code></pre> <p>\"Weight is the priority given to the nodepool during scheduling. A higher\\nnumerical weight indicates that this nodepool will be ordered\\nahead of other nodepools with lower weights. A nodepool with no weight\\nwill be treated as if it is a nodepool with a weight of 0.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#obj-specdisruption","title":"obj spec.disruption","text":"<p>\"Disruption contains the parameters that relate to Karpenter's disruption logic\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-specdisruptionwithbudgets","title":"fn spec.disruption.withBudgets","text":"<pre><code>withBudgets(budgets)\n</code></pre> <p>\"Budgets is a list of Budgets.\\nIf there are multiple active budgets, Karpenter uses\\nthe most restrictive value. If left undefined,\\nthis will default to one budget with a value to 10%.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-specdisruptionwithbudgetsmixin","title":"fn spec.disruption.withBudgetsMixin","text":"<pre><code>withBudgetsMixin(budgets)\n</code></pre> <p>\"Budgets is a list of Budgets.\\nIf there are multiple active budgets, Karpenter uses\\nthe most restrictive value. If left undefined,\\nthis will default to one budget with a value to 10%.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-specdisruptionwithconsolidateafter","title":"fn spec.disruption.withConsolidateAfter","text":"<pre><code>withConsolidateAfter(consolidateAfter)\n</code></pre> <p>\"ConsolidateAfter is the duration the controller will wait\\nbefore attempting to terminate nodes that are underutilized.\\nRefer to ConsolidationPolicy for how underutilization is considered.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-specdisruptionwithconsolidationpolicy","title":"fn spec.disruption.withConsolidationPolicy","text":"<pre><code>withConsolidationPolicy(consolidationPolicy)\n</code></pre> <p>\"ConsolidationPolicy describes which nodes Karpenter can disrupt through its consolidation\\nalgorithm. This policy defaults to \\\"WhenUnderutilized\\\" if not specified\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-specdisruptionwithexpireafter","title":"fn spec.disruption.withExpireAfter","text":"<pre><code>withExpireAfter(expireAfter)\n</code></pre> <p>\"ExpireAfter is the duration the controller will wait\\nbefore terminating a node, measured from when the node is created. This\\nis useful to implement features like eventually consistent node upgrade,\\nmemory leak protection, and disruption testing.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#obj-specdisruptionbudgets","title":"obj spec.disruption.budgets","text":"<p>\"Budgets is a list of Budgets.\\nIf there are multiple active budgets, Karpenter uses\\nthe most restrictive value. If left undefined,\\nthis will default to one budget with a value to 10%.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-specdisruptionbudgetswithduration","title":"fn spec.disruption.budgets.withDuration","text":"<pre><code>withDuration(duration)\n</code></pre> <p>\"Duration determines how long a Budget is active since each Schedule hit.\\nOnly minutes and hours are accepted, as cron does not work in seconds.\\nIf omitted, the budget is always active.\\nThis is required if Schedule is set.\\nThis regex has an optional 0s at the end since the duration.String() always adds\\na 0s at the end.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-specdisruptionbudgetswithnodes","title":"fn spec.disruption.budgets.withNodes","text":"<pre><code>withNodes(nodes)\n</code></pre> <p>\"Nodes dictates the maximum number of NodeClaims owned by this NodePool\\nthat can be terminating at once. This is calculated by counting nodes that\\nhave a deletion timestamp set, or are actively being deleted by Karpenter.\\nThis field is required when specifying a budget.\\nThis cannot be of type intstr.IntOrString since kubebuilder doesn't support pattern\\nchecking for int nodes for IntOrString nodes.\\nRef: https://github.com/kubernetes-sigs/controller-tools/blob/55efe4be40394a288216dab63156b0a64fb82929/pkg/crd/markers/validation.go#L379-L388\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-specdisruptionbudgetswithschedule","title":"fn spec.disruption.budgets.withSchedule","text":"<pre><code>withSchedule(schedule)\n</code></pre> <p>\"Schedule specifies when a budget begins being active, following\\nthe upstream cronjob syntax. If omitted, the budget is always active.\\nTimezones are not supported.\\nThis field is required if Duration is set.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#obj-spectemplate","title":"obj spec.template","text":"<p>\"Template contains the template of possibilities for the provisioning logic to launch a NodeClaim with.\\nNodeClaims launched from this NodePool will often be further constrained than the template specifies.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#obj-spectemplatemetadata","title":"obj spec.template.metadata","text":""},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-spectemplatemetadatawithannotations","title":"fn spec.template.metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be\\nset by external tools to store and retrieve arbitrary metadata. They are not\\nqueryable and should be preserved when modifying objects.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-spectemplatemetadatawithannotationsmixin","title":"fn spec.template.metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be\\nset by external tools to store and retrieve arbitrary metadata. They are not\\nqueryable and should be preserved when modifying objects.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-spectemplatemetadatawithlabels","title":"fn spec.template.metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize\\n(scope and select) objects. May match selectors of replication controllers\\nand services.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-spectemplatemetadatawithlabelsmixin","title":"fn spec.template.metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize\\n(scope and select) objects. May match selectors of replication controllers\\nand services.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#obj-spectemplatespec","title":"obj spec.template.spec","text":"<p>\"NodeClaimSpec describes the desired state of the NodeClaim\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecwithrequirements","title":"fn spec.template.spec.withRequirements","text":"<pre><code>withRequirements(requirements)\n</code></pre> <p>\"Requirements are layered with GetLabels and applied to every node.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecwithrequirementsmixin","title":"fn spec.template.spec.withRequirementsMixin","text":"<pre><code>withRequirementsMixin(requirements)\n</code></pre> <p>\"Requirements are layered with GetLabels and applied to every node.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecwithstartuptaints","title":"fn spec.template.spec.withStartupTaints","text":"<pre><code>withStartupTaints(startupTaints)\n</code></pre> <p>\"StartupTaints are taints that are applied to nodes upon startup which are expected to be removed automatically\\nwithin a short period of time, typically by a DaemonSet that tolerates the taint. These are commonly used by\\ndaemonsets to allow initialization and enforce startup ordering.  StartupTaints are ignored for provisioning\\npurposes in that pods are not required to tolerate a StartupTaint in order to have nodes provisioned for them.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecwithstartuptaintsmixin","title":"fn spec.template.spec.withStartupTaintsMixin","text":"<pre><code>withStartupTaintsMixin(startupTaints)\n</code></pre> <p>\"StartupTaints are taints that are applied to nodes upon startup which are expected to be removed automatically\\nwithin a short period of time, typically by a DaemonSet that tolerates the taint. These are commonly used by\\ndaemonsets to allow initialization and enforce startup ordering.  StartupTaints are ignored for provisioning\\npurposes in that pods are not required to tolerate a StartupTaint in order to have nodes provisioned for them.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecwithtaints","title":"fn spec.template.spec.withTaints","text":"<pre><code>withTaints(taints)\n</code></pre> <p>\"Taints will be applied to the NodeClaim's node.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecwithtaintsmixin","title":"fn spec.template.spec.withTaintsMixin","text":"<pre><code>withTaintsMixin(taints)\n</code></pre> <p>\"Taints will be applied to the NodeClaim's node.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#obj-spectemplatespeckubelet","title":"obj spec.template.spec.kubelet","text":"<p>\"Kubelet defines args to be used when configuring kubelet on provisioned nodes.\\nThey are a subset of the upstream types, recognizing not all options may be supported.\\nWherever possible, the types and names should reflect the upstream kubelet types.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithclusterdns","title":"fn spec.template.spec.kubelet.withClusterDNS","text":"<pre><code>withClusterDNS(clusterDNS)\n</code></pre> <p>\"clusterDNS is a list of IP addresses for the cluster DNS server.\\nNote that not all providers may use all addresses.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithclusterdnsmixin","title":"fn spec.template.spec.kubelet.withClusterDNSMixin","text":"<pre><code>withClusterDNSMixin(clusterDNS)\n</code></pre> <p>\"clusterDNS is a list of IP addresses for the cluster DNS server.\\nNote that not all providers may use all addresses.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithcpucfsquota","title":"fn spec.template.spec.kubelet.withCpuCFSQuota","text":"<pre><code>withCpuCFSQuota(cpuCFSQuota)\n</code></pre> <p>\"CPUCFSQuota enables CPU CFS quota enforcement for containers that specify CPU limits.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithevictionhard","title":"fn spec.template.spec.kubelet.withEvictionHard","text":"<pre><code>withEvictionHard(evictionHard)\n</code></pre> <p>\"EvictionHard is the map of signal names to quantities that define hard eviction thresholds\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithevictionhardmixin","title":"fn spec.template.spec.kubelet.withEvictionHardMixin","text":"<pre><code>withEvictionHardMixin(evictionHard)\n</code></pre> <p>\"EvictionHard is the map of signal names to quantities that define hard eviction thresholds\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithevictionmaxpodgraceperiod","title":"fn spec.template.spec.kubelet.withEvictionMaxPodGracePeriod","text":"<pre><code>withEvictionMaxPodGracePeriod(evictionMaxPodGracePeriod)\n</code></pre> <p>\"EvictionMaxPodGracePeriod is the maximum allowed grace period (in seconds) to use when terminating pods in\\nresponse to soft eviction thresholds being met.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithevictionsoft","title":"fn spec.template.spec.kubelet.withEvictionSoft","text":"<pre><code>withEvictionSoft(evictionSoft)\n</code></pre> <p>\"EvictionSoft is the map of signal names to quantities that define soft eviction thresholds\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithevictionsoftgraceperiod","title":"fn spec.template.spec.kubelet.withEvictionSoftGracePeriod","text":"<pre><code>withEvictionSoftGracePeriod(evictionSoftGracePeriod)\n</code></pre> <p>\"EvictionSoftGracePeriod is the map of signal names to quantities that define grace periods for each eviction signal\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithevictionsoftgraceperiodmixin","title":"fn spec.template.spec.kubelet.withEvictionSoftGracePeriodMixin","text":"<pre><code>withEvictionSoftGracePeriodMixin(evictionSoftGracePeriod)\n</code></pre> <p>\"EvictionSoftGracePeriod is the map of signal names to quantities that define grace periods for each eviction signal\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithevictionsoftmixin","title":"fn spec.template.spec.kubelet.withEvictionSoftMixin","text":"<pre><code>withEvictionSoftMixin(evictionSoft)\n</code></pre> <p>\"EvictionSoft is the map of signal names to quantities that define soft eviction thresholds\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithimagegchighthresholdpercent","title":"fn spec.template.spec.kubelet.withImageGCHighThresholdPercent","text":"<pre><code>withImageGCHighThresholdPercent(imageGCHighThresholdPercent)\n</code></pre> <p>\"ImageGCHighThresholdPercent is the percent of disk usage after which image\\ngarbage collection is always run. The percent is calculated by dividing this\\nfield value by 100, so this field must be between 0 and 100, inclusive.\\nWhen specified, the value must be greater than ImageGCLowThresholdPercent.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithimagegclowthresholdpercent","title":"fn spec.template.spec.kubelet.withImageGCLowThresholdPercent","text":"<pre><code>withImageGCLowThresholdPercent(imageGCLowThresholdPercent)\n</code></pre> <p>\"ImageGCLowThresholdPercent is the percent of disk usage before which image\\ngarbage collection is never run. Lowest disk usage to garbage collect to.\\nThe percent is calculated by dividing this field value by 100,\\nso the field value must be between 0 and 100, inclusive.\\nWhen specified, the value must be less than imageGCHighThresholdPercent\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithkubereserved","title":"fn spec.template.spec.kubelet.withKubeReserved","text":"<pre><code>withKubeReserved(kubeReserved)\n</code></pre> <p>\"KubeReserved contains resources reserved for Kubernetes system components.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithkubereservedmixin","title":"fn spec.template.spec.kubelet.withKubeReservedMixin","text":"<pre><code>withKubeReservedMixin(kubeReserved)\n</code></pre> <p>\"KubeReserved contains resources reserved for Kubernetes system components.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithmaxpods","title":"fn spec.template.spec.kubelet.withMaxPods","text":"<pre><code>withMaxPods(maxPods)\n</code></pre> <p>\"MaxPods is an override for the maximum number of pods that can run on\\na worker node instance.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithpodspercore","title":"fn spec.template.spec.kubelet.withPodsPerCore","text":"<pre><code>withPodsPerCore(podsPerCore)\n</code></pre> <p>\"PodsPerCore is an override for the number of pods that can run on a worker node\\ninstance based on the number of cpu cores. This value cannot exceed MaxPods, so, if\\nMaxPods is a lower value, that value will be used.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithsystemreserved","title":"fn spec.template.spec.kubelet.withSystemReserved","text":"<pre><code>withSystemReserved(systemReserved)\n</code></pre> <p>\"SystemReserved contains resources reserved for OS system daemons and kernel memory.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespeckubeletwithsystemreservedmixin","title":"fn spec.template.spec.kubelet.withSystemReservedMixin","text":"<pre><code>withSystemReservedMixin(systemReserved)\n</code></pre> <p>\"SystemReserved contains resources reserved for OS system daemons and kernel memory.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#obj-spectemplatespecnodeclassref","title":"obj spec.template.spec.nodeClassRef","text":"<p>\"NodeClassRef is a reference to an object that defines provider specific configuration\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecnodeclassrefwithapiversion","title":"fn spec.template.spec.nodeClassRef.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"API version of the referent\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecnodeclassrefwithkind","title":"fn spec.template.spec.nodeClassRef.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\\</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecnodeclassrefwithname","title":"fn spec.template.spec.nodeClassRef.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#obj-spectemplatespecrequirements","title":"obj spec.template.spec.requirements","text":"<p>\"Requirements are layered with GetLabels and applied to every node.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecrequirementswithkey","title":"fn spec.template.spec.requirements.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"The label key that the selector applies to.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecrequirementswithminvalues","title":"fn spec.template.spec.requirements.withMinValues","text":"<pre><code>withMinValues(minValues)\n</code></pre> <p>\"This field is ALPHA and can be dropped or replaced at any time\\nMinValues is the minimum number of unique values required to define the flexibility of the specific requirement.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecrequirementswithoperator","title":"fn spec.template.spec.requirements.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecrequirementswithvalues","title":"fn spec.template.spec.requirements.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecrequirementswithvaluesmixin","title":"fn spec.template.spec.requirements.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#obj-spectemplatespecresources","title":"obj spec.template.spec.resources","text":"<p>\"Resources models the resource requirements for the NodeClaim to launch\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecresourceswithrequests","title":"fn spec.template.spec.resources.withRequests","text":"<pre><code>withRequests(requests)\n</code></pre> <p>\"Requests describes the minimum required resources for the NodeClaim to launch\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecresourceswithrequestsmixin","title":"fn spec.template.spec.resources.withRequestsMixin","text":"<pre><code>withRequestsMixin(requests)\n</code></pre> <p>\"Requests describes the minimum required resources for the NodeClaim to launch\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#obj-spectemplatespecstartuptaints","title":"obj spec.template.spec.startupTaints","text":"<p>\"StartupTaints are taints that are applied to nodes upon startup which are expected to be removed automatically\\nwithin a short period of time, typically by a DaemonSet that tolerates the taint. These are commonly used by\\ndaemonsets to allow initialization and enforce startup ordering.  StartupTaints are ignored for provisioning\\npurposes in that pods are not required to tolerate a StartupTaint in order to have nodes provisioned for them.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecstartuptaintswitheffect","title":"fn spec.template.spec.startupTaints.withEffect","text":"<pre><code>withEffect(effect)\n</code></pre> <p>\"Required. The effect of the taint on pods\\nthat do not tolerate the taint.\\nValid effects are NoSchedule, PreferNoSchedule and NoExecute.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecstartuptaintswithkey","title":"fn spec.template.spec.startupTaints.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Required. The taint key to be applied to a node.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecstartuptaintswithtimeadded","title":"fn spec.template.spec.startupTaints.withTimeAdded","text":"<pre><code>withTimeAdded(timeAdded)\n</code></pre> <p>\"TimeAdded represents the time at which the taint was added.\\nIt is only written for NoExecute taints.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespecstartuptaintswithvalue","title":"fn spec.template.spec.startupTaints.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"The taint value corresponding to the taint key.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#obj-spectemplatespectaints","title":"obj spec.template.spec.taints","text":"<p>\"Taints will be applied to the NodeClaim's node.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespectaintswitheffect","title":"fn spec.template.spec.taints.withEffect","text":"<pre><code>withEffect(effect)\n</code></pre> <p>\"Required. The effect of the taint on pods\\nthat do not tolerate the taint.\\nValid effects are NoSchedule, PreferNoSchedule and NoExecute.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespectaintswithkey","title":"fn spec.template.spec.taints.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Required. The taint key to be applied to a node.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespectaintswithtimeadded","title":"fn spec.template.spec.taints.withTimeAdded","text":"<pre><code>withTimeAdded(timeAdded)\n</code></pre> <p>\"TimeAdded represents the time at which the taint was added.\\nIt is only written for NoExecute taints.\"</p>"},{"location":"0.35/sh/karpenter/v1beta1/nodePool/#fn-spectemplatespectaintswithvalue","title":"fn spec.template.spec.taints.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"The taint value corresponding to the taint key.\"</p>"}]}